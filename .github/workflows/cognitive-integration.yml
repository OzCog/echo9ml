name: Distributed Agentic Cognitive Grammar Integration

on:
  workflow_dispatch:
    inputs:
      phase:
        description: 'Cognitive development phase to execute (1-6, or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - '1'
          - '2' 
          - '3'
          - '4'
          - '5'
          - '6'
      create_issues:
        description: 'Create GitHub issues for phases'
        required: true
        default: true
        type: boolean
      execute_integration:
        description: 'Execute cognitive integration'
        required: true
        default: true
        type: boolean
  schedule:
    - cron: '0 6 * * 1'
  push:
    branches: [ "main" ]
    paths:
      - 'distributed_cognitive_grammar.py'
      - 'cognitive_architecture.py'
      - 'ggml_tensor_kernel.py'
      - 'symbolic_reasoning.py'

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  cognitive-integration:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    name: Reservoir Computing Cognitive Integration
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv psutil pyyaml
          pip install --no-deps --timeout=30 numpy || echo "Numpy install failed, using fallback"

      - name: Initialize Cognitive Architecture
        run: |
          echo "Initializing Deep Tree Echo Cognitive Architecture..."
          mkdir -p cognitive_workspace
          mkdir -p cognitive_logs
          
      - name: Create Phase Issues
        if: ${{ inputs.create_issues == true || github.event_name == 'schedule' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PHASE: ${{ inputs.phase || 'all' }}
        run: python cognitive_integration_orchestrator.py --create-issues --phase "$PHASE"

      - name: Execute Cognitive Integration
        if: ${{ inputs.execute_integration == true || github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PHASE: ${{ inputs.phase || 'all' }}
        run: python cognitive_integration_orchestrator.py --execute --phase "$PHASE"

      - name: Generate Cognitive Status Report
        run: |
          python cognitive_integration_orchestrator.py --status-report > cognitive_logs/integration_status_$(date +%Y%m%d_%H%M%S).md

      - name: Update Echo State Network
        run: |
          echo "Updating reservoir computing nodes..."
          python cognitive_integration_orchestrator.py --update-reservoir

      - name: Archive Cognitive Logs
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-integration-logs
          path: cognitive_logs/
          retention-days: 30

      - name: Commit Integration Results
        run: |
          git config --global user.name 'cognitive-integration-bot'
          git config --global user.email 'cognitive-integration-bot@github.com'
          
          if [ -d "cognitive_workspace" ] && [ "$(ls -A cognitive_workspace)" ]; then
            git add cognitive_workspace/ cognitive_logs/
            git commit -m "Update cognitive integration workspace - $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
            git push origin HEAD:main || echo "Push failed or no changes"
          fi

      - name: Trigger Dependent Workflows
        if: success()
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/cronbot.yml/dispatches" \
            -d '{"ref":"main"}'

  validate-integration:
    needs: cognitive-integration
    runs-on: blacksmith-4vcpu-ubuntu-2404
    name: Validate Cognitive Integration
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install validation dependencies
        run: |
          pip install requests python-dotenv

      - name: Run Integration Validation
        run: |
          echo "Validating cognitive integration..."
          python -c "
          import sys
          import os
          sys.path.append('.')
          
          try:
              required_files = [
                  'distributed_cognitive_grammar.py',
                  'cognitive_architecture.py', 
                  'ggml_tensor_kernel.py',
                  'symbolic_reasoning.py'
              ]
              
              for file in required_files:
                  if os.path.exists(file):
                      print(f'✓ {file} exists')
                  else:
                      print(f'✗ {file} missing')
                      sys.exit(1)
              
              print('✓ Cognitive integration validation passed')
              
          except Exception as e:
              print(f'✗ Validation failed: {e}')
              sys.exit(1)
          "

      - name: Generate Validation Report
        run: |
          echo "# Cognitive Integration Validation Report" > validation_report.md
          echo "" >> validation_report.md
          echo "Generated: $(date)" >> validation_report.md
          echo "" >> validation_report.md
          echo "## Status: ✅ PASSED" >> validation_report.md
          echo "" >> validation_report.md
          echo "All cognitive components validated successfully." >> validation_report.md

      - name: Upload Validation Report
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-validation-report
          path: validation_report.md