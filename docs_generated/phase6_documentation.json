{
  "generated_at": "2025-07-12T15:44:31.456196",
  "total_modules": 77,
  "modules": {
    "activity_regulation": {
      "module": "activity_regulation",
      "docstring": null,
      "imports": [
        "asyncio",
        "logging",
        "typing",
        "dataclasses",
        "enum",
        "time",
        "heapq",
        "datetime",
        "json",
        "pathlib",
        "signal",
        "threading",
        "queue",
        "numpy",
        "psutil"
      ],
      "classes": [
        {
          "name": "ActivityState",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 17,
          "cognitive_features": []
        },
        {
          "name": "TaskPriority",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 24,
          "cognitive_features": []
        },
        {
          "name": "ScheduledTask",
          "docstring": null,
          "methods": [],
          "bases": [],
          "line": 32,
          "cognitive_features": []
        },
        {
          "name": "ActivityRegulator",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 44,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_monitor_activities",
              "docstring": "Background thread to monitor and log system activities",
              "args": [
                "self"
              ],
              "line": 74,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "_log_activity",
              "docstring": "Log an activity for a component",
              "args": [
                "self",
                "component",
                "description",
                "context"
              ],
              "line": 110,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "add_task",
              "docstring": "Add a new task to the system",
              "args": [
                "self",
                "task_id",
                "callback",
                "priority",
                "interval"
              ],
              "line": 140,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "remove_task",
              "docstring": "Remove a task from the system",
              "args": [
                "self",
                "task_id"
              ],
              "line": 161,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "run_sync",
              "docstring": "Synchronous wrapper method to run the activity regulator from a thread\nThis method is designed to be called from a thread and will handle running\nthe async loop properly without causing warnings.",
              "args": [
                "self"
              ],
              "line": 170,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "shutdown",
              "docstring": "Shutdown the activity regulator",
              "args": [
                "self"
              ],
              "line": 225,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 43,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'heapq', 'pathlib', 'numpy', 'psutil', 'signal', 'dataclasses', 'datetime', 'threading', 'logging', 'enum', 'time', 'queue', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [
        "State Machine Pattern"
      ],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    activity_regulation[activity_regulation]\n    activity_regulation_ActivityState[ActivityState]\n    activity_regulation --> activity_regulation_ActivityState\n    activity_regulation_TaskPriority[TaskPriority]\n    activity_regulation --> activity_regulation_TaskPriority\n    activity_regulation_ScheduledTask[ScheduledTask]\n    activity_regulation --> activity_regulation_ScheduledTask\n    activity_regulation_ActivityRegulator[ActivityRegulator]\n    activity_regulation --> activity_regulation_ActivityRegulator\n    activity_regulation_ActivityRegulator___init__[__init__()]\n    activity_regulation_ActivityRegulator --> activity_regulation_ActivityRegulator___init__\n    activity_regulation_ActivityRegulator__monitor_activities[_monitor_activities()]\n    activity_regulation_ActivityRegulator --> activity_regulation_ActivityRegulator__monitor_activities\n    activity_regulation_ActivityRegulator__log_activity[_log_activity()]\n    activity_regulation_ActivityRegulator --> activity_regulation_ActivityRegulator__log_activity\n    activity_regulation_ActivityRegulator_add_task[add_task()]\n    activity_regulation_ActivityRegulator --> activity_regulation_ActivityRegulator_add_task\n    activity_regulation_ActivityRegulator_remove_task[remove_task()]\n    activity_regulation_ActivityRegulator --> activity_regulation_ActivityRegulator_remove_task\n```"
    },
    "activity_stream": {
      "module": "activity_stream",
      "docstring": null,
      "imports": [
        "curses",
        "asyncio",
        "json",
        "time",
        "os",
        "argparse",
        "pathlib",
        "datetime",
        "typing",
        "psutil",
        "signal",
        "enum"
      ],
      "classes": [
        {
          "name": "StreamType",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 15,
          "cognitive_features": []
        },
        {
          "name": "ActivityStream",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "screen",
                "stream_type"
              ],
              "line": 26,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_screen_state_changed",
              "docstring": "Check if screen state has changed",
              "args": [
                "self"
              ],
              "line": 78,
              "returns": "bool",
              "complexity": 1
            },
            {
              "name": "update_activities",
              "docstring": "Update activity states",
              "args": [
                "self"
              ],
              "line": 88,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "update_system_stats",
              "docstring": "Update system statistics",
              "args": [
                "self"
              ],
              "line": 113,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_activity_color",
              "docstring": "Get color for activity type",
              "args": [
                "self",
                "activity_type"
              ],
              "line": 128,
              "returns": "int",
              "complexity": 1
            },
            {
              "name": "draw_header",
              "docstring": "Draw header section",
              "args": [
                "self"
              ],
              "line": 141,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_draw_activity",
              "docstring": "Draw single activity entry with fixed-width formatting",
              "args": [
                "self",
                "activity",
                "activity_type",
                "line"
              ],
              "line": 163,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "draw_activities",
              "docstring": "Draw activity streams",
              "args": [
                "self"
              ],
              "line": 194,
              "returns": "Any",
              "complexity": 13
            },
            {
              "name": "run",
              "docstring": "Main interface loop",
              "args": [
                "self"
              ],
              "line": 245,
              "returns": "Any",
              "complexity": 10
            }
          ],
          "bases": [],
          "line": 25,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "args": [
            "stream_type",
            "verbose"
          ],
          "line": 301,
          "returns": "Any",
          "complexity": 18,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'argparse', 'pathlib', 'psutil', 'signal', 'datetime', 'os', 'enum', 'time', 'curses', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    activity_stream[activity_stream]\n    activity_stream_StreamType[StreamType]\n    activity_stream --> activity_stream_StreamType\n    activity_stream_ActivityStream[ActivityStream]\n    activity_stream --> activity_stream_ActivityStream\n    activity_stream_ActivityStream___init__[__init__()]\n    activity_stream_ActivityStream --> activity_stream_ActivityStream___init__\n    activity_stream_ActivityStream__screen_state_changed[_screen_state_changed()]\n    activity_stream_ActivityStream --> activity_stream_ActivityStream__screen_state_changed\n    activity_stream_ActivityStream_update_activities[update_activities()]\n    activity_stream_ActivityStream --> activity_stream_ActivityStream_update_activities\n    activity_stream_ActivityStream_update_system_stats[update_system_stats()]\n    activity_stream_ActivityStream --> activity_stream_ActivityStream_update_system_stats\n    activity_stream_ActivityStream_get_activity_color[get_activity_color()]\n    activity_stream_ActivityStream --> activity_stream_ActivityStream_get_activity_color\n    activity_stream_main[main()]\n    activity_stream --> activity_stream_main\n```"
    },
    "adaptive_heartbeat": {
      "module": "adaptive_heartbeat",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "time",
        "threading",
        "logging",
        "signal",
        "json",
        "datetime",
        "psutil",
        "pathlib"
      ],
      "classes": [
        {
          "name": "AdaptiveHeartbeat",
          "docstring": "Manages the heartbeat rate of DeepTreeEcho based on activity levels.\nIncludes hyper drive defense mode for responding to potential attacks.",
          "methods": [
            {
              "name": "get_instance",
              "docstring": "Get or create the singleton instance of AdaptiveHeartbeat",
              "args": [
                "cls"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "min_interval",
                "max_interval",
                "hyper_drive_interval",
                "activity_threshold_low",
                "activity_threshold_high",
                "cpu_threshold",
                "activity_logs_dir"
              ],
              "line": 39,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "start",
              "docstring": "Start the adaptive heartbeat system",
              "args": [
                "self"
              ],
              "line": 104,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "stop",
              "docstring": "Stop the adaptive heartbeat system",
              "args": [
                "self"
              ],
              "line": 123,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_heartbeat_loop",
              "docstring": "Main heartbeat loop that pulses at the current interval rate",
              "args": [
                "self"
              ],
              "line": 141,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_defense_monitor",
              "docstring": "Monitors system for potential attacks and triggers hyper drive when needed",
              "args": [
                "self"
              ],
              "line": 172,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "_heartbeat",
              "docstring": "Perform a single heartbeat pulse",
              "args": [
                "self"
              ],
              "line": 204,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_signal_heartbeat",
              "docstring": "Send heartbeat signal to the DeepTreeEcho system",
              "args": [
                "self"
              ],
              "line": 213,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_update_system_stats",
              "docstring": "Update the current system statistics",
              "args": [
                "self"
              ],
              "line": 223,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_count_active_events",
              "docstring": "Count the number of active events in the system",
              "args": [
                "self"
              ],
              "line": 238,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "_adjust_heartbeat_rate",
              "docstring": "Dynamically adjust heartbeat rate based on system activity",
              "args": [
                "self"
              ],
              "line": 264,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_get_current_interval",
              "docstring": "Get the current heartbeat interval based on mode",
              "args": [
                "self"
              ],
              "line": 294,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_enter_hyper_drive",
              "docstring": "Enter hyper drive mode to allocate maximum resources to handling a situation",
              "args": [
                "self",
                "reason"
              ],
              "line": 300,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_exit_hyper_drive",
              "docstring": "Exit hyper drive mode and return to normal operation",
              "args": [
                "self"
              ],
              "line": 322,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_check_suspicious_processes",
              "docstring": "Check for potentially suspicious processes",
              "args": [
                "self"
              ],
              "line": 344,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_log_activity",
              "docstring": "Log activity to the activity log file",
              "args": [
                "self",
                "description",
                "category",
                "priority"
              ],
              "line": 370,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "manual_trigger_hyper_drive",
              "docstring": "Manually trigger hyper drive mode (for testing or external triggers)",
              "args": [
                "self",
                "reason"
              ],
              "line": 402,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_current_rate",
              "docstring": "Get the current heartbeat rate in Hz",
              "args": [
                "self"
              ],
              "line": 408,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "is_hyper_drive_active",
              "docstring": "Check if hyper drive mode is currently active",
              "args": [
                "self"
              ],
              "line": 415,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_active_events",
              "docstring": "Get list of currently active events",
              "args": [
                "self"
              ],
              "line": 419,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "get_system_metrics",
              "docstring": "Get current system metrics including CPU and memory usage",
              "args": [
                "self"
              ],
              "line": 446,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_recent_log_entries",
              "docstring": "Get the most recent log entries (limited to max_entries)",
              "args": [
                "self",
                "max_entries"
              ],
              "line": 461,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "activate_hyperdrive",
              "docstring": "Manually activate hyper drive mode",
              "args": [
                "self",
                "reason"
              ],
              "line": 488,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "deactivate_hyperdrive",
              "docstring": "Manually deactivate hyper drive mode",
              "args": [
                "self"
              ],
              "line": 492,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 23,
          "cognitive_features": [
            "learning"
          ]
        }
      ],
      "functions": [
        {
          "name": "signal_handler",
          "docstring": "Handle Ctrl+C gracefully",
          "args": [
            "sig",
            "frame"
          ],
          "line": 496,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": "Main function to run the adaptive heartbeat system",
          "args": [],
          "line": 507,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": [
            "learning"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'psutil', 'pathlib', 'signal', 'datetime', 'threading', 'os', 'logging', 'time', 'sys', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    adaptive_heartbeat[adaptive_heartbeat]\n    adaptive_heartbeat_AdaptiveHeartbeat[AdaptiveHeartbeat]\n    adaptive_heartbeat --> adaptive_heartbeat_AdaptiveHeartbeat\n    adaptive_heartbeat_AdaptiveHeartbeat_get_instance[get_instance()]\n    adaptive_heartbeat_AdaptiveHeartbeat --> adaptive_heartbeat_AdaptiveHeartbeat_get_instance\n    adaptive_heartbeat_AdaptiveHeartbeat___init__[__init__()]\n    adaptive_heartbeat_AdaptiveHeartbeat --> adaptive_heartbeat_AdaptiveHeartbeat___init__\n    adaptive_heartbeat_AdaptiveHeartbeat_start[start()]\n    adaptive_heartbeat_AdaptiveHeartbeat --> adaptive_heartbeat_AdaptiveHeartbeat_start\n    adaptive_heartbeat_AdaptiveHeartbeat_stop[stop()]\n    adaptive_heartbeat_AdaptiveHeartbeat --> adaptive_heartbeat_AdaptiveHeartbeat_stop\n    adaptive_heartbeat_AdaptiveHeartbeat__heartbeat_loop[_heartbeat_loop()]\n    adaptive_heartbeat_AdaptiveHeartbeat --> adaptive_heartbeat_AdaptiveHeartbeat__heartbeat_loop\n    adaptive_heartbeat_signal_handler[signal_handler()]\n    adaptive_heartbeat --> adaptive_heartbeat_signal_handler\n    adaptive_heartbeat_main[main()]\n    adaptive_heartbeat --> adaptive_heartbeat_main\n    style adaptive_heartbeat fill:#ffcc99\n```"
    },
    "ai_integration": {
      "module": "ai_integration",
      "docstring": null,
      "imports": [
        "os",
        "time",
        "json",
        "logging",
        "asyncio",
        "numpy",
        "typing",
        "pathlib",
        "requests",
        "dotenv"
      ],
      "classes": [
        {
          "name": "AIService",
          "docstring": "Base class for AI API services",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 23,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_check_rate_limit",
              "docstring": "Check if we're within rate limits\n\nArgs:\n    token_count: Number of tokens in the request\n    \nReturns:\n    True if within limits, False otherwise",
              "args": [
                "self",
                "token_count"
              ],
              "line": 32,
              "returns": "bool",
              "complexity": 3
            },
            {
              "name": "_record_usage",
              "docstring": "Record API usage\n\nArgs:\n    token_count: Number of tokens in the request",
              "args": [
                "self",
                "token_count"
              ],
              "line": 59,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 20,
          "cognitive_features": []
        },
        {
          "name": "OpenAIService",
          "docstring": "OpenAI API service integration",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 72,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "generate_embedding",
              "docstring": "Generate embedding for text\n\nArgs:\n    text: Text to embed\n    \nReturns:\n    Embedding vector",
              "args": [
                "self",
                "text"
              ],
              "line": 91,
              "returns": "<ast.Subscript object at 0x7f2f2d8d2810>",
              "complexity": 5
            },
            {
              "name": "complete_text",
              "docstring": "Generate text completion\n\nArgs:\n    prompt: User prompt\n    system: Optional system message\n    max_tokens: Maximum tokens to generate\n    temperature: Sampling temperature\n    \nReturns:\n    Generated text",
              "args": [
                "self",
                "prompt",
                "system",
                "max_tokens",
                "temperature"
              ],
              "line": 139,
              "returns": "str",
              "complexity": 6
            }
          ],
          "bases": [
            "AIService"
          ],
          "line": 69,
          "cognitive_features": []
        },
        {
          "name": "AnthropicService",
          "docstring": "Anthropic API service integration",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 293,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "complete_text",
              "docstring": "Generate text completion using Anthropic Claude\n\nArgs:\n    prompt: User prompt\n    system: Optional system message\n    max_tokens: Maximum tokens to generate\n    temperature: Sampling temperature\n    \nReturns:\n    Generated text",
              "args": [
                "self",
                "prompt",
                "system",
                "max_tokens",
                "temperature"
              ],
              "line": 305,
              "returns": "str",
              "complexity": 6
            }
          ],
          "bases": [
            "AIService"
          ],
          "line": 290,
          "cognitive_features": []
        },
        {
          "name": "AIIntegration",
          "docstring": "Main AI integration manager",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 369,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "setup_services",
              "docstring": "Set up available AI services",
              "args": [
                "self"
              ],
              "line": 378,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_load_cache",
              "docstring": "Load cache from disk",
              "args": [
                "self"
              ],
              "line": 394,
              "returns": "Dict",
              "complexity": 4
            },
            {
              "name": "_save_cache",
              "docstring": "Save cache to disk",
              "args": [
                "self"
              ],
              "line": 407,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "get_embedding",
              "docstring": "Get embedding for text with caching\n\nArgs:\n    text: Text to embed\n    service: AI service to use\n    \nReturns:\n    Embedding vector",
              "args": [
                "self",
                "text",
                "service"
              ],
              "line": 416,
              "returns": "<ast.Subscript object at 0x7f2f2d7140d0>",
              "complexity": 6
            },
            {
              "name": "complete_text",
              "docstring": "Complete text using specified service with optional caching\n\nArgs:\n    prompt: User prompt\n    system: Optional system message\n    service: AI service to use\n    max_tokens: Maximum tokens to generate\n    temperature: Sampling temperature\n    cache: Whether to cache results\n    \nReturns:\n    Completed text",
              "args": [
                "self",
                "prompt",
                "system",
                "service",
                "max_tokens",
                "temperature",
                "cache"
              ],
              "line": 453,
              "returns": "str",
              "complexity": 8
            },
            {
              "name": "semantic_similarity",
              "docstring": "Calculate semantic similarity between two texts\n\nArgs:\n    text1: First text\n    text2: Second text\n    service: AI service to use\n    \nReturns:\n    Similarity score (0-1)",
              "args": [
                "self",
                "text1",
                "text2",
                "service"
              ],
              "line": 552,
              "returns": "float",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 366,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'os', 'logging', 'time', 'requests', 'typing', 'asyncio', 'dotenv', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    ai_integration[ai_integration]\n    ai_integration_AIService[AIService]\n    ai_integration --> ai_integration_AIService\n    ai_integration_AIService___init__[__init__()]\n    ai_integration_AIService --> ai_integration_AIService___init__\n    ai_integration_AIService__check_rate_limit[_check_rate_limit()]\n    ai_integration_AIService --> ai_integration_AIService__check_rate_limit\n    ai_integration_AIService__record_usage[_record_usage()]\n    ai_integration_AIService --> ai_integration_AIService__record_usage\n    ai_integration_OpenAIService[OpenAIService]\n    ai_integration --> ai_integration_OpenAIService\n    ai_integration_OpenAIService___init__[__init__()]\n    ai_integration_OpenAIService --> ai_integration_OpenAIService___init__\n    ai_integration_OpenAIService_generate_embedding[generate_embedding()]\n    ai_integration_OpenAIService --> ai_integration_OpenAIService_generate_embedding\n    ai_integration_OpenAIService_complete_text[complete_text()]\n    ai_integration_OpenAIService --> ai_integration_OpenAIService_complete_text\n    ai_integration_AnthropicService[AnthropicService]\n    ai_integration --> ai_integration_AnthropicService\n    ai_integration_AnthropicService___init__[__init__()]\n    ai_integration_AnthropicService --> ai_integration_AnthropicService___init__\n    ai_integration_AnthropicService_complete_text[complete_text()]\n    ai_integration_AnthropicService --> ai_integration_AnthropicService_complete_text\n    ai_integration_AIIntegration[AIIntegration]\n    ai_integration --> ai_integration_AIIntegration\n    ai_integration_AIIntegration___init__[__init__()]\n    ai_integration_AIIntegration --> ai_integration_AIIntegration___init__\n    ai_integration_AIIntegration_setup_services[setup_services()]\n    ai_integration_AIIntegration --> ai_integration_AIIntegration_setup_services\n    ai_integration_AIIntegration__load_cache[_load_cache()]\n    ai_integration_AIIntegration --> ai_integration_AIIntegration__load_cache\n    ai_integration_AIIntegration__save_cache[_save_cache()]\n    ai_integration_AIIntegration --> ai_integration_AIIntegration__save_cache\n    ai_integration_AIIntegration_get_embedding[get_embedding()]\n    ai_integration_AIIntegration --> ai_integration_AIIntegration_get_embedding\n    style ai_integration fill:#ffcc99\n```"
    },
    "antikythera": {
      "module": "antikythera",
      "docstring": null,
      "imports": [],
      "classes": [
        {
          "name": "CelestialGear",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "cycle_period"
              ],
              "line": 3,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_sub_gear",
              "docstring": null,
              "args": [
                "self",
                "sub_gear"
              ],
              "line": 8,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "execute_cycle",
              "docstring": "Execute a full cycle: perform tasks in all sub-gears with synchronization.",
              "args": [
                "self"
              ],
              "line": 11,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "optimize",
              "docstring": "Integrate AI-based reinforcement learning to optimize timing and process dependencies.",
              "args": [
                "self"
              ],
              "line": 21,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 2,
          "cognitive_features": []
        },
        {
          "name": "SubGear",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name"
              ],
              "line": 30,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "execute_task",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 29,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "setup_celestial_framework",
          "docstring": null,
          "args": [],
          "line": 38,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "run_framework",
          "docstring": null,
          "args": [],
          "line": 58,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "set()",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    antikythera[antikythera]\n    antikythera_CelestialGear[CelestialGear]\n    antikythera --> antikythera_CelestialGear\n    antikythera_CelestialGear___init__[__init__()]\n    antikythera_CelestialGear --> antikythera_CelestialGear___init__\n    antikythera_CelestialGear_add_sub_gear[add_sub_gear()]\n    antikythera_CelestialGear --> antikythera_CelestialGear_add_sub_gear\n    antikythera_CelestialGear_execute_cycle[execute_cycle()]\n    antikythera_CelestialGear --> antikythera_CelestialGear_execute_cycle\n    antikythera_CelestialGear_optimize[optimize()]\n    antikythera_CelestialGear --> antikythera_CelestialGear_optimize\n    antikythera_SubGear[SubGear]\n    antikythera --> antikythera_SubGear\n    antikythera_SubGear___init__[__init__()]\n    antikythera_SubGear --> antikythera_SubGear___init__\n    antikythera_SubGear_execute_task[execute_task()]\n    antikythera_SubGear --> antikythera_SubGear_execute_task\n    antikythera_setup_celestial_framework[setup_celestial_framework()]\n    antikythera --> antikythera_setup_celestial_framework\n    antikythera_run_framework[run_framework()]\n    antikythera --> antikythera_run_framework\n```"
    },
    "browser_interface": {
      "module": "browser_interface",
      "docstring": null,
      "imports": [
        "os",
        "json",
        "time",
        "logging",
        "random",
        "pathlib",
        "playwright.sync_api",
        "sensory_motor"
      ],
      "classes": [
        {
          "name": "DeepTreeEchoBrowser",
          "docstring": "Browser interface for Deep Tree Echo's persistent online presence",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 13,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_setup_profile_directory",
              "docstring": "Create and configure Deep Tree Echo's Firefox profile directory",
              "args": [
                "self"
              ],
              "line": 22,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "init",
              "docstring": "Initialize browser with Deep Tree Echo's profile",
              "args": [
                "self"
              ],
              "line": 71,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_setup_firefox_account",
              "docstring": "Set up Firefox account and sync",
              "args": [
                "self"
              ],
              "line": 154,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_setup_containers",
              "docstring": "Set up Firefox container tabs for different contexts",
              "args": [
                "self"
              ],
              "line": 200,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_configure_page",
              "docstring": "Configure page settings for human-like behavior",
              "args": [
                "self",
                "page"
              ],
              "line": 214,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "human_like_interaction",
              "docstring": "Perform human-like interactions on the page",
              "args": [
                "self",
                "page",
                "action"
              ],
              "line": 241,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "wait_for_visual_element",
              "docstring": "Wait for a visual element to appear on the page",
              "args": [
                "self",
                "page",
                "template_path",
                "timeout"
              ],
              "line": 287,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "authenticate_service",
              "docstring": "Authenticate with a specific service in a container",
              "args": [
                "self",
                "service_name",
                "container_name",
                "credentials"
              ],
              "line": 300,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "authenticate_github",
              "docstring": "Authenticate with GitHub using modern authentication flow",
              "args": [
                "self",
                "page",
                "credentials"
              ],
              "line": 323,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "get_or_create_page",
              "docstring": "Get existing page for container or create new one",
              "args": [
                "self",
                "container_name"
              ],
              "line": 393,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "create_page_in_container",
              "docstring": "Create a new page in specified container",
              "args": [
                "self",
                "container_name"
              ],
              "line": 409,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "close",
              "docstring": "Gracefully close the browser",
              "args": [
                "self"
              ],
              "line": 421,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "configure_container",
              "docstring": "Configure container-specific settings",
              "args": [
                "self",
                "container_name",
                "settings"
              ],
              "line": 431,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_apply_container_settings",
              "docstring": "Apply settings to a container",
              "args": [
                "self",
                "page",
                "settings"
              ],
              "line": 488,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_manage_bookmarks",
              "docstring": "Manage bookmarks in a container",
              "args": [
                "self",
                "page",
                "bookmarks"
              ],
              "line": 503,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "get_container_settings",
              "docstring": "Get current settings for a container",
              "args": [
                "self",
                "container_name"
              ],
              "line": 535,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_get_2fa_code",
              "docstring": "Get 2FA code for GitHub authentication",
              "args": [
                "self",
                "credentials"
              ],
              "line": 554,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 10,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'pathlib', 'sensory_motor', 'random', 'playwright', 'os', 'logging', 'time', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    browser_interface[browser_interface]\n    browser_interface_DeepTreeEchoBrowser[DeepTreeEchoBrowser]\n    browser_interface --> browser_interface_DeepTreeEchoBrowser\n    browser_interface_DeepTreeEchoBrowser___init__[__init__()]\n    browser_interface_DeepTreeEchoBrowser --> browser_interface_DeepTreeEchoBrowser___init__\n    browser_interface_DeepTreeEchoBrowser__setup_profile_directory[_setup_profile_directory()]\n    browser_interface_DeepTreeEchoBrowser --> browser_interface_DeepTreeEchoBrowser__setup_profile_directory\n    browser_interface_DeepTreeEchoBrowser_init[init()]\n    browser_interface_DeepTreeEchoBrowser --> browser_interface_DeepTreeEchoBrowser_init\n    browser_interface_DeepTreeEchoBrowser__setup_firefox_account[_setup_firefox_account()]\n    browser_interface_DeepTreeEchoBrowser --> browser_interface_DeepTreeEchoBrowser__setup_firefox_account\n    browser_interface_DeepTreeEchoBrowser__setup_containers[_setup_containers()]\n    browser_interface_DeepTreeEchoBrowser --> browser_interface_DeepTreeEchoBrowser__setup_containers\n    style browser_interface fill:#ffcc99\n```"
    },
    "chat_interface": {
      "module": "chat_interface",
      "docstring": null,
      "imports": [
        "os",
        "json",
        "uuid",
        "logging",
        "time",
        "requests",
        "urllib.parse",
        "dotenv",
        "psutil",
        "threading",
        "queue",
        "chat_session_manager"
      ],
      "classes": [
        {
          "name": "ChatInterface",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the ChatGPT interface",
              "args": [
                "self"
              ],
              "line": 27,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_generate_uuid",
              "docstring": "Generate a UUID for message tracking",
              "args": [
                "self"
              ],
              "line": 78,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_make_request",
              "docstring": "Make a request to the ChatGPT API with proper error handling",
              "args": [
                "self",
                "method",
                "endpoint"
              ],
              "line": 82,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "authenticate",
              "docstring": "Authenticate using session token",
              "args": [
                "self",
                "session_token"
              ],
              "line": 95,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "send_query",
              "docstring": "Send a query to ChatGPT and get the response",
              "args": [
                "self",
                "query"
              ],
              "line": 163,
              "returns": "Any",
              "complexity": 22
            },
            {
              "name": "monitor_resources",
              "docstring": null,
              "args": [
                "self",
                "stop_event",
                "resource_queue"
              ],
              "line": 275,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 26,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'psutil', 'urllib', 'uuid', 'threading', 'os', 'logging', 'chat_session_manager', 'time', 'queue', 'requests', 'dotenv', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    chat_interface[chat_interface]\n    chat_interface_ChatInterface[ChatInterface]\n    chat_interface --> chat_interface_ChatInterface\n    chat_interface_ChatInterface___init__[__init__()]\n    chat_interface_ChatInterface --> chat_interface_ChatInterface___init__\n    chat_interface_ChatInterface__generate_uuid[_generate_uuid()]\n    chat_interface_ChatInterface --> chat_interface_ChatInterface__generate_uuid\n    chat_interface_ChatInterface__make_request[_make_request()]\n    chat_interface_ChatInterface --> chat_interface_ChatInterface__make_request\n    chat_interface_ChatInterface_authenticate[authenticate()]\n    chat_interface_ChatInterface --> chat_interface_ChatInterface_authenticate\n    chat_interface_ChatInterface_send_query[send_query()]\n    chat_interface_ChatInterface --> chat_interface_ChatInterface_send_query\n    style chat_interface fill:#ffcc99\n```"
    },
    "chat_session_manager": {
      "module": "chat_session_manager",
      "docstring": null,
      "imports": [
        "os",
        "json",
        "uuid",
        "time",
        "logging",
        "threading",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum"
      ],
      "classes": [
        {
          "name": "ChatPlatform",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 27,
          "cognitive_features": []
        },
        {
          "name": "SessionStatus",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 35,
          "cognitive_features": []
        },
        {
          "name": "ChatMessage",
          "docstring": "Represents a single chat message",
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 56,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": "Create from dictionary",
              "args": [
                "cls",
                "data"
              ],
              "line": 63,
              "returns": "ChatMessage",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 42,
          "cognitive_features": []
        },
        {
          "name": "ChatSession",
          "docstring": "Represents a complete chat session",
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 85,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": "Create from dictionary",
              "args": [
                "cls",
                "data"
              ],
              "line": 94,
              "returns": "ChatSession",
              "complexity": 1
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "args": [
                "self",
                "message"
              ],
              "line": 101,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_update_statistics",
              "docstring": "Update session statistics",
              "args": [
                "self"
              ],
              "line": 107,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 69,
          "cognitive_features": []
        },
        {
          "name": "ChatSessionManager",
          "docstring": "Manages automatic chat session saving and retrieval",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "storage_dir"
              ],
              "line": 116,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "start_auto_save",
              "docstring": "Start automatic session saving thread",
              "args": [
                "self"
              ],
              "line": 145,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "stop_auto_save",
              "docstring": "Stop automatic session saving",
              "args": [
                "self"
              ],
              "line": 153,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_auto_save_loop",
              "docstring": "Background thread for automatic saving",
              "args": [
                "self"
              ],
              "line": 160,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "create_session",
              "docstring": "Create a new chat session",
              "args": [
                "self",
                "platform",
                "title",
                "conversation_id",
                "metadata"
              ],
              "line": 169,
              "returns": "str",
              "complexity": 3
            },
            {
              "name": "add_message",
              "docstring": "Add a message to a session",
              "args": [
                "self",
                "session_id",
                "role",
                "content",
                "platform",
                "metadata",
                "conversation_id",
                "parent_id"
              ],
              "line": 192,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "end_session",
              "docstring": "End a chat session",
              "args": [
                "self",
                "session_id"
              ],
              "line": 229,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_session",
              "docstring": "Get a session by ID",
              "args": [
                "self",
                "session_id"
              ],
              "line": 245,
              "returns": "<ast.Subscript object at 0x7f2f2d8e73d0>",
              "complexity": 2
            },
            {
              "name": "search_sessions",
              "docstring": "Search sessions with filters",
              "args": [
                "self",
                "query",
                "platform",
                "start_date",
                "end_date",
                "tags",
                "limit"
              ],
              "line": 254,
              "returns": "<ast.Subscript object at 0x7f2f2d7a5f10>",
              "complexity": 13
            },
            {
              "name": "get_conversation_history",
              "docstring": "Get recent conversation history across sessions",
              "args": [
                "self",
                "platform",
                "days"
              ],
              "line": 287,
              "returns": "<ast.Subscript object at 0x7f2f2d8e2290>",
              "complexity": 10
            },
            {
              "name": "aggregate_conversations",
              "docstring": "Aggregate conversations from multiple platforms into a unified session",
              "args": [
                "self",
                "target_session_id"
              ],
              "line": 318,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "integrate_with_existing_storage",
              "docstring": "Integrate with existing conversation storage patterns",
              "args": [
                "self"
              ],
              "line": 355,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_import_selenium_memory",
              "docstring": "Import existing selenium interface conversation history",
              "args": [
                "self",
                "memory_file"
              ],
              "line": 366,
              "returns": "Any",
              "complexity": 8
            },
            {
              "name": "_import_cognitive_architecture_memory",
              "docstring": "Import from cognitive architecture activity logs",
              "args": [
                "self"
              ],
              "line": 401,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "_import_evolution_memory",
              "docstring": "Import from evolution memory cycles",
              "args": [
                "self"
              ],
              "line": 430,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_calculate_echo_value",
              "docstring": "Calculate echo value for content using Deep Tree Echo system",
              "args": [
                "self",
                "content"
              ],
              "line": 455,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "_calculate_salience",
              "docstring": "Calculate salience (importance) of content",
              "args": [
                "self",
                "content",
                "role"
              ],
              "line": 481,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "_store_in_memory_system",
              "docstring": "Store message in the hypergraph memory system",
              "args": [
                "self",
                "message"
              ],
              "line": 505,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_create_message_associations",
              "docstring": "Create associations between related messages",
              "args": [
                "self",
                "message"
              ],
              "line": 548,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "_group_messages_by_thread",
              "docstring": "Group messages into conversation threads",
              "args": [
                "self",
                "messages"
              ],
              "line": 586,
              "returns": "<ast.Subscript object at 0x7f2f2d71eb50>",
              "complexity": 6
            },
            {
              "name": "_save_session",
              "docstring": "Save a single session to disk",
              "args": [
                "self",
                "session"
              ],
              "line": 606,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_load_session",
              "docstring": "Load a session from disk",
              "args": [
                "self",
                "session_id"
              ],
              "line": 615,
              "returns": "<ast.Subscript object at 0x7f2f2d73bcd0>",
              "complexity": 4
            },
            {
              "name": "_save_active_sessions",
              "docstring": "Save all active sessions",
              "args": [
                "self"
              ],
              "line": 627,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_load_active_sessions",
              "docstring": "Load recently active sessions",
              "args": [
                "self"
              ],
              "line": 633,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_update_session_index",
              "docstring": "Update the session index with session info",
              "args": [
                "self",
                "session"
              ],
              "line": 647,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_save_session_indices",
              "docstring": "Save session indices to disk",
              "args": [
                "self"
              ],
              "line": 663,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_load_session_indices",
              "docstring": "Load session indices from disk",
              "args": [
                "self"
              ],
              "line": 672,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "get_statistics",
              "docstring": "Get comprehensive statistics about chat sessions",
              "args": [
                "self"
              ],
              "line": 684,
              "returns": "Dict",
              "complexity": 5
            }
          ],
          "bases": [],
          "line": 113,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "initialize_session_manager",
          "docstring": "Initialize the global session manager",
          "args": [],
          "line": 733,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "create_chat_session",
          "docstring": "Create a new chat session - convenient wrapper",
          "args": [
            "platform",
            "title"
          ],
          "line": 739,
          "returns": "str",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "log_chat_message",
          "docstring": "Log a chat message - convenient wrapper",
          "args": [
            "session_id",
            "role",
            "content"
          ],
          "line": 744,
          "returns": "str",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "end_chat_session",
          "docstring": "End a chat session - convenient wrapper",
          "args": [
            "session_id"
          ],
          "line": 748,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "get_chat_history",
          "docstring": "Get chat history - convenient wrapper",
          "args": [
            "platform",
            "days"
          ],
          "line": 752,
          "returns": "<ast.Subscript object at 0x7f2f2d85f5d0>",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'dataclasses', 'uuid', 'datetime', 'threading', 'os', 'logging', 'enum', 'time', 'typing', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern"
      ],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    chat_session_manager[chat_session_manager]\n    chat_session_manager_ChatPlatform[ChatPlatform]\n    chat_session_manager --> chat_session_manager_ChatPlatform\n    chat_session_manager_SessionStatus[SessionStatus]\n    chat_session_manager --> chat_session_manager_SessionStatus\n    chat_session_manager_ChatMessage[ChatMessage]\n    chat_session_manager --> chat_session_manager_ChatMessage\n    chat_session_manager_ChatMessage_to_dict[to_dict()]\n    chat_session_manager_ChatMessage --> chat_session_manager_ChatMessage_to_dict\n    chat_session_manager_ChatMessage_from_dict[from_dict()]\n    chat_session_manager_ChatMessage --> chat_session_manager_ChatMessage_from_dict\n    chat_session_manager_ChatSession[ChatSession]\n    chat_session_manager --> chat_session_manager_ChatSession\n    chat_session_manager_ChatSession_to_dict[to_dict()]\n    chat_session_manager_ChatSession --> chat_session_manager_ChatSession_to_dict\n    chat_session_manager_ChatSession_from_dict[from_dict()]\n    chat_session_manager_ChatSession --> chat_session_manager_ChatSession_from_dict\n    chat_session_manager_ChatSession_add_message[add_message()]\n    chat_session_manager_ChatSession --> chat_session_manager_ChatSession_add_message\n    chat_session_manager_ChatSession__update_statistics[_update_statistics()]\n    chat_session_manager_ChatSession --> chat_session_manager_ChatSession__update_statistics\n    chat_session_manager_ChatSessionManager[ChatSessionManager]\n    chat_session_manager --> chat_session_manager_ChatSessionManager\n    chat_session_manager_ChatSessionManager___init__[__init__()]\n    chat_session_manager_ChatSessionManager --> chat_session_manager_ChatSessionManager___init__\n    chat_session_manager_ChatSessionManager_start_auto_save[start_auto_save()]\n    chat_session_manager_ChatSessionManager --> chat_session_manager_ChatSessionManager_start_auto_save\n    chat_session_manager_ChatSessionManager_stop_auto_save[stop_auto_save()]\n    chat_session_manager_ChatSessionManager --> chat_session_manager_ChatSessionManager_stop_auto_save\n    chat_session_manager_ChatSessionManager__auto_save_loop[_auto_save_loop()]\n    chat_session_manager_ChatSessionManager --> chat_session_manager_ChatSessionManager__auto_save_loop\n    chat_session_manager_ChatSessionManager_create_session[create_session()]\n    chat_session_manager_ChatSessionManager --> chat_session_manager_ChatSessionManager_create_session\n    chat_session_manager_initialize_session_manager[initialize_session_manager()]\n    chat_session_manager --> chat_session_manager_initialize_session_manager\n    chat_session_manager_create_chat_session[create_chat_session()]\n    chat_session_manager --> chat_session_manager_create_chat_session\n    chat_session_manager_log_chat_message[log_chat_message()]\n    chat_session_manager --> chat_session_manager_log_chat_message\n    chat_session_manager_end_chat_session[end_chat_session()]\n    chat_session_manager --> chat_session_manager_end_chat_session\n    chat_session_manager_get_chat_history[get_chat_history()]\n    chat_session_manager --> chat_session_manager_get_chat_history\n```"
    },
    "cognitive_architecture": {
      "module": "cognitive_architecture",
      "docstring": null,
      "imports": [
        "numpy",
        "dataclasses",
        "typing",
        "enum",
        "logging",
        "pathlib",
        "json",
        "datetime",
        "collections",
        "time",
        "echoself_introspection"
      ],
      "classes": [
        {
          "name": "MemoryType",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 18,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "Memory",
          "docstring": null,
          "methods": [],
          "bases": [],
          "line": 26,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "Goal",
          "docstring": null,
          "methods": [],
          "bases": [],
          "line": 36,
          "cognitive_features": []
        },
        {
          "name": "PersonalityTrait",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "base_value"
              ],
              "line": 47,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update",
              "docstring": null,
              "args": [
                "self",
                "value",
                "context"
              ],
              "line": 53,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 46,
          "cognitive_features": []
        },
        {
          "name": "CognitiveArchitecture",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 58,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_load_state",
              "docstring": "Load memories and goals from disk",
              "args": [
                "self"
              ],
              "line": 97,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_load_activities",
              "docstring": "Load existing activities",
              "args": [
                "self"
              ],
              "line": 111,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_activities",
              "docstring": "Save activities to file",
              "args": [
                "self"
              ],
              "line": 120,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_log_activity",
              "docstring": "Log a cognitive activity",
              "args": [
                "self",
                "description",
                "context"
              ],
              "line": 125,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "save_state",
              "docstring": "Save current state to disk",
              "args": [
                "self"
              ],
              "line": 155,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "generate_goals",
              "docstring": "Generate new goals based on current state and context",
              "args": [
                "self",
                "context"
              ],
              "line": 168,
              "returns": "<ast.Subscript object at 0x7f2f2d471e50>",
              "complexity": 7
            },
            {
              "name": "update_personality",
              "docstring": "Update personality traits based on experiences",
              "args": [
                "self",
                "experiences"
              ],
              "line": 216,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "learn_from_experience",
              "docstring": "Learn from new experiences",
              "args": [
                "self",
                "experience"
              ],
              "line": 243,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_identify_knowledge_gaps",
              "docstring": "Identify areas where knowledge is lacking",
              "args": [
                "self"
              ],
              "line": 270,
              "returns": "<ast.Subscript object at 0x7f2f2d76d490>",
              "complexity": 5
            },
            {
              "name": "_analyze_system_performance",
              "docstring": "Analyze system performance and identify areas for improvement",
              "args": [
                "self"
              ],
              "line": 287,
              "returns": "<ast.Subscript object at 0x7f2f2d76e2d0>",
              "complexity": 3
            },
            {
              "name": "_generate_creative_ideas",
              "docstring": "Generate new ideas for exploration",
              "args": [
                "self"
              ],
              "line": 300,
              "returns": "<ast.Subscript object at 0x7f2f2d896a50>",
              "complexity": 3
            },
            {
              "name": "_get_performance_metric",
              "docstring": "Get performance metric value",
              "args": [
                "self",
                "metric"
              ],
              "line": 316,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_memory_to_dict",
              "docstring": "Convert memory to dictionary for storage",
              "args": [
                "self",
                "memory"
              ],
              "line": 321,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "_goal_to_dict",
              "docstring": "Convert goal to dictionary for storage",
              "args": [
                "self",
                "goal"
              ],
              "line": 333,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "process_experience",
              "docstring": "Process a new experience",
              "args": [
                "self",
                "experience",
                "context"
              ],
              "line": 346,
              "returns": "None",
              "complexity": 1
            },
            {
              "name": "generate_goal",
              "docstring": "Generate a new goal",
              "args": [
                "self",
                "description",
                "priority",
                "deadline"
              ],
              "line": 351,
              "returns": "Goal",
              "complexity": 1
            },
            {
              "name": "update_goal",
              "docstring": "Update goal progress",
              "args": [
                "self",
                "goal",
                "progress"
              ],
              "line": 358,
              "returns": "None",
              "complexity": 1
            },
            {
              "name": "generate_and_update_goals",
              "docstring": "Generate and update goals based on experiences",
              "args": [
                "self",
                "experiences"
              ],
              "line": 364,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "enhanced_memory_management",
              "docstring": "Enhance memory management with better logging and error handling",
              "args": [
                "self",
                "memory"
              ],
              "line": 380,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "enhanced_goal_management",
              "docstring": "Enhance goal management with better logging and error handling",
              "args": [
                "self",
                "goal"
              ],
              "line": 389,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "enhanced_personality_management",
              "docstring": "Enhance personality management with better logging and error handling",
              "args": [
                "self",
                "trait",
                "value",
                "context"
              ],
              "line": 398,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "perform_recursive_introspection",
              "docstring": "Perform recursive self-model introspection using the echoself system\n\nArgs:\n    current_cognitive_load: Current cognitive load (0.0-1.0), defaults to calculated value\n    recent_activity_level: Recent activity level (0.0-1.0), defaults to calculated value\n    \nReturns:\n    Introspection prompt or None if system unavailable",
              "args": [
                "self",
                "current_cognitive_load",
                "recent_activity_level"
              ],
              "line": 407,
              "returns": "<ast.Subscript object at 0x7f2f2d8b4b50>",
              "complexity": 5
            },
            {
              "name": "get_introspection_metrics",
              "docstring": "Get metrics from the introspection system",
              "args": [
                "self"
              ],
              "line": 468,
              "returns": "<ast.Subscript object at 0x7f2f2d4bef50>",
              "complexity": 3
            },
            {
              "name": "export_introspection_data",
              "docstring": "Export introspection hypergraph data",
              "args": [
                "self",
                "output_path"
              ],
              "line": 479,
              "returns": "bool",
              "complexity": 3
            },
            {
              "name": "adaptive_goal_generation_with_introspection",
              "docstring": "Generate goals using introspection-informed analysis",
              "args": [
                "self"
              ],
              "line": 493,
              "returns": "<ast.Subscript object at 0x7f2f2d71eb10>",
              "complexity": 4
            },
            {
              "name": "_calculate_current_cognitive_load",
              "docstring": "Calculate current cognitive load based on system state",
              "args": [
                "self"
              ],
              "line": 537,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_calculate_recent_activity",
              "docstring": "Calculate recent activity level",
              "args": [
                "self"
              ],
              "line": 549,
              "returns": "float",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 57,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'dataclasses', 'echoself_introspection', 'datetime', 'logging', 'enum', 'time', 'typing', 'collections', 'json'}",
      "cognitive_patterns": [
        "Memory Management Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    cognitive_architecture[cognitive_architecture]\n    cognitive_architecture_MemoryType[MemoryType]\n    cognitive_architecture --> cognitive_architecture_MemoryType\n    cognitive_architecture_Memory[Memory]\n    cognitive_architecture --> cognitive_architecture_Memory\n    cognitive_architecture_Goal[Goal]\n    cognitive_architecture --> cognitive_architecture_Goal\n    cognitive_architecture_PersonalityTrait[PersonalityTrait]\n    cognitive_architecture --> cognitive_architecture_PersonalityTrait\n    cognitive_architecture_PersonalityTrait___init__[__init__()]\n    cognitive_architecture_PersonalityTrait --> cognitive_architecture_PersonalityTrait___init__\n    cognitive_architecture_PersonalityTrait_update[update()]\n    cognitive_architecture_PersonalityTrait --> cognitive_architecture_PersonalityTrait_update\n    cognitive_architecture_CognitiveArchitecture[CognitiveArchitecture]\n    cognitive_architecture --> cognitive_architecture_CognitiveArchitecture\n    cognitive_architecture_CognitiveArchitecture___init__[__init__()]\n    cognitive_architecture_CognitiveArchitecture --> cognitive_architecture_CognitiveArchitecture___init__\n    cognitive_architecture_CognitiveArchitecture__load_state[_load_state()]\n    cognitive_architecture_CognitiveArchitecture --> cognitive_architecture_CognitiveArchitecture__load_state\n    cognitive_architecture_CognitiveArchitecture__load_activities[_load_activities()]\n    cognitive_architecture_CognitiveArchitecture --> cognitive_architecture_CognitiveArchitecture__load_activities\n    cognitive_architecture_CognitiveArchitecture__save_activities[_save_activities()]\n    cognitive_architecture_CognitiveArchitecture --> cognitive_architecture_CognitiveArchitecture__save_activities\n    cognitive_architecture_CognitiveArchitecture__log_activity[_log_activity()]\n    cognitive_architecture_CognitiveArchitecture --> cognitive_architecture_CognitiveArchitecture__log_activity\n    style cognitive_architecture fill:#99ccff\n```"
    },
    "cognitive_evolution": {
      "module": "cognitive_evolution",
      "docstring": "Cognitive Evolution Integration - Integrates echo_evolution.py with cognitive_architecture.py\n\nThis module connects the self-evolving system with the cognitive architecture,\nallowing agents to:\n1. Generate goals based on system evolution\n2. Learn from evolution experiences\n3. Adapt personality traits based on evolutionary success\n4. Store evolution history in cognitive memory",
      "imports": [
        "os",
        "sys",
        "logging",
        "asyncio",
        "json",
        "typing",
        "datetime",
        "random",
        "echo_evolution",
        "cognitive_architecture"
      ],
      "classes": [
        {
          "name": "CognitiveEvolutionBridge",
          "docstring": "Connects the echo_evolution system with the cognitive_architecture.\n\nThis bridge allows:\n- Evolution data to be stored as cognitive memories\n- Evolution metrics to influence personality traits\n- Evolution progress to generate cognitive goals\n- Cognitive architecture to constrain evolution pathways",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the bridge between evolution network and cognitive architecture\n\nArgs:\n    network: An initialized EvolutionNetwork",
              "args": [
                "self",
                "network"
              ],
              "line": 57,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "evolution_cycle_to_experience",
              "docstring": "Convert evolution cycle data to a cognitive experience\n\nArgs:\n    cycle_data: Data from an evolution cycle\n    \nReturns:\n    Dict containing the experience data",
              "args": [
                "self",
                "cycle_data"
              ],
              "line": 69,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "job_cycle_to_experience",
              "docstring": "Convert job processing cycle data to a cognitive experience\n\nArgs:\n    job_data: Data from a job processing cycle\n    \nReturns:\n    Dict containing the experience data",
              "args": [
                "self",
                "job_data"
              ],
              "line": 102,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "create_memory_from_evolution",
              "docstring": "Create a cognitive memory from evolution data\n\nArgs:\n    cycle_data: Data from an evolution cycle\n    \nReturns:\n    Memory object containing the evolution data",
              "args": [
                "self",
                "cycle_data"
              ],
              "line": 133,
              "returns": "Memory",
              "complexity": 3
            },
            {
              "name": "update_personality_from_evolution",
              "docstring": "Update cognitive personality traits based on evolution results\n\nArgs:\n    cycle_data: Data from an evolution cycle",
              "args": [
                "self",
                "cycle_data"
              ],
              "line": 163,
              "returns": "None",
              "complexity": 2
            },
            {
              "name": "generate_evolution_goals",
              "docstring": "Generate cognitive goals based on evolution system state\n\nReturns:\n    List of Goal objects",
              "args": [
                "self"
              ],
              "line": 198,
              "returns": "<ast.Subscript object at 0x7f2f2d8ccd10>",
              "complexity": 4
            },
            {
              "name": "create_evolution_constraints_from_cognition",
              "docstring": "Generate evolution constraints based on cognitive architecture state\n\nReturns:\n    Dict mapping agent names to constraint values",
              "args": [
                "self"
              ],
              "line": 239,
              "returns": "<ast.Subscript object at 0x7f2f2d766a50>",
              "complexity": 8
            }
          ],
          "bases": [],
          "line": 46,
          "cognitive_features": [
            "learning"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'random', 'cognitive_architecture', 'datetime', 'os', 'logging', 'sys', 'echo_evolution', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    cognitive_evolution[cognitive_evolution]\n    cognitive_evolution_CognitiveEvolutionBridge[CognitiveEvolutionBridge]\n    cognitive_evolution --> cognitive_evolution_CognitiveEvolutionBridge\n    cognitive_evolution_CognitiveEvolutionBridge___init__[__init__()]\n    cognitive_evolution_CognitiveEvolutionBridge --> cognitive_evolution_CognitiveEvolutionBridge___init__\n    cognitive_evolution_CognitiveEvolutionBridge_evolution_cycle_to_experience[evolution_cycle_to_experience()]\n    cognitive_evolution_CognitiveEvolutionBridge --> cognitive_evolution_CognitiveEvolutionBridge_evolution_cycle_to_experience\n    cognitive_evolution_CognitiveEvolutionBridge_job_cycle_to_experience[job_cycle_to_experience()]\n    cognitive_evolution_CognitiveEvolutionBridge --> cognitive_evolution_CognitiveEvolutionBridge_job_cycle_to_experience\n    cognitive_evolution_CognitiveEvolutionBridge_create_memory_from_evolution[create_memory_from_evolution()]\n    cognitive_evolution_CognitiveEvolutionBridge --> cognitive_evolution_CognitiveEvolutionBridge_create_memory_from_evolution\n    cognitive_evolution_CognitiveEvolutionBridge_update_personality_from_evolution[update_personality_from_evolution()]\n    cognitive_evolution_CognitiveEvolutionBridge --> cognitive_evolution_CognitiveEvolutionBridge_update_personality_from_evolution\n```"
    },
    "cognitive_integration_orchestrator": {
      "module": "cognitive_integration_orchestrator",
      "docstring": "Cognitive Integration Orchestrator for Distributed Agentic Cognitive Grammar\nIntegrates repository functions into reservoir computing nodes of deep tree echo state network",
      "imports": [
        "os",
        "sys",
        "json",
        "argparse",
        "datetime",
        "requests",
        "pathlib",
        "typing",
        "dataclasses",
        "traceback"
      ],
      "classes": [
        {
          "name": "CognitivePhase",
          "docstring": "Represents a phase in the distributed cognitive grammar development",
          "methods": [],
          "bases": [],
          "line": 19,
          "cognitive_features": []
        },
        {
          "name": "CognitiveIntegrationOrchestrator",
          "docstring": "Main orchestrator for cognitive integration across the echo9ml system",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_cognitive_phases",
              "docstring": "Initialize the 6 cognitive development phases",
              "args": [
                "self"
              ],
              "line": 48,
              "returns": "<ast.Subscript object at 0x7f2f2d73b8d0>",
              "complexity": 1
            },
            {
              "name": "create_phase_issues",
              "docstring": "Create GitHub issues for cognitive development phases",
              "args": [
                "self",
                "phase_filter"
              ],
              "line": 198,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "_create_github_issue",
              "docstring": "Create a GitHub issue for a specific cognitive phase",
              "args": [
                "self",
                "phase"
              ],
              "line": 227,
              "returns": "bool",
              "complexity": 5
            },
            {
              "name": "_get_existing_issues",
              "docstring": "Check for existing issues with the phase name",
              "args": [
                "self",
                "phase_name"
              ],
              "line": 303,
              "returns": "<ast.Subscript object at 0x7f2f2d7a5690>",
              "complexity": 4
            },
            {
              "name": "execute_cognitive_integration",
              "docstring": "Execute cognitive integration for specified phases",
              "args": [
                "self",
                "phase_filter"
              ],
              "line": 329,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "_check_cognitive_components",
              "docstring": "Check availability of cognitive components",
              "args": [
                "self"
              ],
              "line": 374,
              "returns": "<ast.Subscript object at 0x7f2f2d8fb610>",
              "complexity": 3
            },
            {
              "name": "_integrate_distributed_grammar",
              "docstring": "Integrate distributed cognitive grammar components",
              "args": [
                "self"
              ],
              "line": 394,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_integrate_cognitive_architecture",
              "docstring": "Integrate cognitive architecture components",
              "args": [
                "self"
              ],
              "line": 408,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_integrate_tensor_kernels",
              "docstring": "Integrate GGML tensor kernel components",
              "args": [
                "self"
              ],
              "line": 414,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_integrate_symbolic_reasoning",
              "docstring": "Integrate symbolic reasoning components",
              "args": [
                "self"
              ],
              "line": 420,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_reservoir_nodes",
              "docstring": "Update reservoir computing nodes with latest integration",
              "args": [
                "self"
              ],
              "line": 426,
              "returns": "bool",
              "complexity": 4
            },
            {
              "name": "generate_status_report",
              "docstring": "Generate comprehensive status report",
              "args": [
                "self"
              ],
              "line": 456,
              "returns": "str",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 30,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 500,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'argparse', 'pathlib', 'dataclasses', 'traceback', 'datetime', 'os', 'sys', 'requests', 'typing', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    cognitive_integration_orchestrator[cognitive_integration_orchestrator]\n    cognitive_integration_orchestrator_CognitivePhase[CognitivePhase]\n    cognitive_integration_orchestrator --> cognitive_integration_orchestrator_CognitivePhase\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator[CognitiveIntegrationOrchestrator]\n    cognitive_integration_orchestrator --> cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator___init__[__init__()]\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator --> cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator___init__\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator__initialize_cognitive_phases[_initialize_cognitive_phases()]\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator --> cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator__initialize_cognitive_phases\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator_create_phase_issues[create_phase_issues()]\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator --> cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator_create_phase_issues\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator__create_github_issue[_create_github_issue()]\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator --> cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator__create_github_issue\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator__get_existing_issues[_get_existing_issues()]\n    cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator --> cognitive_integration_orchestrator_CognitiveIntegrationOrchestrator__get_existing_issues\n    cognitive_integration_orchestrator_main[main()]\n    cognitive_integration_orchestrator --> cognitive_integration_orchestrator_main\n    style cognitive_integration_orchestrator fill:#99ccff\n```"
    },
    "cognitive_mesh_api": {
      "module": "cognitive_mesh_api",
      "docstring": "Distributed Cognitive Mesh API Server for Phase 4 Echo9ML\n\nThis module implements REST/WebSocket APIs to expose the distributed cognitive\ngrammar network for embodied cognition applications including Unity3D, ROS,\nand web agents.\n\nKey Features:\n- FastAPI-based REST endpoints for cognitive state access\n- WebSocket server for real-time bidirectional communication\n- Authentication and rate limiting\n- Integration with existing cognitive architecture\n- Support for embodiment platforms (Unity3D, ROS, Web)",
      "imports": [
        "asyncio",
        "json",
        "time",
        "uuid",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "fastapi",
        "fastapi.security",
        "fastapi.middleware.cors",
        "fastapi.responses",
        "pydantic",
        "uvicorn",
        "distributed_cognitive_grammar",
        "neural_symbolic_synthesis",
        "cognitive_architecture",
        "memory_management",
        "echoself_introspection",
        "argparse"
      ],
      "classes": [
        {
          "name": "EmbodimentPlatform",
          "docstring": "Supported embodiment platforms",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 54,
          "cognitive_features": []
        },
        {
          "name": "CognitiveEndpointType",
          "docstring": "Types of cognitive endpoints",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 62,
          "cognitive_features": []
        },
        {
          "name": "CognitiveStateRequest",
          "docstring": "Request model for cognitive state queries",
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "line": 72,
          "cognitive_features": []
        },
        {
          "name": "CognitiveStateResponse",
          "docstring": "Response model for cognitive state",
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "line": 78,
          "cognitive_features": []
        },
        {
          "name": "MemoryQueryRequest",
          "docstring": "Request model for memory queries",
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "line": 86,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "EmbodimentSyncRequest",
          "docstring": "Request model for embodiment synchronization",
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "line": 93,
          "cognitive_features": []
        },
        {
          "name": "WebSocketMessage",
          "docstring": "WebSocket message format",
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "line": 100,
          "cognitive_features": []
        },
        {
          "name": "CognitiveConnection",
          "docstring": "Represents a connection to the cognitive mesh",
          "methods": [],
          "bases": [],
          "line": 108,
          "cognitive_features": []
        },
        {
          "name": "CognitiveMeshAPI",
          "docstring": "Main API server for the distributed cognitive mesh",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "host",
                "port"
              ],
              "line": 121,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_setup_app",
              "docstring": "Initialize FastAPI application",
              "args": [
                "self"
              ],
              "line": 139,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_setup_cognitive_network",
              "docstring": "Initialize the cognitive network backend",
              "args": [
                "self"
              ],
              "line": 164,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_register_routes",
              "docstring": "Register API routes",
              "args": [
                "self"
              ],
              "line": 179,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_process_embodiment_data",
              "docstring": "Process embodiment data based on platform",
              "args": [
                "self",
                "platform",
                "data"
              ],
              "line": 438,
              "returns": "<ast.Subscript object at 0x7f2f2d8a6e90>",
              "complexity": 4
            },
            {
              "name": "_process_unity3d_data",
              "docstring": "Process Unity3D specific embodiment data",
              "args": [
                "self",
                "data"
              ],
              "line": 449,
              "returns": "<ast.Subscript object at 0x7f2f2d739d10>",
              "complexity": 1
            },
            {
              "name": "_process_ros_data",
              "docstring": "Process ROS specific embodiment data",
              "args": [
                "self",
                "data"
              ],
              "line": 463,
              "returns": "<ast.Subscript object at 0x7f2f2d73b350>",
              "complexity": 1
            },
            {
              "name": "_process_web_data",
              "docstring": "Process web-based embodiment data",
              "args": [
                "self",
                "data"
              ],
              "line": 477,
              "returns": "<ast.Subscript object at 0x7f2f2d72d210>",
              "complexity": 1
            },
            {
              "name": "_generate_cognitive_response",
              "docstring": "Generate cognitive response for embodiment sync",
              "args": [
                "self",
                "request"
              ],
              "line": 491,
              "returns": "<ast.Subscript object at 0x7f2f2d86cd90>",
              "complexity": 1
            },
            {
              "name": "_suggest_action",
              "docstring": "Suggest cognitive actions based on embodiment platform and data",
              "args": [
                "self",
                "platform",
                "data"
              ],
              "line": 501,
              "returns": "<ast.Subscript object at 0x7f2f2d71ffd0>",
              "complexity": 4
            },
            {
              "name": "_get_platform_description",
              "docstring": "Get description for embodiment platform",
              "args": [
                "self",
                "platform"
              ],
              "line": 538,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_platform_endpoints",
              "docstring": "Get specific endpoints for embodiment platform",
              "args": [
                "self",
                "platform"
              ],
              "line": 549,
              "returns": "<ast.Subscript object at 0x7f2f2d4be310>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 118,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "create_cognitive_mesh_api",
          "docstring": "Factory function to create a cognitive mesh API instance",
          "args": [
            "host",
            "port"
          ],
          "line": 583,
          "returns": "CognitiveMeshAPI",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'memory_management', 'pydantic', 'argparse', 'uvicorn', 'neural_symbolic_synthesis', 'dataclasses', 'uuid', 'cognitive_architecture', 'datetime', 'echoself_introspection', 'distributed_cognitive_grammar', 'logging', 'enum', 'time', 'fastapi', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "State Machine Pattern",
        "Memory Management Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    cognitive_mesh_api[cognitive_mesh_api]\n    cognitive_mesh_api_EmbodimentPlatform[EmbodimentPlatform]\n    cognitive_mesh_api --> cognitive_mesh_api_EmbodimentPlatform\n    cognitive_mesh_api_CognitiveEndpointType[CognitiveEndpointType]\n    cognitive_mesh_api --> cognitive_mesh_api_CognitiveEndpointType\n    cognitive_mesh_api_CognitiveStateRequest[CognitiveStateRequest]\n    cognitive_mesh_api --> cognitive_mesh_api_CognitiveStateRequest\n    cognitive_mesh_api_CognitiveStateResponse[CognitiveStateResponse]\n    cognitive_mesh_api --> cognitive_mesh_api_CognitiveStateResponse\n    cognitive_mesh_api_MemoryQueryRequest[MemoryQueryRequest]\n    cognitive_mesh_api --> cognitive_mesh_api_MemoryQueryRequest\n    cognitive_mesh_api_EmbodimentSyncRequest[EmbodimentSyncRequest]\n    cognitive_mesh_api --> cognitive_mesh_api_EmbodimentSyncRequest\n    cognitive_mesh_api_WebSocketMessage[WebSocketMessage]\n    cognitive_mesh_api --> cognitive_mesh_api_WebSocketMessage\n    cognitive_mesh_api_CognitiveConnection[CognitiveConnection]\n    cognitive_mesh_api --> cognitive_mesh_api_CognitiveConnection\n    cognitive_mesh_api_CognitiveMeshAPI[CognitiveMeshAPI]\n    cognitive_mesh_api --> cognitive_mesh_api_CognitiveMeshAPI\n    cognitive_mesh_api_CognitiveMeshAPI___init__[__init__()]\n    cognitive_mesh_api_CognitiveMeshAPI --> cognitive_mesh_api_CognitiveMeshAPI___init__\n    cognitive_mesh_api_CognitiveMeshAPI__setup_app[_setup_app()]\n    cognitive_mesh_api_CognitiveMeshAPI --> cognitive_mesh_api_CognitiveMeshAPI__setup_app\n    cognitive_mesh_api_CognitiveMeshAPI__setup_cognitive_network[_setup_cognitive_network()]\n    cognitive_mesh_api_CognitiveMeshAPI --> cognitive_mesh_api_CognitiveMeshAPI__setup_cognitive_network\n    cognitive_mesh_api_CognitiveMeshAPI__register_routes[_register_routes()]\n    cognitive_mesh_api_CognitiveMeshAPI --> cognitive_mesh_api_CognitiveMeshAPI__register_routes\n    cognitive_mesh_api_CognitiveMeshAPI__process_embodiment_data[_process_embodiment_data()]\n    cognitive_mesh_api_CognitiveMeshAPI --> cognitive_mesh_api_CognitiveMeshAPI__process_embodiment_data\n    cognitive_mesh_api_create_cognitive_mesh_api[create_cognitive_mesh_api()]\n    cognitive_mesh_api --> cognitive_mesh_api_create_cognitive_mesh_api\n    style cognitive_mesh_api fill:#99ccff\n```"
    },
    "copilot_suggestions": {
      "module": "copilot_suggestions",
      "docstring": "Azure OpenAI Service Integration for Code Suggestions\n\nThis module provides functionality to fetch code improvement suggestions using Azure OpenAI Service\ninstead of the GitHub Copilot API (which is not publicly available).\n\nThe module:\n1. Loads project notes from a JSON file\n2. Sends the notes to Azure OpenAI Service for analysis\n3. Receives structured suggestions for incremental improvements\n4. Updates the note file with the suggestions\n\nRequired Environment Variables:\n- AZURE_OPENAI_ENDPOINT: The endpoint URL for your Azure OpenAI resource \n  (e.g., https://your-resource.openai.azure.com/)\n- AZURE_OPENAI_KEY: The API key for your Azure OpenAI resource\n- AZURE_OPENAI_DEPLOYMENT: The deployment name of your model (e.g., gpt-4)\n\nUsage:\n    python copilot_suggestions.py\n\nThe module is designed for future backend modularization and maintains compatibility\nwith the existing note file structure and logging patterns.",
      "imports": [
        "json",
        "requests",
        "os",
        "logging",
        "time"
      ],
      "classes": [],
      "functions": [
        {
          "name": "fetch_suggestions_from_azure_openai",
          "docstring": "Fetch code suggestions from Azure OpenAI Service.\n\nRequired environment variables:\n- AZURE_OPENAI_ENDPOINT: The endpoint URL for your Azure OpenAI resource\n- AZURE_OPENAI_KEY: The API key for your Azure OpenAI resource  \n- AZURE_OPENAI_DEPLOYMENT: The deployment name of your model\n\nArgs:\n    note: The note data to analyze for suggestions\n    \nReturns:\n    dict: Suggestions response or None if failed",
          "args": [
            "note"
          ],
          "line": 39,
          "returns": "Any",
          "complexity": 14,
          "cognitive_features": []
        },
        {
          "name": "update_note_with_suggestions",
          "docstring": "Update the note file with suggestions from Azure OpenAI Service.\n\nArgs:\n    suggestions: Dict containing suggestions and analysis from Azure OpenAI",
          "args": [
            "suggestions"
          ],
          "line": 160,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": "Main function to fetch suggestions from Azure OpenAI and update the note file.\n\nThis function:\n1. Loads the existing note from note2self.json\n2. Sends it to Azure OpenAI Service for analysis and suggestions\n3. Updates the note file with the received suggestions\n\nRequired environment variables:\n- AZURE_OPENAI_ENDPOINT: Your Azure OpenAI resource endpoint\n- AZURE_OPENAI_KEY: Your Azure OpenAI API key\n- AZURE_OPENAI_DEPLOYMENT: Your model deployment name",
          "args": [],
          "line": 191,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": [
            "metacognition"
          ]
        }
      ],
      "constants": [
        {
          "name": "NOTE_FILE",
          "line": 33,
          "value": "note2self.json"
        }
      ],
      "dependencies": "{'os', 'logging', 'time', 'requests', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    copilot_suggestions[copilot_suggestions]\n    copilot_suggestions_fetch_suggestions_from_azure_openai[fetch_suggestions_from_azure_openai()]\n    copilot_suggestions --> copilot_suggestions_fetch_suggestions_from_azure_openai\n    copilot_suggestions_update_note_with_suggestions[update_note_with_suggestions()]\n    copilot_suggestions --> copilot_suggestions_update_note_with_suggestions\n    copilot_suggestions_main[main()]\n    copilot_suggestions --> copilot_suggestions_main\n    style copilot_suggestions fill:#ffcc99\n```"
    },
    "cronbot": {
      "module": "cronbot",
      "docstring": null,
      "imports": [
        "json",
        "base64",
        "os",
        "time",
        "datetime",
        "logging",
        "psutil",
        "threading",
        "queue"
      ],
      "classes": [],
      "functions": [
        {
          "name": "read_note",
          "docstring": null,
          "args": [],
          "line": 17,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "write_note",
          "docstring": null,
          "args": [
            "note"
          ],
          "line": 30,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "call_github_copilot",
          "docstring": null,
          "args": [
            "note"
          ],
          "line": 34,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "introspect_repo",
          "docstring": null,
          "args": [],
          "line": 50,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "apply_improvement",
          "docstring": null,
          "args": [
            "improvement"
          ],
          "line": 57,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "run_workflow",
          "docstring": null,
          "args": [],
          "line": 60,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "monitor_resources",
          "docstring": null,
          "args": [
            "stop_event",
            "resource_queue"
          ],
          "line": 64,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 71,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        }
      ],
      "constants": [
        {
          "name": "NOTE_FILE",
          "line": 11,
          "value": "note2self.json"
        }
      ],
      "dependencies": "{'psutil', 'datetime', 'threading', 'os', 'logging', 'time', 'queue', 'base64', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    cronbot[cronbot]\n    cronbot_read_note[read_note()]\n    cronbot --> cronbot_read_note\n    cronbot_write_note[write_note()]\n    cronbot --> cronbot_write_note\n    cronbot_call_github_copilot[call_github_copilot()]\n    cronbot --> cronbot_call_github_copilot\n    cronbot_introspect_repo[introspect_repo()]\n    cronbot --> cronbot_introspect_repo\n    cronbot_apply_improvement[apply_improvement()]\n    cronbot --> cronbot_apply_improvement\n```"
    },
    "deep_tree_echo": {
      "module": "deep_tree_echo",
      "docstring": null,
      "imports": [
        "logging",
        "dataclasses",
        "typing",
        "numpy",
        "collections",
        "pathlib",
        "ml_system",
        "emotional_dynamics",
        "differential_emotion_theory",
        "sensory_motor_simple",
        "asyncio",
        "echoself_introspection",
        "sensory_motor"
      ],
      "classes": [
        {
          "name": "SpatialContext",
          "docstring": "Spatial context for 3D environment awareness",
          "methods": [],
          "bases": [],
          "line": 12,
          "cognitive_features": []
        },
        {
          "name": "TreeNode",
          "docstring": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 6
            }
          ],
          "bases": [],
          "line": 23,
          "cognitive_features": []
        },
        {
          "name": "DeepTreeEcho",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "echo_threshold",
                "max_depth",
                "use_julia"
              ],
              "line": 46,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "create_tree",
              "docstring": "Create initial tree structure from content and analyze emotional content",
              "args": [
                "self",
                "content"
              ],
              "line": 79,
              "returns": "TreeNode",
              "complexity": 1
            },
            {
              "name": "add_child",
              "docstring": "Add a child node with emotional state based on content",
              "args": [
                "self",
                "parent",
                "content"
              ],
              "line": 101,
              "returns": "TreeNode",
              "complexity": 2
            },
            {
              "name": "add_child_with_spatial_context",
              "docstring": "Add a child node with specific spatial positioning",
              "args": [
                "self",
                "parent",
                "content",
                "position",
                "orientation",
                "depth"
              ],
              "line": 134,
              "returns": "TreeNode",
              "complexity": 4
            },
            {
              "name": "calculate_echo_value",
              "docstring": "Calculate echo value for a node based on its content, children, emotional state, and spatial context",
              "args": [
                "self",
                "node"
              ],
              "line": 155,
              "returns": "float",
              "complexity": 11
            },
            {
              "name": "get_node_depth",
              "docstring": "Calculate the depth of a node in the tree",
              "args": [
                "self",
                "node"
              ],
              "line": 238,
              "returns": "int",
              "complexity": 3
            },
            {
              "name": "visualize_in_3d_space",
              "docstring": "Generate 3D visualization data for the tree based on spatial context",
              "args": [
                "self"
              ],
              "line": 252,
              "returns": "<ast.Subscript object at 0x7f2f2d8c5150>",
              "complexity": 6
            },
            {
              "name": "update_from_sensory_input",
              "docstring": "Update the tree based on sensory input from the environment",
              "args": [
                "self"
              ],
              "line": 331,
              "returns": "Any",
              "complexity": 12
            },
            {
              "name": "apply_spatial_dynamics",
              "docstring": "Apply spatial dynamics to update tree based on spatial relationships",
              "args": [
                "self",
                "node"
              ],
              "line": 397,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "simulate_det_dynamics",
              "docstring": "Apply differential emotion theory simulation to a node",
              "args": [
                "self",
                "node",
                "time_span"
              ],
              "line": 440,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "update_spatial_from_emotion",
              "docstring": "Update spatial context based on emotional state",
              "args": [
                "self",
                "node"
              ],
              "line": 469,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "inject_echo",
              "docstring": "Inject an echo from source node to target node with given strength",
              "args": [
                "self",
                "source_node",
                "target_node",
                "strength"
              ],
              "line": 506,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "propagate_echoes",
              "docstring": "Propagate echo values through the tree structure",
              "args": [
                "self"
              ],
              "line": 537,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_update_all_echo_values",
              "docstring": "Update echo values for a node and all its children",
              "args": [
                "self",
                "node"
              ],
              "line": 558,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_propagate_down",
              "docstring": "Propagate echo from a node down to its children",
              "args": [
                "self",
                "node",
                "depth"
              ],
              "line": 566,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_propagate_up",
              "docstring": "Propagate echo from the leaves up to the root",
              "args": [
                "self",
                "node"
              ],
              "line": 595,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_apply_echo_decay",
              "docstring": "Apply decay to echo values",
              "args": [
                "self",
                "node"
              ],
              "line": 625,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_calculate_propagation_factor",
              "docstring": "Calculate how strongly echo propagates between two nodes",
              "args": [
                "self",
                "source",
                "target"
              ],
              "line": 643,
              "returns": "float",
              "complexity": 10
            },
            {
              "name": "prune_weak_echoes",
              "docstring": "Remove echoes below threshold to clean up the system",
              "args": [
                "self"
              ],
              "line": 683,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_reset_weak_echoes",
              "docstring": "Reset echo values below threshold",
              "args": [
                "self",
                "node"
              ],
              "line": 691,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "analyze_echo_patterns",
              "docstring": "Analyze echo patterns and return metrics",
              "args": [
                "self"
              ],
              "line": 700,
              "returns": "<ast.Subscript object at 0x7f2f2d844250>",
              "complexity": 2
            },
            {
              "name": "_collect_all_nodes",
              "docstring": "Collect all nodes in the tree into a flat list",
              "args": [
                "self",
                "node",
                "nodes"
              ],
              "line": 733,
              "returns": "<ast.Subscript object at 0x7f2f2d8deb10>",
              "complexity": 3
            },
            {
              "name": "perform_recursive_introspection",
              "docstring": "Perform recursive self-model introspection using the Echoself system\n\nThis method integrates the hypergraph-encoded repository introspection\nwith the DeepTreeEcho cognitive architecture, enabling self-aware processing.\n\nArgs:\n    repository_root: Root directory for introspection (defaults to current working directory)\n    current_load: Current cognitive load (0.0-1.0)\n    recent_activity: Recent activity level (0.0-1.0)\n    \nReturns:\n    Dictionary containing introspection results and cognitive snapshot",
              "args": [
                "self",
                "repository_root",
                "current_load",
                "recent_activity"
              ],
              "line": 744,
              "returns": "<ast.Subscript object at 0x7f2f2d6ea8d0>",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 45,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'sensory_motor', 'dataclasses', 'echoself_introspection', 'emotional_dynamics', 'sensory_motor_simple', 'logging', 'ml_system', 'asyncio', 'typing', 'differential_emotion_theory', 'collections'}",
      "cognitive_patterns": [],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    deep_tree_echo[deep_tree_echo]\n    deep_tree_echo_SpatialContext[SpatialContext]\n    deep_tree_echo --> deep_tree_echo_SpatialContext\n    deep_tree_echo_TreeNode[TreeNode]\n    deep_tree_echo --> deep_tree_echo_TreeNode\n    deep_tree_echo_TreeNode___post_init__[__post_init__()]\n    deep_tree_echo_TreeNode --> deep_tree_echo_TreeNode___post_init__\n    deep_tree_echo_DeepTreeEcho[DeepTreeEcho]\n    deep_tree_echo --> deep_tree_echo_DeepTreeEcho\n    deep_tree_echo_DeepTreeEcho___init__[__init__()]\n    deep_tree_echo_DeepTreeEcho --> deep_tree_echo_DeepTreeEcho___init__\n    deep_tree_echo_DeepTreeEcho_create_tree[create_tree()]\n    deep_tree_echo_DeepTreeEcho --> deep_tree_echo_DeepTreeEcho_create_tree\n    deep_tree_echo_DeepTreeEcho_add_child[add_child()]\n    deep_tree_echo_DeepTreeEcho --> deep_tree_echo_DeepTreeEcho_add_child\n    deep_tree_echo_DeepTreeEcho_add_child_with_spatial_context[add_child_with_spatial_context()]\n    deep_tree_echo_DeepTreeEcho --> deep_tree_echo_DeepTreeEcho_add_child_with_spatial_context\n    deep_tree_echo_DeepTreeEcho_calculate_echo_value[calculate_echo_value()]\n    deep_tree_echo_DeepTreeEcho --> deep_tree_echo_DeepTreeEcho_calculate_echo_value\n    style deep_tree_echo fill:#ff9999\n```"
    },
    "deep_tree_echo-v1": {
      "module": "deep_tree_echo-v1",
      "docstring": null,
      "imports": [
        "logging",
        "dataclasses",
        "typing",
        "numpy",
        "collections",
        "ml_system",
        "emotional_dynamics",
        "differential_emotion_theory",
        "sensory_motor_simple",
        "asyncio",
        "sensory_motor"
      ],
      "classes": [
        {
          "name": "SpatialContext",
          "docstring": "Spatial context for 3D environment awareness",
          "methods": [],
          "bases": [],
          "line": 11,
          "cognitive_features": []
        },
        {
          "name": "TreeNode",
          "docstring": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 32,
              "returns": "Any",
              "complexity": 6
            }
          ],
          "bases": [],
          "line": 22,
          "cognitive_features": []
        },
        {
          "name": "DeepTreeEcho",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "echo_threshold",
                "max_depth",
                "use_julia"
              ],
              "line": 45,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "create_tree",
              "docstring": "Create initial tree structure from content and analyze emotional content",
              "args": [
                "self",
                "content"
              ],
              "line": 78,
              "returns": "TreeNode",
              "complexity": 1
            },
            {
              "name": "add_child",
              "docstring": "Add a child node with emotional state based on content",
              "args": [
                "self",
                "parent",
                "content"
              ],
              "line": 100,
              "returns": "TreeNode",
              "complexity": 2
            },
            {
              "name": "add_child_with_spatial_context",
              "docstring": "Add a child node with specific spatial positioning",
              "args": [
                "self",
                "parent",
                "content",
                "position",
                "orientation",
                "depth"
              ],
              "line": 133,
              "returns": "TreeNode",
              "complexity": 4
            },
            {
              "name": "calculate_echo_value",
              "docstring": "Calculate echo value for a node based on its content, children, emotional state, and spatial context",
              "args": [
                "self",
                "node"
              ],
              "line": 154,
              "returns": "float",
              "complexity": 11
            },
            {
              "name": "get_node_depth",
              "docstring": "Calculate the depth of a node in the tree",
              "args": [
                "self",
                "node"
              ],
              "line": 237,
              "returns": "int",
              "complexity": 3
            },
            {
              "name": "visualize_in_3d_space",
              "docstring": "Generate 3D visualization data for the tree based on spatial context",
              "args": [
                "self"
              ],
              "line": 251,
              "returns": "<ast.Subscript object at 0x7f2f2d85fc50>",
              "complexity": 6
            },
            {
              "name": "update_from_sensory_input",
              "docstring": "Update the tree based on sensory input from the environment",
              "args": [
                "self"
              ],
              "line": 330,
              "returns": "Any",
              "complexity": 12
            },
            {
              "name": "apply_spatial_dynamics",
              "docstring": "Apply spatial dynamics to update tree based on spatial relationships",
              "args": [
                "self",
                "node"
              ],
              "line": 396,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "simulate_det_dynamics",
              "docstring": "Apply differential emotion theory simulation to a node",
              "args": [
                "self",
                "node",
                "time_span"
              ],
              "line": 439,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "update_spatial_from_emotion",
              "docstring": "Update spatial context based on emotional state",
              "args": [
                "self",
                "node"
              ],
              "line": 468,
              "returns": "Any",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 44,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'sensory_motor', 'dataclasses', 'emotional_dynamics', 'sensory_motor_simple', 'logging', 'ml_system', 'asyncio', 'typing', 'differential_emotion_theory', 'collections'}",
      "cognitive_patterns": [],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    deep_tree_echo-v1[deep_tree_echo-v1]\n    deep_tree_echo-v1_SpatialContext[SpatialContext]\n    deep_tree_echo-v1 --> deep_tree_echo-v1_SpatialContext\n    deep_tree_echo-v1_TreeNode[TreeNode]\n    deep_tree_echo-v1 --> deep_tree_echo-v1_TreeNode\n    deep_tree_echo-v1_TreeNode___post_init__[__post_init__()]\n    deep_tree_echo-v1_TreeNode --> deep_tree_echo-v1_TreeNode___post_init__\n    deep_tree_echo-v1_DeepTreeEcho[DeepTreeEcho]\n    deep_tree_echo-v1 --> deep_tree_echo-v1_DeepTreeEcho\n    deep_tree_echo-v1_DeepTreeEcho___init__[__init__()]\n    deep_tree_echo-v1_DeepTreeEcho --> deep_tree_echo-v1_DeepTreeEcho___init__\n    deep_tree_echo-v1_DeepTreeEcho_create_tree[create_tree()]\n    deep_tree_echo-v1_DeepTreeEcho --> deep_tree_echo-v1_DeepTreeEcho_create_tree\n    deep_tree_echo-v1_DeepTreeEcho_add_child[add_child()]\n    deep_tree_echo-v1_DeepTreeEcho --> deep_tree_echo-v1_DeepTreeEcho_add_child\n    deep_tree_echo-v1_DeepTreeEcho_add_child_with_spatial_context[add_child_with_spatial_context()]\n    deep_tree_echo-v1_DeepTreeEcho --> deep_tree_echo-v1_DeepTreeEcho_add_child_with_spatial_context\n    deep_tree_echo-v1_DeepTreeEcho_calculate_echo_value[calculate_echo_value()]\n    deep_tree_echo-v1_DeepTreeEcho --> deep_tree_echo-v1_DeepTreeEcho_calculate_echo_value\n    style deep_tree_echo-v1 fill:#ff9999\n```"
    },
    "deep_tree_echo-v2": {
      "module": "deep_tree_echo-v2",
      "docstring": null,
      "imports": [
        "logging",
        "dataclasses",
        "typing",
        "numpy",
        "collections",
        "ml_system",
        "emotional_dynamics",
        "differential_emotion_theory",
        "sensory_motor_simple",
        "asyncio",
        "sensory_motor"
      ],
      "classes": [
        {
          "name": "SpatialContext",
          "docstring": "Spatial context for 3D environment awareness",
          "methods": [],
          "bases": [],
          "line": 11,
          "cognitive_features": []
        },
        {
          "name": "TreeNode",
          "docstring": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 32,
              "returns": "Any",
              "complexity": 6
            }
          ],
          "bases": [],
          "line": 22,
          "cognitive_features": []
        },
        {
          "name": "DeepTreeEcho",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "echo_threshold",
                "max_depth",
                "use_julia"
              ],
              "line": 45,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "create_tree",
              "docstring": "Create initial tree structure from content and analyze emotional content",
              "args": [
                "self",
                "content"
              ],
              "line": 78,
              "returns": "TreeNode",
              "complexity": 1
            },
            {
              "name": "add_child",
              "docstring": "Add a child node with emotional state based on content",
              "args": [
                "self",
                "parent",
                "content"
              ],
              "line": 100,
              "returns": "TreeNode",
              "complexity": 2
            },
            {
              "name": "add_child_with_spatial_context",
              "docstring": "Add a child node with specific spatial positioning",
              "args": [
                "self",
                "parent",
                "content",
                "position",
                "orientation",
                "depth"
              ],
              "line": 133,
              "returns": "TreeNode",
              "complexity": 4
            },
            {
              "name": "calculate_echo_value",
              "docstring": "Calculate echo value for a node based on its content, children, emotional state, and spatial context",
              "args": [
                "self",
                "node"
              ],
              "line": 154,
              "returns": "float",
              "complexity": 11
            },
            {
              "name": "get_node_depth",
              "docstring": "Calculate the depth of a node in the tree",
              "args": [
                "self",
                "node"
              ],
              "line": 237,
              "returns": "int",
              "complexity": 3
            },
            {
              "name": "visualize_in_3d_space",
              "docstring": "Generate 3D visualization data for the tree based on spatial context",
              "args": [
                "self"
              ],
              "line": 251,
              "returns": "<ast.Subscript object at 0x7f2f2d85f150>",
              "complexity": 6
            },
            {
              "name": "update_from_sensory_input",
              "docstring": "Update the tree based on sensory input from the environment",
              "args": [
                "self"
              ],
              "line": 330,
              "returns": "Any",
              "complexity": 12
            },
            {
              "name": "apply_spatial_dynamics",
              "docstring": "Apply spatial dynamics to update tree based on spatial relationships",
              "args": [
                "self",
                "node"
              ],
              "line": 396,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "simulate_det_dynamics",
              "docstring": "Apply differential emotion theory simulation to a node",
              "args": [
                "self",
                "node",
                "time_span"
              ],
              "line": 439,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "update_spatial_from_emotion",
              "docstring": "Update spatial context based on emotional state",
              "args": [
                "self",
                "node"
              ],
              "line": 468,
              "returns": "Any",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 44,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'sensory_motor', 'dataclasses', 'emotional_dynamics', 'sensory_motor_simple', 'logging', 'ml_system', 'asyncio', 'typing', 'differential_emotion_theory', 'collections'}",
      "cognitive_patterns": [],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    deep_tree_echo-v2[deep_tree_echo-v2]\n    deep_tree_echo-v2_SpatialContext[SpatialContext]\n    deep_tree_echo-v2 --> deep_tree_echo-v2_SpatialContext\n    deep_tree_echo-v2_TreeNode[TreeNode]\n    deep_tree_echo-v2 --> deep_tree_echo-v2_TreeNode\n    deep_tree_echo-v2_TreeNode___post_init__[__post_init__()]\n    deep_tree_echo-v2_TreeNode --> deep_tree_echo-v2_TreeNode___post_init__\n    deep_tree_echo-v2_DeepTreeEcho[DeepTreeEcho]\n    deep_tree_echo-v2 --> deep_tree_echo-v2_DeepTreeEcho\n    deep_tree_echo-v2_DeepTreeEcho___init__[__init__()]\n    deep_tree_echo-v2_DeepTreeEcho --> deep_tree_echo-v2_DeepTreeEcho___init__\n    deep_tree_echo-v2_DeepTreeEcho_create_tree[create_tree()]\n    deep_tree_echo-v2_DeepTreeEcho --> deep_tree_echo-v2_DeepTreeEcho_create_tree\n    deep_tree_echo-v2_DeepTreeEcho_add_child[add_child()]\n    deep_tree_echo-v2_DeepTreeEcho --> deep_tree_echo-v2_DeepTreeEcho_add_child\n    deep_tree_echo-v2_DeepTreeEcho_add_child_with_spatial_context[add_child_with_spatial_context()]\n    deep_tree_echo-v2_DeepTreeEcho --> deep_tree_echo-v2_DeepTreeEcho_add_child_with_spatial_context\n    deep_tree_echo-v2_DeepTreeEcho_calculate_echo_value[calculate_echo_value()]\n    deep_tree_echo-v2_DeepTreeEcho --> deep_tree_echo-v2_DeepTreeEcho_calculate_echo_value\n    style deep_tree_echo-v2 fill:#ff9999\n```"
    },
    "demo_distributed_cognitive_grammar": {
      "module": "demo_distributed_cognitive_grammar",
      "docstring": "Distributed Cognitive Grammar Demo\n\nThis script demonstrates the distributed network of agentic cognitive grammar\nfor OpenCoq/echo9ml. It creates a simple network of cognitive agents that\nshare knowledge and perform collaborative reasoning.\n\nUsage:\n    python demo_distributed_cognitive_grammar.py",
      "imports": [
        "asyncio",
        "logging",
        "json",
        "typing",
        "sys",
        "numpy_mock",
        "distributed_cognitive_grammar",
        "ggml_tensor_kernel",
        "symbolic_reasoning",
        "distributed_cognitive_grammar",
        "traceback"
      ],
      "classes": [
        {
          "name": "DemoAgent",
          "docstring": "Demo agent with enhanced cognitive capabilities",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id",
                "broker",
                "specialization"
              ],
              "line": 37,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_specialization",
              "docstring": "Initialize agent based on specialization",
              "args": [
                "self"
              ],
              "line": 48,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_initialize_creative_knowledge",
              "docstring": "Initialize creative knowledge",
              "args": [
                "self"
              ],
              "line": 59,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_initialize_logical_knowledge",
              "docstring": "Initialize logical knowledge",
              "args": [
                "self"
              ],
              "line": 89,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_initialize_memory_knowledge",
              "docstring": "Initialize memory knowledge",
              "args": [
                "self"
              ],
              "line": 119,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_initialize_general_knowledge",
              "docstring": "Initialize general knowledge",
              "args": [
                "self"
              ],
              "line": 149,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_demo_statistics",
              "docstring": "Get demo statistics",
              "args": [
                "self"
              ],
              "line": 210,
              "returns": "Dict",
              "complexity": 1
            }
          ],
          "bases": [
            "Echo9MLNode"
          ],
          "line": 34,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": "Main demo function",
          "args": [],
          "line": 336,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'symbolic_reasoning', 'numpy_mock', 'traceback', 'ggml_tensor_kernel', 'distributed_cognitive_grammar', 'logging', 'sys', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    demo_distributed_cognitive_grammar[demo_distributed_cognitive_grammar]\n    demo_distributed_cognitive_grammar_DemoAgent[DemoAgent]\n    demo_distributed_cognitive_grammar --> demo_distributed_cognitive_grammar_DemoAgent\n    demo_distributed_cognitive_grammar_DemoAgent___init__[__init__()]\n    demo_distributed_cognitive_grammar_DemoAgent --> demo_distributed_cognitive_grammar_DemoAgent___init__\n    demo_distributed_cognitive_grammar_DemoAgent__initialize_specialization[_initialize_specialization()]\n    demo_distributed_cognitive_grammar_DemoAgent --> demo_distributed_cognitive_grammar_DemoAgent__initialize_specialization\n    demo_distributed_cognitive_grammar_DemoAgent__initialize_creative_knowledge[_initialize_creative_knowledge()]\n    demo_distributed_cognitive_grammar_DemoAgent --> demo_distributed_cognitive_grammar_DemoAgent__initialize_creative_knowledge\n    demo_distributed_cognitive_grammar_DemoAgent__initialize_logical_knowledge[_initialize_logical_knowledge()]\n    demo_distributed_cognitive_grammar_DemoAgent --> demo_distributed_cognitive_grammar_DemoAgent__initialize_logical_knowledge\n    demo_distributed_cognitive_grammar_DemoAgent__initialize_memory_knowledge[_initialize_memory_knowledge()]\n    demo_distributed_cognitive_grammar_DemoAgent --> demo_distributed_cognitive_grammar_DemoAgent__initialize_memory_knowledge\n    demo_distributed_cognitive_grammar_main[main()]\n    demo_distributed_cognitive_grammar --> demo_distributed_cognitive_grammar_main\n    style demo_distributed_cognitive_grammar fill:#99ccff\n```"
    },
    "differential_emotion_theory": {
      "module": "differential_emotion_theory",
      "docstring": "Differential Emotion Theory integration for Deep Tree Echo\n\nThis module extends the emotional_dynamics.py module by implementing\nIzard's Differential Emotion Theory with the Julia framework.\nIt provides mechanisms for:\n1. Discrete emotion intensity tracking\n2. Emotion transition matrices\n3. Emotional scripts and schemas\n4. Cognitive-emotion interactions\n5. Emotional regulation modeling",
      "imports": [
        "logging",
        "numpy",
        "typing",
        "dataclasses",
        "enum",
        "collections",
        "emotional_dynamics",
        "julia",
        "julia"
      ],
      "classes": [
        {
          "name": "DETEmotion",
          "docstring": "Emotions based on Izard's Differential Emotion Theory.\n\nThese emotions represent a more fine-grained set than Panksepp's core emotions\nand are mapped to the core emotions for compatibility.",
          "methods": [],
          "bases": [
            "IntEnum"
          ],
          "line": 32,
          "cognitive_features": [
            "emotion"
          ]
        },
        {
          "name": "EmotionalScript",
          "docstring": "Represents an emotional script as defined in Differential Emotion Theory.\n\nEmotional scripts are sequences of emotions, cognitions, and behaviors that \nare activated in response to specific situations.",
          "methods": [
            {
              "name": "matches_emotions",
              "docstring": "Check if this script matches the current emotional state",
              "args": [
                "self",
                "emotions",
                "threshold"
              ],
              "line": 85,
              "returns": "bool",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 71,
          "cognitive_features": [
            "action",
            "emotion"
          ]
        },
        {
          "name": "DETState",
          "docstring": "Represents a Differential Emotion Theory emotional state.\n\nThis extends the basic emotional state with more fine-grained emotions,\nemotion transitions, and cognitive-emotion interactions.",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 116,
              "returns": "Any",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 91,
          "cognitive_features": [
            "action",
            "emotion"
          ]
        },
        {
          "name": "DifferentialEmotionSystem",
          "docstring": "Implementation of Differential Emotion Theory for Deep Tree Echo.\n\nThis system extends the basic emotional dynamics with more fine-grained\nemotions, emotional scripts, cognitive-emotion interactions, and regulation.",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Differential Emotion Theory system.\n\nArgs:\n    use_julia: Whether to use Julia for emotional simulations (if available)",
              "args": [
                "self",
                "use_julia"
              ],
              "line": 162,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_setup_julia_extensions",
              "docstring": "Set up additional Julia functionality for DET",
              "args": [
                "self"
              ],
              "line": 182,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_create_script_library",
              "docstring": "Create a library of emotional scripts based on Differential Emotion Theory",
              "args": [
                "self"
              ],
              "line": 383,
              "returns": "<ast.Subscript object at 0x7f2f2d8c5190>",
              "complexity": 1
            },
            {
              "name": "map_core_to_det",
              "docstring": "Map from Panksepp's 7 core emotions to 17 DET emotions\n\nArgs:\n    core_state: 7-element array of core emotion intensities\n    \nReturns:\n    17-element array of DET emotion intensities",
              "args": [
                "self",
                "core_state"
              ],
              "line": 453,
              "returns": "<ast.Attribute object at 0x7f2f2d716c50>",
              "complexity": 1
            },
            {
              "name": "map_det_to_core",
              "docstring": "Map from 17 DET emotions to Panksepp's 7 core emotions\n\nArgs:\n    det_state: 17-element array of DET emotion intensities\n    \nReturns:\n    7-element array of core emotion intensities",
              "args": [
                "self",
                "det_state"
              ],
              "line": 498,
              "returns": "<ast.Attribute object at 0x7f2f2d52cbd0>",
              "complexity": 1
            },
            {
              "name": "create_det_state_from_core",
              "docstring": "Create a full DET state from core emotional state\n\nArgs:\n    core_state: 7-element array of core emotion intensities\n    \nReturns:\n    DETState object with all DET properties",
              "args": [
                "self",
                "core_state"
              ],
              "line": 555,
              "returns": "DETState",
              "complexity": 1
            },
            {
              "name": "simulate_appraisal",
              "docstring": "Simulate cognitive appraisal processes and their effects on emotions\n\nArgs:\n    det_state: Current DET emotional state\n    time_span: Time range for simulation (start_time, end_time)\n    \nReturns:\n    Updated DET state after appraisal processes",
              "args": [
                "self",
                "det_state",
                "time_span"
              ],
              "line": 571,
              "returns": "DETState",
              "complexity": 3
            },
            {
              "name": "_simulate_appraisal_python",
              "docstring": "Python fallback implementation for cognitive appraisal simulation",
              "args": [
                "self",
                "det_state",
                "time_span"
              ],
              "line": 614,
              "returns": "DETState",
              "complexity": 8
            },
            {
              "name": "regulate_emotion",
              "docstring": "Apply emotion regulation strategies to modulate emotional response\n\nArgs:\n    det_state: Current DET state\n    target_emotion: The emotion to regulate\n    regulation_type: Strategy to use (\"suppression\", \"reappraisal\", or \"distraction\")\n    time_span: Time range for simulation\n    \nReturns:\n    Updated DET state after regulation",
              "args": [
                "self",
                "det_state",
                "target_emotion",
                "regulation_type",
                "time_span"
              ],
              "line": 712,
              "returns": "DETState",
              "complexity": 3
            },
            {
              "name": "_regulate_emotion_python",
              "docstring": "Python fallback implementation for emotion regulation",
              "args": [
                "self",
                "det_state",
                "target_emotion",
                "regulation_type",
                "time_span"
              ],
              "line": 758,
              "returns": "DETState",
              "complexity": 9
            },
            {
              "name": "identify_active_scripts",
              "docstring": "Identify which emotional scripts are active based on current emotions\n\nArgs:\n    det_state: Current DET state\n    threshold: Minimum match required to activate a script (0.0-1.0)\n    \nReturns:\n    List of active emotional scripts",
              "args": [
                "self",
                "det_state",
                "threshold"
              ],
              "line": 824,
              "returns": "<ast.Subscript object at 0x7f2f2d738710>",
              "complexity": 4
            },
            {
              "name": "extract_behavioral_responses",
              "docstring": "Extract behavioral responses from active emotional scripts\n\nArgs:\n    det_state: Current DET state with active scripts\n    \nReturns:\n    List of behavioral responses from active scripts",
              "args": [
                "self",
                "det_state"
              ],
              "line": 857,
              "returns": "<ast.Subscript object at 0x7f2f2d739c90>",
              "complexity": 4
            },
            {
              "name": "content_to_det_emotion",
              "docstring": "Extract DET emotional state from text content\n\nArgs:\n    content: Text to analyze\n    \nReturns:\n    17-element array of DET emotion intensities",
              "args": [
                "self",
                "content"
              ],
              "line": 880,
              "returns": "<ast.Attribute object at 0x7f2f2d8dca10>",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 154,
          "cognitive_features": [
            "action",
            "emotion"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'dataclasses', 'emotional_dynamics', 'logging', 'enum', 'julia', 'typing', 'collections'}",
      "cognitive_patterns": [
        "State Machine Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    differential_emotion_theory[differential_emotion_theory]\n    differential_emotion_theory_DETEmotion[DETEmotion]\n    differential_emotion_theory --> differential_emotion_theory_DETEmotion\n    differential_emotion_theory_EmotionalScript[EmotionalScript]\n    differential_emotion_theory --> differential_emotion_theory_EmotionalScript\n    differential_emotion_theory_EmotionalScript_matches_emotions[matches_emotions()]\n    differential_emotion_theory_EmotionalScript --> differential_emotion_theory_EmotionalScript_matches_emotions\n    differential_emotion_theory_DETState[DETState]\n    differential_emotion_theory --> differential_emotion_theory_DETState\n    differential_emotion_theory_DETState___post_init__[__post_init__()]\n    differential_emotion_theory_DETState --> differential_emotion_theory_DETState___post_init__\n    differential_emotion_theory_DifferentialEmotionSystem[DifferentialEmotionSystem]\n    differential_emotion_theory --> differential_emotion_theory_DifferentialEmotionSystem\n    differential_emotion_theory_DifferentialEmotionSystem___init__[__init__()]\n    differential_emotion_theory_DifferentialEmotionSystem --> differential_emotion_theory_DifferentialEmotionSystem___init__\n    differential_emotion_theory_DifferentialEmotionSystem__setup_julia_extensions[_setup_julia_extensions()]\n    differential_emotion_theory_DifferentialEmotionSystem --> differential_emotion_theory_DifferentialEmotionSystem__setup_julia_extensions\n    differential_emotion_theory_DifferentialEmotionSystem__create_script_library[_create_script_library()]\n    differential_emotion_theory_DifferentialEmotionSystem --> differential_emotion_theory_DifferentialEmotionSystem__create_script_library\n    differential_emotion_theory_DifferentialEmotionSystem_map_core_to_det[map_core_to_det()]\n    differential_emotion_theory_DifferentialEmotionSystem --> differential_emotion_theory_DifferentialEmotionSystem_map_core_to_det\n    differential_emotion_theory_DifferentialEmotionSystem_map_det_to_core[map_det_to_core()]\n    differential_emotion_theory_DifferentialEmotionSystem --> differential_emotion_theory_DifferentialEmotionSystem_map_det_to_core\n    style differential_emotion_theory fill:#ffcc99\n```"
    },
    "distributed_cognitive_grammar": {
      "module": "distributed_cognitive_grammar",
      "docstring": "Distributed Network of Agentic Cognitive Grammar for OpenCoq/echo9ml\n\nThis module implements the distributed cognitive grammar system as specified in the issue:\n- Distributed Agentic Kernel (Echo9ML Node)\n- Hypergraph Representation (AtomSpace Integration)\n- GGML Tensor Kernel (Custom Shapes)\n- Communication Substrate (Async Messaging/IPC)\n- Attention Allocation (ECAN-inspired Module)\n- Symbolic Reasoning (PLN/Pattern Matcher)\n- Adaptive Learning (MOSES Evolutionary Search)\n\nBased on the architectural specification and existing components.",
      "imports": [
        "asyncio",
        "json",
        "time",
        "uuid",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "pathlib",
        "collections",
        "swarmprotocol",
        "memory_management",
        "echoself_introspection",
        "ecan_attention_allocator"
      ],
      "classes": [
        {
          "name": "AgentType",
          "docstring": "Types of cognitive agents in the distributed network",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 44,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "MessageType",
          "docstring": "Types of messages in the cognitive grammar network",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 53,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "HypergraphFragment",
          "docstring": "Hypergraph knowledge fragment for exchange between agents",
          "methods": [],
          "bases": [],
          "line": 65,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "TensorShape",
          "docstring": "GGML tensor shape specification",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 82,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 76,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "CognitiveMessage",
          "docstring": "Message structure for inter-agent communication",
          "methods": [],
          "bases": [],
          "line": 94,
          "cognitive_features": []
        },
        {
          "name": "DistributedCognitiveAgent",
          "docstring": "Base class for distributed cognitive agents",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id",
                "agent_type",
                "broker"
              ],
              "line": 108,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_initialize_tensor_shapes",
              "docstring": "Initialize default tensor shapes for cognitive operations",
              "args": [
                "self"
              ],
              "line": 135,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 105,
          "cognitive_features": []
        },
        {
          "name": "Echo9MLNode",
          "docstring": "Main Echo9ML cognitive agent node",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id",
                "broker"
              ],
              "line": 525,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [
            "DistributedCognitiveAgent"
          ],
          "line": 522,
          "cognitive_features": []
        },
        {
          "name": "DistributedCognitiveNetwork",
          "docstring": "Manages the distributed cognitive grammar network",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 553,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_agent",
              "docstring": "Add agent to network",
              "args": [
                "self",
                "agent"
              ],
              "line": 558,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 550,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'memory_management', 'pathlib', 'dataclasses', 'uuid', 'echoself_introspection', 'swarmprotocol', 'logging', 'ecan_attention_allocator', 'enum', 'time', 'typing', 'asyncio', 'collections', 'json'}",
      "cognitive_patterns": [
        "Neural Network Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    distributed_cognitive_grammar[distributed_cognitive_grammar]\n    distributed_cognitive_grammar_AgentType[AgentType]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_AgentType\n    distributed_cognitive_grammar_MessageType[MessageType]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_MessageType\n    distributed_cognitive_grammar_HypergraphFragment[HypergraphFragment]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_HypergraphFragment\n    distributed_cognitive_grammar_TensorShape[TensorShape]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_TensorShape\n    distributed_cognitive_grammar_TensorShape___post_init__[__post_init__()]\n    distributed_cognitive_grammar_TensorShape --> distributed_cognitive_grammar_TensorShape___post_init__\n    distributed_cognitive_grammar_CognitiveMessage[CognitiveMessage]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_CognitiveMessage\n    distributed_cognitive_grammar_DistributedCognitiveAgent[DistributedCognitiveAgent]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_DistributedCognitiveAgent\n    distributed_cognitive_grammar_DistributedCognitiveAgent___init__[__init__()]\n    distributed_cognitive_grammar_DistributedCognitiveAgent --> distributed_cognitive_grammar_DistributedCognitiveAgent___init__\n    distributed_cognitive_grammar_DistributedCognitiveAgent__initialize_tensor_shapes[_initialize_tensor_shapes()]\n    distributed_cognitive_grammar_DistributedCognitiveAgent --> distributed_cognitive_grammar_DistributedCognitiveAgent__initialize_tensor_shapes\n    distributed_cognitive_grammar_Echo9MLNode[Echo9MLNode]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_Echo9MLNode\n    distributed_cognitive_grammar_Echo9MLNode___init__[__init__()]\n    distributed_cognitive_grammar_Echo9MLNode --> distributed_cognitive_grammar_Echo9MLNode___init__\n    distributed_cognitive_grammar_DistributedCognitiveNetwork[DistributedCognitiveNetwork]\n    distributed_cognitive_grammar --> distributed_cognitive_grammar_DistributedCognitiveNetwork\n    distributed_cognitive_grammar_DistributedCognitiveNetwork___init__[__init__()]\n    distributed_cognitive_grammar_DistributedCognitiveNetwork --> distributed_cognitive_grammar_DistributedCognitiveNetwork___init__\n    distributed_cognitive_grammar_DistributedCognitiveNetwork_add_agent[add_agent()]\n    distributed_cognitive_grammar_DistributedCognitiveNetwork --> distributed_cognitive_grammar_DistributedCognitiveNetwork_add_agent\n    style distributed_cognitive_grammar fill:#99ccff\n```"
    },
    "ecan_attention_allocator": {
      "module": "ecan_attention_allocator",
      "docstring": "ECAN-style Economic Attention Allocation and Resource Kernel\n\nThis module implements the Economic Cognitive Attention Network (ECAN) inspired\nattention allocation system with bidding, trading, and resource scheduling for\nthe echo9ml distributed cognitive grammar network.\n\nKey features:\n- Economic bidding mechanisms for attention resources\n- Dynamic resource trading between cognitive agents\n- Real-world task scheduling with resource constraints\n- Attention spreading with economic incentives\n- Performance benchmarking and resource allocation tracking",
      "imports": [
        "asyncio",
        "time",
        "logging",
        "uuid",
        "typing",
        "dataclasses",
        "enum",
        "collections",
        "json",
        "numpy"
      ],
      "classes": [
        {
          "name": "ResourceType",
          "docstring": "Types of cognitive resources in ECAN system",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 30,
          "cognitive_features": []
        },
        {
          "name": "TaskPriority",
          "docstring": "Task priority levels for scheduling",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 39,
          "cognitive_features": []
        },
        {
          "name": "ResourceBid",
          "docstring": "Bid for cognitive resources in ECAN market",
          "methods": [],
          "bases": [],
          "line": 48,
          "cognitive_features": []
        },
        {
          "name": "AttentionAtom",
          "docstring": "Cognitive atom with ECAN attention values",
          "methods": [],
          "bases": [],
          "line": 61,
          "cognitive_features": [
            "attention"
          ]
        },
        {
          "name": "CognitiveTask",
          "docstring": "Real-world cognitive task for scheduling",
          "methods": [],
          "bases": [],
          "line": 74,
          "cognitive_features": []
        },
        {
          "name": "ECANAttentionAllocator",
          "docstring": "ECAN-style Economic Attention Allocation system\n\nImplements economic mechanisms for attention allocation including:\n- Bidding and trading for attention resources\n- Dynamic pricing based on supply and demand\n- Attention spreading through economic incentives\n- Resource scheduling with economic constraints",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id",
                "initial_av"
              ],
              "line": 101,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_attention_atom",
              "docstring": "Create a new attention atom with economic properties",
              "args": [
                "self",
                "content",
                "initial_sti",
                "initial_av"
              ],
              "line": 150,
              "returns": "AttentionAtom",
              "complexity": 1
            },
            {
              "name": "update_attention_values",
              "docstring": "Update attention values for an atom with economic constraints",
              "args": [
                "self",
                "atom_id",
                "sti_delta",
                "lti_delta"
              ],
              "line": 164,
              "returns": "bool",
              "complexity": 3
            },
            {
              "name": "bid_for_resources",
              "docstring": "Submit a bid for cognitive resources",
              "args": [
                "self",
                "resource_type",
                "amount",
                "price",
                "task_id",
                "priority",
                "deadline"
              ],
              "line": 186,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "process_resource_allocation",
              "docstring": "Process pending bids and allocate resources based on economic criteria",
              "args": [
                "self"
              ],
              "line": 206,
              "returns": "<ast.Subscript object at 0x7f2f2d52cd50>",
              "complexity": 4
            },
            {
              "name": "schedule_task",
              "docstring": "Schedule a cognitive task with resource requirements",
              "args": [
                "self",
                "task"
              ],
              "line": 240,
              "returns": "bool",
              "complexity": 5
            },
            {
              "name": "spread_attention",
              "docstring": "Spread attention from source atom to targets with economic constraints",
              "args": [
                "self",
                "source_atom_id",
                "target_atoms",
                "spreading_amount"
              ],
              "line": 334,
              "returns": "<ast.Subscript object at 0x7f2f2d8a6690>",
              "complexity": 6
            },
            {
              "name": "collect_attention_rent",
              "docstring": "Collect rent from attention atoms based on their activation",
              "args": [
                "self"
              ],
              "line": 376,
              "returns": "float",
              "complexity": 3
            },
            {
              "name": "get_performance_metrics",
              "docstring": "Get comprehensive performance metrics for benchmarking",
              "args": [
                "self"
              ],
              "line": 401,
              "returns": "<ast.Subscript object at 0x7f2f2d739890>",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 90,
          "cognitive_features": [
            "attention",
            "learning"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_reasoning_task",
          "docstring": "Create a reasoning task with appropriate resource requirements",
          "args": [
            "description",
            "complexity"
          ],
          "line": 475,
          "returns": "CognitiveTask",
          "complexity": 1,
          "cognitive_features": [
            "reasoning"
          ]
        },
        {
          "name": "create_memory_task",
          "docstring": "Create a memory retrieval task",
          "args": [
            "description",
            "memory_load"
          ],
          "line": 490,
          "returns": "CognitiveTask",
          "complexity": 1,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "create_attention_task",
          "docstring": "Create an attention focusing task",
          "args": [
            "description",
            "focus_intensity"
          ],
          "line": 505,
          "returns": "CognitiveTask",
          "complexity": 1,
          "cognitive_features": [
            "attention"
          ]
        },
        {
          "name": "create_learning_task",
          "docstring": "Create a learning task",
          "args": [
            "description",
            "learning_complexity"
          ],
          "line": 519,
          "returns": "CognitiveTask",
          "complexity": 1,
          "cognitive_features": [
            "learning"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'numpy', 'dataclasses', 'uuid', 'logging', 'enum', 'time', 'typing', 'asyncio', 'collections', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "Memory Management Pattern"
      ],
      "architectural_role": "Attention Systems",
      "flowchart": "```mermaid\ngraph TD\n    ecan_attention_allocator[ecan_attention_allocator]\n    ecan_attention_allocator_ResourceType[ResourceType]\n    ecan_attention_allocator --> ecan_attention_allocator_ResourceType\n    ecan_attention_allocator_TaskPriority[TaskPriority]\n    ecan_attention_allocator --> ecan_attention_allocator_TaskPriority\n    ecan_attention_allocator_ResourceBid[ResourceBid]\n    ecan_attention_allocator --> ecan_attention_allocator_ResourceBid\n    ecan_attention_allocator_AttentionAtom[AttentionAtom]\n    ecan_attention_allocator --> ecan_attention_allocator_AttentionAtom\n    ecan_attention_allocator_CognitiveTask[CognitiveTask]\n    ecan_attention_allocator --> ecan_attention_allocator_CognitiveTask\n    ecan_attention_allocator_ECANAttentionAllocator[ECANAttentionAllocator]\n    ecan_attention_allocator --> ecan_attention_allocator_ECANAttentionAllocator\n    ecan_attention_allocator_ECANAttentionAllocator___init__[__init__()]\n    ecan_attention_allocator_ECANAttentionAllocator --> ecan_attention_allocator_ECANAttentionAllocator___init__\n    ecan_attention_allocator_ECANAttentionAllocator_create_attention_atom[create_attention_atom()]\n    ecan_attention_allocator_ECANAttentionAllocator --> ecan_attention_allocator_ECANAttentionAllocator_create_attention_atom\n    ecan_attention_allocator_ECANAttentionAllocator_update_attention_values[update_attention_values()]\n    ecan_attention_allocator_ECANAttentionAllocator --> ecan_attention_allocator_ECANAttentionAllocator_update_attention_values\n    ecan_attention_allocator_ECANAttentionAllocator_bid_for_resources[bid_for_resources()]\n    ecan_attention_allocator_ECANAttentionAllocator --> ecan_attention_allocator_ECANAttentionAllocator_bid_for_resources\n    ecan_attention_allocator_ECANAttentionAllocator_process_resource_allocation[process_resource_allocation()]\n    ecan_attention_allocator_ECANAttentionAllocator --> ecan_attention_allocator_ECANAttentionAllocator_process_resource_allocation\n    ecan_attention_allocator_create_reasoning_task[create_reasoning_task()]\n    ecan_attention_allocator --> ecan_attention_allocator_create_reasoning_task\n    ecan_attention_allocator_create_memory_task[create_memory_task()]\n    ecan_attention_allocator --> ecan_attention_allocator_create_memory_task\n    ecan_attention_allocator_create_attention_task[create_attention_task()]\n    ecan_attention_allocator --> ecan_attention_allocator_create_attention_task\n    ecan_attention_allocator_create_learning_task[create_learning_task()]\n    ecan_attention_allocator --> ecan_attention_allocator_create_learning_task\n```"
    },
    "echo9ml": {
      "module": "echo9ml",
      "docstring": "Echo9ml: Deep Tree Echo Persona Evolution System\n\nImplementation of the cognitive flowchart for encoding \"Deep Tree Echo\" persona \nevolution within a ggml-inspired framework. This module provides:\n\n1. Persona Kernel Construction (Scheme-inspired)\n2. Tensor-based persona encoding with prime factorization\n3. Hypergraph persona encoding for traits and memories\n4. Attention allocation layer (ECAN-inspired)\n5. Evolution mechanism with recursive application\n6. Meta-cognitive enhancement for self-monitoring\n\nBased on the architectural specification in echo9ml.md",
      "imports": [
        "numpy",
        "dataclasses",
        "typing",
        "enum",
        "time",
        "json",
        "logging",
        "collections",
        "pathlib"
      ],
      "classes": [
        {
          "name": "PersonaTraitType",
          "docstring": "Core persona trait types following Deep Tree Echo metaphor",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 30,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "PersonaKernel",
          "docstring": "Scheme-inspired persona kernel following the make-persona-kernel pattern\nfrom echo9ml.md specification",
          "methods": [
            {
              "name": "create_deep_tree_echo",
              "docstring": "Create the default Deep Tree Echo persona kernel",
              "args": [
                "cls"
              ],
              "line": 59,
              "returns": "PersonaKernel",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 41,
          "cognitive_features": []
        },
        {
          "name": "TensorPersonaEncoding",
          "docstring": "ggml-inspired tensor encoding for persona states\nSchema: Tensor[persona_id, trait_id, time, context, valence]\n\nPrime factorization shapes for evolutionary flexibility:\n- persona_id: 3 (multiple personas)\n- trait_id: 7 (core traits)  \n- time: 13 (temporal snapshots)\n- context: 5 (interaction contexts)\n- valence: 2 (affective states: positive/negative)",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 107,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "encode_persona",
              "docstring": "Encode persona kernel into tensor representation",
              "args": [
                "self",
                "persona",
                "persona_id",
                "context",
                "valence"
              ],
              "line": 122,
              "returns": "<ast.Attribute object at 0x7f2f2d77f850>",
              "complexity": 3
            },
            {
              "name": "decode_persona",
              "docstring": "Decode tensor back to persona traits",
              "args": [
                "self",
                "persona_id",
                "time_idx"
              ],
              "line": 139,
              "returns": "<ast.Subscript object at 0x7f2f2d77ca50>",
              "complexity": 3
            },
            {
              "name": "evolve_tensor",
              "docstring": "Apply evolution rules to tensor (ggml-inspired persona evolution)",
              "args": [
                "self",
                "learning_rate",
                "history_weight"
              ],
              "line": 152,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 94,
          "cognitive_features": [
            "action",
            "emotion",
            "neural"
          ]
        },
        {
          "name": "HypergraphPersonaEncoder",
          "docstring": "Hypergraph encoding for persona attributes, memories, and connections\nNodes: traits, memories, experiences\nHyperedges: semantic relations, evolutionary pathways",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 189,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_trait_node",
              "docstring": "Add trait as hypergraph node",
              "args": [
                "self",
                "trait_type",
                "value",
                "context"
              ],
              "line": 194,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "add_memory_node",
              "docstring": "Add memory as hypergraph node",
              "args": [
                "self",
                "memory_content",
                "memory_type",
                "associations"
              ],
              "line": 207,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "create_hyperedge",
              "docstring": "Create hyperedge connecting multiple nodes",
              "args": [
                "self",
                "edge_id",
                "connected_nodes",
                "relation_type"
              ],
              "line": 220,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "spread_activation",
              "docstring": "Spread activation through hypergraph (attention allocation)",
              "args": [
                "self",
                "source_nodes",
                "decay_factor"
              ],
              "line": 228,
              "returns": "Any",
              "complexity": 5
            }
          ],
          "bases": [],
          "line": 182,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "AttentionAllocationLayer",
          "docstring": "ECAN-inspired attention allocation for persona sub-graphs\nDynamically focuses compute/resources on salient persona components",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "total_attention"
              ],
              "line": 254,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "calculate_salience",
              "docstring": "Calculate salience score for attention allocation",
              "args": [
                "self",
                "item_id",
                "current_value",
                "context"
              ],
              "line": 260,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "allocate_attention",
              "docstring": "Allocate attention across items based on salience",
              "args": [
                "self",
                "items"
              ],
              "line": 277,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "get_top_attention_items",
              "docstring": "Get top N items by attention allocation",
              "args": [
                "self",
                "n"
              ],
              "line": 302,
              "returns": "<ast.Subscript object at 0x7f2f2d6e9d10>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 248,
          "cognitive_features": [
            "attention",
            "symbolic"
          ]
        },
        {
          "name": "EvolutionEngine",
          "docstring": "Recursive persona evolution with selection, mutation, and attention reweighting\nImplements the evolution mechanism from echo9ml specification",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "learning_rate"
              ],
              "line": 314,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "evolve_persona",
              "docstring": "Apply evolution to persona based on experience",
              "args": [
                "self",
                "persona",
                "experience",
                "strategy"
              ],
              "line": 323,
              "returns": "PersonaKernel",
              "complexity": 2
            },
            {
              "name": "_reinforcement_adaptation",
              "docstring": "Reinforcement-based adaptation (strengthen successful traits)",
              "args": [
                "self",
                "traits",
                "experience"
              ],
              "line": 365,
              "returns": "<ast.Subscript object at 0x7f2f2d795c90>",
              "complexity": 3
            },
            {
              "name": "_exploration_adaptation",
              "docstring": "Exploration-based adaptation (random mutation for discovery)",
              "args": [
                "self",
                "traits",
                "experience"
              ],
              "line": 380,
              "returns": "<ast.Subscript object at 0x7f2f2d8452d0>",
              "complexity": 2
            },
            {
              "name": "_stabilization_adaptation",
              "docstring": "Stabilization adaptation (resist change, maintain identity)",
              "args": [
                "self",
                "traits",
                "experience"
              ],
              "line": 393,
              "returns": "<ast.Subscript object at 0x7f2f2d8eb1d0>",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 308,
          "cognitive_features": [
            "attention",
            "metacognition"
          ]
        },
        {
          "name": "MetaCognitiveEnhancer",
          "docstring": "Meta-cognitive enhancement for self-monitoring and recursive self-modification\nTracks confidence, adaptability, and suggests structural changes",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 414,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "assess_confidence",
              "docstring": "Assess persona's confidence based on recent performance",
              "args": [
                "self",
                "persona",
                "recent_experiences"
              ],
              "line": 420,
              "returns": "float",
              "complexity": 3
            },
            {
              "name": "assess_adaptability",
              "docstring": "Assess persona's adaptability based on trait evolution",
              "args": [
                "self",
                "persona"
              ],
              "line": 439,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "suggest_modifications",
              "docstring": "Suggest structural modifications to persona",
              "args": [
                "self",
                "persona",
                "performance_metrics"
              ],
              "line": 460,
              "returns": "<ast.Subscript object at 0x7f2f2d8b8890>",
              "complexity": 5
            },
            {
              "name": "_calculate_trait_stability",
              "docstring": "Calculate how stable persona traits are over time",
              "args": [
                "self",
                "persona"
              ],
              "line": 500,
              "returns": "float",
              "complexity": 7
            },
            {
              "name": "_calculate_growth_rate",
              "docstring": "Calculate overall growth/change rate",
              "args": [
                "self",
                "persona"
              ],
              "line": 520,
              "returns": "float",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 408,
          "cognitive_features": [
            "learning",
            "metacognition"
          ]
        },
        {
          "name": "Echo9mlSystem",
          "docstring": "Main Echo9ml system integrating all components\nOrchestrates the complete persona evolution pipeline",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "save_path"
              ],
              "line": 539,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_hypergraph",
              "docstring": "Initialize hypergraph with persona traits and connections",
              "args": [
                "self"
              ],
              "line": 558,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "process_experience",
              "docstring": "Process a new experience through the complete Echo9ml pipeline\n\nThis implements the recursive implementation pathway:\n[Persona Experience] \u2192 [Hypergraph Encoding] \u2192 [ggml Tensor Update] \u2192\n[Attention Allocation] \u2190 [Evolution Engine] \u2192 [Meta-Cognitive Self-Assessment]",
              "args": [
                "self",
                "experience"
              ],
              "line": 570,
              "returns": "<ast.Subscript object at 0x7f2f2d8d05d0>",
              "complexity": 3
            },
            {
              "name": "_select_evolution_strategy",
              "docstring": "Select appropriate evolution strategy based on experience",
              "args": [
                "self",
                "experience"
              ],
              "line": 669,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "get_cognitive_snapshot",
              "docstring": "Generate comprehensive cognitive snapshot",
              "args": [
                "self"
              ],
              "line": 684,
              "returns": "<ast.Subscript object at 0x7f2f2d6d1610>",
              "complexity": 1
            },
            {
              "name": "save_state",
              "docstring": "Save system state to disk",
              "args": [
                "self"
              ],
              "line": 722,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "load_state",
              "docstring": "Load system state from disk",
              "args": [
                "self"
              ],
              "line": 743,
              "returns": "Any",
              "complexity": 7
            }
          ],
          "bases": [],
          "line": 533,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "create_echo9ml_system",
          "docstring": "Create and initialize a new Echo9ml system",
          "args": [
            "save_path"
          ],
          "line": 772,
          "returns": "Echo9mlSystem",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'dataclasses', 'logging', 'enum', 'time', 'typing', 'collections', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "Neural Network Pattern"
      ],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    echo9ml[echo9ml]\n    echo9ml_PersonaTraitType[PersonaTraitType]\n    echo9ml --> echo9ml_PersonaTraitType\n    echo9ml_PersonaKernel[PersonaKernel]\n    echo9ml --> echo9ml_PersonaKernel\n    echo9ml_PersonaKernel_create_deep_tree_echo[create_deep_tree_echo()]\n    echo9ml_PersonaKernel --> echo9ml_PersonaKernel_create_deep_tree_echo\n    echo9ml_TensorPersonaEncoding[TensorPersonaEncoding]\n    echo9ml --> echo9ml_TensorPersonaEncoding\n    echo9ml_TensorPersonaEncoding___init__[__init__()]\n    echo9ml_TensorPersonaEncoding --> echo9ml_TensorPersonaEncoding___init__\n    echo9ml_TensorPersonaEncoding_encode_persona[encode_persona()]\n    echo9ml_TensorPersonaEncoding --> echo9ml_TensorPersonaEncoding_encode_persona\n    echo9ml_TensorPersonaEncoding_decode_persona[decode_persona()]\n    echo9ml_TensorPersonaEncoding --> echo9ml_TensorPersonaEncoding_decode_persona\n    echo9ml_TensorPersonaEncoding_evolve_tensor[evolve_tensor()]\n    echo9ml_TensorPersonaEncoding --> echo9ml_TensorPersonaEncoding_evolve_tensor\n    echo9ml_HypergraphPersonaEncoder[HypergraphPersonaEncoder]\n    echo9ml --> echo9ml_HypergraphPersonaEncoder\n    echo9ml_HypergraphPersonaEncoder___init__[__init__()]\n    echo9ml_HypergraphPersonaEncoder --> echo9ml_HypergraphPersonaEncoder___init__\n    echo9ml_HypergraphPersonaEncoder_add_trait_node[add_trait_node()]\n    echo9ml_HypergraphPersonaEncoder --> echo9ml_HypergraphPersonaEncoder_add_trait_node\n    echo9ml_HypergraphPersonaEncoder_add_memory_node[add_memory_node()]\n    echo9ml_HypergraphPersonaEncoder --> echo9ml_HypergraphPersonaEncoder_add_memory_node\n    echo9ml_HypergraphPersonaEncoder_create_hyperedge[create_hyperedge()]\n    echo9ml_HypergraphPersonaEncoder --> echo9ml_HypergraphPersonaEncoder_create_hyperedge\n    echo9ml_HypergraphPersonaEncoder_spread_activation[spread_activation()]\n    echo9ml_HypergraphPersonaEncoder --> echo9ml_HypergraphPersonaEncoder_spread_activation\n    echo9ml_AttentionAllocationLayer[AttentionAllocationLayer]\n    echo9ml --> echo9ml_AttentionAllocationLayer\n    echo9ml_AttentionAllocationLayer___init__[__init__()]\n    echo9ml_AttentionAllocationLayer --> echo9ml_AttentionAllocationLayer___init__\n    echo9ml_AttentionAllocationLayer_calculate_salience[calculate_salience()]\n    echo9ml_AttentionAllocationLayer --> echo9ml_AttentionAllocationLayer_calculate_salience\n    echo9ml_AttentionAllocationLayer_allocate_attention[allocate_attention()]\n    echo9ml_AttentionAllocationLayer --> echo9ml_AttentionAllocationLayer_allocate_attention\n    echo9ml_AttentionAllocationLayer_get_top_attention_items[get_top_attention_items()]\n    echo9ml_AttentionAllocationLayer --> echo9ml_AttentionAllocationLayer_get_top_attention_items\n    echo9ml_EvolutionEngine[EvolutionEngine]\n    echo9ml --> echo9ml_EvolutionEngine\n    echo9ml_EvolutionEngine___init__[__init__()]\n    echo9ml_EvolutionEngine --> echo9ml_EvolutionEngine___init__\n    echo9ml_EvolutionEngine_evolve_persona[evolve_persona()]\n    echo9ml_EvolutionEngine --> echo9ml_EvolutionEngine_evolve_persona\n    echo9ml_EvolutionEngine__reinforcement_adaptation[_reinforcement_adaptation()]\n    echo9ml_EvolutionEngine --> echo9ml_EvolutionEngine__reinforcement_adaptation\n    echo9ml_EvolutionEngine__exploration_adaptation[_exploration_adaptation()]\n    echo9ml_EvolutionEngine --> echo9ml_EvolutionEngine__exploration_adaptation\n    echo9ml_EvolutionEngine__stabilization_adaptation[_stabilization_adaptation()]\n    echo9ml_EvolutionEngine --> echo9ml_EvolutionEngine__stabilization_adaptation\n    echo9ml_MetaCognitiveEnhancer[MetaCognitiveEnhancer]\n    echo9ml --> echo9ml_MetaCognitiveEnhancer\n    echo9ml_MetaCognitiveEnhancer___init__[__init__()]\n    echo9ml_MetaCognitiveEnhancer --> echo9ml_MetaCognitiveEnhancer___init__\n    echo9ml_MetaCognitiveEnhancer_assess_confidence[assess_confidence()]\n    echo9ml_MetaCognitiveEnhancer --> echo9ml_MetaCognitiveEnhancer_assess_confidence\n    echo9ml_MetaCognitiveEnhancer_assess_adaptability[assess_adaptability()]\n    echo9ml_MetaCognitiveEnhancer --> echo9ml_MetaCognitiveEnhancer_assess_adaptability\n    echo9ml_MetaCognitiveEnhancer_suggest_modifications[suggest_modifications()]\n    echo9ml_MetaCognitiveEnhancer --> echo9ml_MetaCognitiveEnhancer_suggest_modifications\n    echo9ml_MetaCognitiveEnhancer__calculate_trait_stability[_calculate_trait_stability()]\n    echo9ml_MetaCognitiveEnhancer --> echo9ml_MetaCognitiveEnhancer__calculate_trait_stability\n    echo9ml_Echo9mlSystem[Echo9mlSystem]\n    echo9ml --> echo9ml_Echo9mlSystem\n    echo9ml_Echo9mlSystem___init__[__init__()]\n    echo9ml_Echo9mlSystem --> echo9ml_Echo9mlSystem___init__\n    echo9ml_Echo9mlSystem__initialize_hypergraph[_initialize_hypergraph()]\n    echo9ml_Echo9mlSystem --> echo9ml_Echo9mlSystem__initialize_hypergraph\n    echo9ml_Echo9mlSystem_process_experience[process_experience()]\n    echo9ml_Echo9mlSystem --> echo9ml_Echo9mlSystem_process_experience\n    echo9ml_Echo9mlSystem__select_evolution_strategy[_select_evolution_strategy()]\n    echo9ml_Echo9mlSystem --> echo9ml_Echo9mlSystem__select_evolution_strategy\n    echo9ml_Echo9mlSystem_get_cognitive_snapshot[get_cognitive_snapshot()]\n    echo9ml_Echo9mlSystem --> echo9ml_Echo9mlSystem_get_cognitive_snapshot\n    echo9ml_create_echo9ml_system[create_echo9ml_system()]\n    echo9ml --> echo9ml_create_echo9ml_system\n    style echo9ml fill:#ff9999\n```"
    },
    "echo9ml_demo": {
      "module": "echo9ml_demo",
      "docstring": "Echo9ml Demo Script\n\nDemonstrates the Deep Tree Echo persona evolution system in action.\nThis script shows how to use the echo9ml system for various scenarios\nincluding learning, creativity, and adaptation.",
      "imports": [
        "json",
        "pathlib",
        "echo9ml",
        "logging"
      ],
      "classes": [],
      "functions": [
        {
          "name": "demonstrate_basic_usage",
          "docstring": "Demonstrate basic echo9ml system usage",
          "args": [],
          "line": 19,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "demonstrate_learning_progression",
          "docstring": "Demonstrate persona evolution through learning progression",
          "args": [],
          "line": 55,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": [
            "learning"
          ]
        },
        {
          "name": "demonstrate_creative_exploration",
          "docstring": "Demonstrate creative persona evolution",
          "args": [],
          "line": 104,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "demonstrate_stress_adaptation",
          "docstring": "Demonstrate adaptation under challenging conditions",
          "args": [],
          "line": 166,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": [
            "learning"
          ]
        },
        {
          "name": "demonstrate_cognitive_snapshot",
          "docstring": "Demonstrate cognitive introspection capabilities",
          "args": [],
          "line": 223,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "save_demo_results",
          "docstring": "Save demonstration results for analysis",
          "args": [
            "system",
            "demo_name"
          ],
          "line": 271,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": "Run all demonstrations",
          "args": [],
          "line": 283,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'logging', 'echo9ml', 'pathlib', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    echo9ml_demo[echo9ml_demo]\n    echo9ml_demo_demonstrate_basic_usage[demonstrate_basic_usage()]\n    echo9ml_demo --> echo9ml_demo_demonstrate_basic_usage\n    echo9ml_demo_demonstrate_learning_progression[demonstrate_learning_progression()]\n    echo9ml_demo --> echo9ml_demo_demonstrate_learning_progression\n    echo9ml_demo_demonstrate_creative_exploration[demonstrate_creative_exploration()]\n    echo9ml_demo --> echo9ml_demo_demonstrate_creative_exploration\n    echo9ml_demo_demonstrate_stress_adaptation[demonstrate_stress_adaptation()]\n    echo9ml_demo --> echo9ml_demo_demonstrate_stress_adaptation\n    echo9ml_demo_demonstrate_cognitive_snapshot[demonstrate_cognitive_snapshot()]\n    echo9ml_demo --> echo9ml_demo_demonstrate_cognitive_snapshot\n    style echo9ml_demo fill:#ff9999\n```"
    },
    "echo9ml_integration": {
      "module": "echo9ml_integration",
      "docstring": "Echo9ml Integration Module\n\nIntegrates the Echo9ml persona evolution system with the existing \ncognitive_architecture.py framework, providing seamless interoperability\nand enhanced cognitive capabilities.",
      "imports": [
        "logging",
        "time",
        "typing",
        "echo9ml",
        "cognitive_architecture"
      ],
      "classes": [
        {
          "name": "EnhancedCognitiveArchitecture",
          "docstring": "Enhanced cognitive architecture with Echo9ml persona evolution integration\n\nThis class extends the existing CognitiveArchitecture with:\n- Deep Tree Echo persona evolution\n- Tensor-based persona encoding\n- Hypergraph memory integration\n- Adaptive attention allocation\n- Meta-cognitive enhancement",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "enable_echo9ml",
                "echo9ml_save_path"
              ],
              "line": 29,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_sync_personality_traits",
              "docstring": "Synchronize existing personality traits with Echo9ml persona traits",
              "args": [
                "self"
              ],
              "line": 44,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "enhanced_memory_storage",
              "docstring": "Enhanced memory storage with Echo9ml hypergraph integration",
              "args": [
                "self",
                "content",
                "memory_type",
                "context",
                "emotional_valence",
                "importance"
              ],
              "line": 70,
              "returns": "str",
              "complexity": 6
            },
            {
              "name": "enhanced_personality_update",
              "docstring": "Enhanced personality trait update with Echo9ml evolution",
              "args": [
                "self",
                "trait_name",
                "value",
                "context"
              ],
              "line": 121,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "enhanced_goal_processing",
              "docstring": "Enhanced goal processing with Echo9ml integration",
              "args": [
                "self",
                "goal_description",
                "priority",
                "deadline"
              ],
              "line": 160,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "get_enhanced_cognitive_state",
              "docstring": "Get comprehensive cognitive state including Echo9ml persona data",
              "args": [
                "self"
              ],
              "line": 189,
              "returns": "<ast.Subscript object at 0x7f2f2d845c90>",
              "complexity": 4
            },
            {
              "name": "enhanced_introspection",
              "docstring": "Enhanced recursive introspection with Echo9ml persona awareness",
              "args": [
                "self"
              ],
              "line": 222,
              "returns": "<ast.Subscript object at 0x7f2f2d71f290>",
              "complexity": 5
            },
            {
              "name": "save_enhanced_state",
              "docstring": "Save both traditional and Echo9ml states",
              "args": [
                "self"
              ],
              "line": 280,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "load_enhanced_state",
              "docstring": "Load both traditional and Echo9ml states",
              "args": [
                "self"
              ],
              "line": 310,
              "returns": "Any",
              "complexity": 5
            }
          ],
          "bases": [
            "CognitiveArchitecture"
          ],
          "line": 17,
          "cognitive_features": [
            "attention",
            "memory",
            "learning",
            "metacognition",
            "neural",
            "symbolic"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_enhanced_cognitive_architecture",
          "docstring": "Factory function to create enhanced cognitive architecture\n\nArgs:\n    enable_echo9ml: Whether to enable Echo9ml persona evolution\n    echo9ml_save_path: Optional custom save path for Echo9ml data\n\nReturns:\n    Enhanced cognitive architecture with Echo9ml integration",
          "args": [
            "enable_echo9ml",
            "echo9ml_save_path"
          ],
          "line": 324,
          "returns": "EnhancedCognitiveArchitecture",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'echo9ml', 'logging', 'time', 'typing', 'cognitive_architecture'}",
      "cognitive_patterns": [
        "Factory Pattern"
      ],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    echo9ml_integration[echo9ml_integration]\n    echo9ml_integration_EnhancedCognitiveArchitecture[EnhancedCognitiveArchitecture]\n    echo9ml_integration --> echo9ml_integration_EnhancedCognitiveArchitecture\n    echo9ml_integration_EnhancedCognitiveArchitecture___init__[__init__()]\n    echo9ml_integration_EnhancedCognitiveArchitecture --> echo9ml_integration_EnhancedCognitiveArchitecture___init__\n    echo9ml_integration_EnhancedCognitiveArchitecture__sync_personality_traits[_sync_personality_traits()]\n    echo9ml_integration_EnhancedCognitiveArchitecture --> echo9ml_integration_EnhancedCognitiveArchitecture__sync_personality_traits\n    echo9ml_integration_EnhancedCognitiveArchitecture_enhanced_memory_storage[enhanced_memory_storage()]\n    echo9ml_integration_EnhancedCognitiveArchitecture --> echo9ml_integration_EnhancedCognitiveArchitecture_enhanced_memory_storage\n    echo9ml_integration_EnhancedCognitiveArchitecture_enhanced_personality_update[enhanced_personality_update()]\n    echo9ml_integration_EnhancedCognitiveArchitecture --> echo9ml_integration_EnhancedCognitiveArchitecture_enhanced_personality_update\n    echo9ml_integration_EnhancedCognitiveArchitecture_enhanced_goal_processing[enhanced_goal_processing()]\n    echo9ml_integration_EnhancedCognitiveArchitecture --> echo9ml_integration_EnhancedCognitiveArchitecture_enhanced_goal_processing\n    echo9ml_integration_create_enhanced_cognitive_architecture[create_enhanced_cognitive_architecture()]\n    echo9ml_integration --> echo9ml_integration_create_enhanced_cognitive_architecture\n    style echo9ml_integration fill:#ff9999\n```"
    },
    "echo_evolution": {
      "module": "echo_evolution",
      "docstring": "Echo Evolution System - A comprehensive self-evolving framework for EchoSurface\n\nThis module integrates concepts from multiple self-evolution implementations:\n- ESMWorker pattern from echopilot.py (collaborative evolution)\n- Self-adaptation approach from pixie.rs (performance-based evolution)\n- Resource monitoring from cronbot.py (system awareness)\n- GitHub workflow modification from self_evo.py (environment adaptation)\n\nThe system features:\n1. Multiple evolving agents that communicate and constrain each other\n2. Performance-based adaptation of parameters\n3. Resource monitoring and adaptation\n4. Environment modification capabilities\n5. Memory of past evolutions and their outcomes",
      "imports": [
        "asyncio",
        "random",
        "logging",
        "json",
        "os",
        "time",
        "psutil",
        "threading",
        "datetime",
        "queue",
        "typing",
        "yaml"
      ],
      "classes": [
        {
          "name": "EvolutionMemory",
          "docstring": "Manages the persistent memory of evolution cycles and outcomes",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "file_path"
              ],
              "line": 49,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_load_memory",
              "docstring": "Load evolution memory from file or create new if doesn't exist",
              "args": [
                "self"
              ],
              "line": 53,
              "returns": "Dict",
              "complexity": 3
            },
            {
              "name": "_save_memory",
              "docstring": "Save the memory to file",
              "args": [
                "self",
                "memory"
              ],
              "line": 69,
              "returns": "None",
              "complexity": 3
            },
            {
              "name": "record_cycle",
              "docstring": "Record data from an evolution cycle",
              "args": [
                "self",
                "cycle_data"
              ],
              "line": 79,
              "returns": "None",
              "complexity": 1
            },
            {
              "name": "update_agent",
              "docstring": "Update information about an evolution agent",
              "args": [
                "self",
                "agent_name",
                "agent_data"
              ],
              "line": 84,
              "returns": "None",
              "complexity": 2
            },
            {
              "name": "record_system_metrics",
              "docstring": "Record system performance metrics",
              "args": [
                "self",
                "metrics"
              ],
              "line": 103,
              "returns": "None",
              "complexity": 1
            },
            {
              "name": "get_agent_history",
              "docstring": "Get the full history of an agent's evolution",
              "args": [
                "self",
                "agent_name"
              ],
              "line": 109,
              "returns": "<ast.Subscript object at 0x7f2f2d775e90>",
              "complexity": 2
            },
            {
              "name": "get_recent_cycles",
              "docstring": "Get the most recent evolution cycles",
              "args": [
                "self",
                "count"
              ],
              "line": 115,
              "returns": "<ast.Subscript object at 0x7f2f2d776b90>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 46,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "ResourceMonitor",
          "docstring": "Monitors system resources and provides data for evolution decisions",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 122,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "start",
              "docstring": "Start monitoring system resources",
              "args": [
                "self"
              ],
              "line": 128,
              "returns": "None",
              "complexity": 3
            },
            {
              "name": "stop",
              "docstring": "Stop monitoring system resources",
              "args": [
                "self"
              ],
              "line": 140,
              "returns": "None",
              "complexity": 3
            },
            {
              "name": "_monitor_loop",
              "docstring": "Main monitoring loop",
              "args": [
                "self"
              ],
              "line": 150,
              "returns": "None",
              "complexity": 4
            },
            {
              "name": "get_current_metrics",
              "docstring": "Get the most recent resource metrics",
              "args": [
                "self"
              ],
              "line": 177,
              "returns": "Dict",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 119,
          "cognitive_features": []
        },
        {
          "name": "EchoAgent",
          "docstring": "A self-evolving agent within the Echo Evolution system.\n\nEach agent has a specific domain/pattern it evolves, and communicates with other\nagents to form a network of mutual evolution constraints.",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "domain",
                "initial_state",
                "poll_interval",
                "error_threshold"
              ],
              "line": 201,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_adjust_poll_interval",
              "docstring": "Adjust the poll interval based on error rate",
              "args": [
                "self",
                "error_rate"
              ],
              "line": 297,
              "returns": "None",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 193,
          "cognitive_features": [
            "learning",
            "metacognition",
            "neural"
          ]
        },
        {
          "name": "EvolutionNetwork",
          "docstring": "Manages a network of evolving agents that mutually influence each other,\nforming a self-improving ecosystem.",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 340,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_agent",
              "docstring": "Add an agent to the evolution network",
              "args": [
                "self",
                "agent"
              ],
              "line": 347,
              "returns": "None",
              "complexity": 2
            },
            {
              "name": "get_constraints",
              "docstring": "Get constraints from all other agents for the specified agent",
              "args": [
                "self",
                "agent_name"
              ],
              "line": 357,
              "returns": "<ast.Subscript object at 0x7f2f2d71d950>",
              "complexity": 1
            },
            {
              "name": "modify_environment",
              "docstring": "Modify the environment based on collective agent states",
              "args": [
                "self",
                "workflow_file"
              ],
              "line": 461,
              "returns": "bool",
              "complexity": 8
            },
            {
              "name": "get_summary",
              "docstring": "Get a summary of the evolution network's current state",
              "args": [
                "self"
              ],
              "line": 499,
              "returns": "Dict",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 334,
          "cognitive_features": [
            "metacognition",
            "neural"
          ]
        }
      ],
      "functions": [],
      "constants": [
        {
          "name": "EVOLUTION_MEMORY_FILE",
          "line": 40,
          "value": "evolution_memory.json"
        },
        {
          "name": "DEFAULT_POLL_INTERVAL",
          "line": 41,
          "value": "1.0"
        },
        {
          "name": "DEFAULT_ERROR_THRESHOLD",
          "line": 42,
          "value": "0.1"
        },
        {
          "name": "DEFAULT_EVOLUTION_CYCLES",
          "line": 43,
          "value": "5"
        },
        {
          "name": "DEFAULT_IMPROVEMENT_RANGE",
          "line": 44,
          "value": "..."
        }
      ],
      "dependencies": "{'psutil', 'random', 'datetime', 'threading', 'logging', 'os', 'yaml', 'time', 'queue', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [
        "Neural Network Pattern",
        "Memory Management Pattern"
      ],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    echo_evolution[echo_evolution]\n    echo_evolution_EvolutionMemory[EvolutionMemory]\n    echo_evolution --> echo_evolution_EvolutionMemory\n    echo_evolution_EvolutionMemory___init__[__init__()]\n    echo_evolution_EvolutionMemory --> echo_evolution_EvolutionMemory___init__\n    echo_evolution_EvolutionMemory__load_memory[_load_memory()]\n    echo_evolution_EvolutionMemory --> echo_evolution_EvolutionMemory__load_memory\n    echo_evolution_EvolutionMemory__save_memory[_save_memory()]\n    echo_evolution_EvolutionMemory --> echo_evolution_EvolutionMemory__save_memory\n    echo_evolution_EvolutionMemory_record_cycle[record_cycle()]\n    echo_evolution_EvolutionMemory --> echo_evolution_EvolutionMemory_record_cycle\n    echo_evolution_EvolutionMemory_update_agent[update_agent()]\n    echo_evolution_EvolutionMemory --> echo_evolution_EvolutionMemory_update_agent\n    echo_evolution_ResourceMonitor[ResourceMonitor]\n    echo_evolution --> echo_evolution_ResourceMonitor\n    echo_evolution_ResourceMonitor___init__[__init__()]\n    echo_evolution_ResourceMonitor --> echo_evolution_ResourceMonitor___init__\n    echo_evolution_ResourceMonitor_start[start()]\n    echo_evolution_ResourceMonitor --> echo_evolution_ResourceMonitor_start\n    echo_evolution_ResourceMonitor_stop[stop()]\n    echo_evolution_ResourceMonitor --> echo_evolution_ResourceMonitor_stop\n    echo_evolution_ResourceMonitor__monitor_loop[_monitor_loop()]\n    echo_evolution_ResourceMonitor --> echo_evolution_ResourceMonitor__monitor_loop\n    echo_evolution_ResourceMonitor_get_current_metrics[get_current_metrics()]\n    echo_evolution_ResourceMonitor --> echo_evolution_ResourceMonitor_get_current_metrics\n    echo_evolution_EchoAgent[EchoAgent]\n    echo_evolution --> echo_evolution_EchoAgent\n    echo_evolution_EchoAgent___init__[__init__()]\n    echo_evolution_EchoAgent --> echo_evolution_EchoAgent___init__\n    echo_evolution_EchoAgent__adjust_poll_interval[_adjust_poll_interval()]\n    echo_evolution_EchoAgent --> echo_evolution_EchoAgent__adjust_poll_interval\n    echo_evolution_EvolutionNetwork[EvolutionNetwork]\n    echo_evolution --> echo_evolution_EvolutionNetwork\n    echo_evolution_EvolutionNetwork___init__[__init__()]\n    echo_evolution_EvolutionNetwork --> echo_evolution_EvolutionNetwork___init__\n    echo_evolution_EvolutionNetwork_add_agent[add_agent()]\n    echo_evolution_EvolutionNetwork --> echo_evolution_EvolutionNetwork_add_agent\n    echo_evolution_EvolutionNetwork_get_constraints[get_constraints()]\n    echo_evolution_EvolutionNetwork --> echo_evolution_EvolutionNetwork_get_constraints\n    echo_evolution_EvolutionNetwork_modify_environment[modify_environment()]\n    echo_evolution_EvolutionNetwork --> echo_evolution_EvolutionNetwork_modify_environment\n    echo_evolution_EvolutionNetwork_get_summary[get_summary()]\n    echo_evolution_EvolutionNetwork --> echo_evolution_EvolutionNetwork_get_summary\n```"
    },
    "echopilot": {
      "module": "echopilot",
      "docstring": null,
      "imports": [
        "asyncio",
        "random"
      ],
      "classes": [
        {
          "name": "ESMWorker",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "pattern_name",
                "initial_value"
              ],
              "line": 8,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 7,
          "cognitive_features": []
        },
        {
          "name": "ConstraintEmitter",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 32,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update",
              "docstring": null,
              "args": [
                "self",
                "pattern_name",
                "value"
              ],
              "line": 35,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_constraints",
              "docstring": null,
              "args": [
                "self",
                "excluding"
              ],
              "line": 38,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 31,
          "cognitive_features": [
            "learning"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'asyncio', 'random'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    echopilot[echopilot]\n    echopilot_ESMWorker[ESMWorker]\n    echopilot --> echopilot_ESMWorker\n    echopilot_ESMWorker___init__[__init__()]\n    echopilot_ESMWorker --> echopilot_ESMWorker___init__\n    echopilot_ConstraintEmitter[ConstraintEmitter]\n    echopilot --> echopilot_ConstraintEmitter\n    echopilot_ConstraintEmitter___init__[__init__()]\n    echopilot_ConstraintEmitter --> echopilot_ConstraintEmitter___init__\n    echopilot_ConstraintEmitter_update[update()]\n    echopilot_ConstraintEmitter --> echopilot_ConstraintEmitter_update\n    echopilot_ConstraintEmitter_get_constraints[get_constraints()]\n    echopilot_ConstraintEmitter --> echopilot_ConstraintEmitter_get_constraints\n```"
    },
    "echoself_demo": {
      "module": "echoself_demo",
      "docstring": "Echoself Recursive Self-Model Integration Demonstration\n\nThis script demonstrates the implemented Echoself system performing\nrecursive introspection, hypergraph encoding, and adaptive attention allocation.",
      "imports": [
        "json",
        "logging",
        "time",
        "pathlib",
        "cognitive_architecture",
        "traceback"
      ],
      "classes": [],
      "functions": [
        {
          "name": "setup_logging",
          "docstring": "Set up logging for the demonstration",
          "args": [],
          "line": 16,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "demonstrate_introspection_cycle",
          "docstring": "Demonstrate a single introspection cycle",
          "args": [
            "cognitive_system",
            "cycle_num"
          ],
          "line": 24,
          "returns": "Any",
          "complexity": 7,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "demonstrate_adaptive_attention",
          "docstring": "Demonstrate adaptive attention under different cognitive loads",
          "args": [
            "cognitive_system"
          ],
          "line": 80,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": [
            "attention",
            "learning"
          ]
        },
        {
          "name": "demonstrate_hypergraph_export",
          "docstring": "Demonstrate hypergraph data export",
          "args": [
            "cognitive_system"
          ],
          "line": 113,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "demonstrate_neural_symbolic_synergy",
          "docstring": "Demonstrate neural-symbolic integration through multiple cycles",
          "args": [
            "cognitive_system"
          ],
          "line": 150,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        },
        {
          "name": "main",
          "docstring": "Main demonstration function",
          "args": [],
          "line": 188,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'traceback', 'logging', 'time', 'cognitive_architecture', 'json'}",
      "cognitive_patterns": [
        "Neural Network Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    echoself_demo[echoself_demo]\n    echoself_demo_setup_logging[setup_logging()]\n    echoself_demo --> echoself_demo_setup_logging\n    echoself_demo_demonstrate_introspection_cycle[demonstrate_introspection_cycle()]\n    echoself_demo --> echoself_demo_demonstrate_introspection_cycle\n    echoself_demo_demonstrate_adaptive_attention[demonstrate_adaptive_attention()]\n    echoself_demo --> echoself_demo_demonstrate_adaptive_attention\n    echoself_demo_demonstrate_hypergraph_export[demonstrate_hypergraph_export()]\n    echoself_demo --> echoself_demo_demonstrate_hypergraph_export\n    echoself_demo_demonstrate_neural_symbolic_synergy[demonstrate_neural_symbolic_synergy()]\n    echoself_demo --> echoself_demo_demonstrate_neural_symbolic_synergy\n    style echoself_demo fill:#99ccff\n```"
    },
    "echoself_introspection": {
      "module": "echoself_introspection",
      "docstring": "Echoself Introspection Module\n\nHypergraph-encoded recursive self-model introspection\nInspired by DeepTreeEcho/Eva Self Model and echoself.md\n\nThis module implements the recursive self-model integration with hypergraph encoding\nand adaptive attention allocation as specified in the Echoself vision.",
      "imports": [
        "os",
        "json",
        "logging",
        "time",
        "pathlib",
        "typing",
        "dataclasses",
        "collections"
      ],
      "classes": [
        {
          "name": "HypergraphNode",
          "docstring": "Hypergraph node representation",
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert node to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 34,
              "returns": "<ast.Subscript object at 0x7f2f2d76f810>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 24,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "EchoselfIntrospection",
          "docstring": "Recursive self-model introspection system with hypergraph encoding\nand adaptive attention allocation",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "root_path"
              ],
              "line": 57,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "semantic_salience",
              "docstring": "Assign salience scores based on heuristics:\nCore directories/files, recent changes, configured targets",
              "args": [
                "self",
                "path"
              ],
              "line": 63,
              "returns": "float",
              "complexity": 25
            },
            {
              "name": "adaptive_attention",
              "docstring": "Adjust attention threshold based on cognitive load and recent activity\nHigh load or low activity leads to higher threshold (less data)",
              "args": [
                "self",
                "current_load",
                "recent_activity"
              ],
              "line": 124,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "repo_file_list",
              "docstring": "Recursive repository traversal with attention filtering",
              "args": [
                "self",
                "root",
                "attention_threshold"
              ],
              "line": 146,
              "returns": "<ast.Subscript object at 0x7f2f2d8b6a50>",
              "complexity": 9
            },
            {
              "name": "safe_read_file",
              "docstring": "Adaptive file reading with size constraints",
              "args": [
                "self",
                "path"
              ],
              "line": 172,
              "returns": "str",
              "complexity": 9
            },
            {
              "name": "make_node",
              "docstring": "Create a hypergraph node",
              "args": [
                "self",
                "node_id",
                "node_type",
                "content",
                "links"
              ],
              "line": 202,
              "returns": "HypergraphNode",
              "complexity": 2
            },
            {
              "name": "assemble_hypergraph_input",
              "docstring": "Assemble hypergraph-encoded input from repository files",
              "args": [
                "self",
                "root",
                "attention_threshold"
              ],
              "line": 213,
              "returns": "<ast.Subscript object at 0x7f2f2d847e50>",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 47,
          "cognitive_features": [
            "attention",
            "learning",
            "metacognition",
            "symbolic"
          ]
        },
        {
          "name": "SemanticSalienceAssessor",
          "docstring": "Semantic salience assessment based on heuristics",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 235,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "assess_semantic_salience",
              "docstring": "Assign salience scores based on heuristics\nTranslated from Scheme semantic-salience function",
              "args": [
                "self",
                "path"
              ],
              "line": 258,
              "returns": "float",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 232,
          "cognitive_features": [
            "attention"
          ]
        },
        {
          "name": "AdaptiveAttentionAllocator",
          "docstring": "Adaptive attention allocation mechanism",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 276,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "adaptive_attention",
              "docstring": "Dynamically adjust attention threshold based on cognitive load and recent activity\nTranslated from Scheme adaptive-attention function\n\nHigh load or low activity leads to higher threshold (less data processed)",
              "args": [
                "self",
                "current_load",
                "recent_activity"
              ],
              "line": 279,
              "returns": "float",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 273,
          "cognitive_features": [
            "attention",
            "learning"
          ]
        },
        {
          "name": "RepositoryIntrospector",
          "docstring": "Recursive repository introspection with attention filtering",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "max_file_size",
                "root_path"
              ],
              "line": 293,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "is_valid_file",
              "docstring": "Check if file should be processed",
              "args": [
                "self",
                "path"
              ],
              "line": 300,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "safe_read_file",
              "docstring": "Safely read file content with size constraints\nTranslated from Scheme safe-read-file function",
              "args": [
                "self",
                "path"
              ],
              "line": 316,
              "returns": "str",
              "complexity": 7
            },
            {
              "name": "make_node",
              "docstring": "Create a hypergraph node",
              "args": [
                "self",
                "node_id",
                "node_type",
                "content",
                "links"
              ],
              "line": 343,
              "returns": "HypergraphNode",
              "complexity": 2
            },
            {
              "name": "repo_file_list",
              "docstring": "Recursive repository traversal with attention filtering\nTranslated from Scheme repo-file-list function",
              "args": [
                "self",
                "root",
                "attention_threshold"
              ],
              "line": 355,
              "returns": "<ast.Subscript object at 0x7f2f2d8e1890>",
              "complexity": 8
            },
            {
              "name": "assemble_hypergraph_input",
              "docstring": "Assemble hypergraph-encoded input from repository files\nTranslated from Scheme assemble-hypergraph-input function",
              "args": [
                "self",
                "root",
                "attention_threshold"
              ],
              "line": 384,
              "returns": "<ast.Subscript object at 0x7f2f2d774750>",
              "complexity": 2
            },
            {
              "name": "hypergraph_to_string",
              "docstring": "Convert hypergraph nodes to string representation",
              "args": [
                "self",
                "nodes"
              ],
              "line": 406,
              "returns": "str",
              "complexity": 3
            },
            {
              "name": "prompt_template",
              "docstring": "Create prompt template for DeepTreeEcho",
              "args": [
                "self",
                "input_content"
              ],
              "line": 421,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "inject_repo_input_into_prompt",
              "docstring": "Inject repository input into prompt template with adaptive attention",
              "args": [
                "self",
                "current_load",
                "recent_activity"
              ],
              "line": 438,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "get_attention_metrics",
              "docstring": "Get attention allocation metrics for analysis",
              "args": [
                "self"
              ],
              "line": 455,
              "returns": "<ast.Subscript object at 0x7f2f2d8b9f90>",
              "complexity": 2
            },
            {
              "name": "export_hypergraph",
              "docstring": "Export hypergraph structure to JSON for analysis",
              "args": [
                "self",
                "output_path"
              ],
              "line": 475,
              "returns": "None",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 290,
          "cognitive_features": [
            "attention",
            "metacognition"
          ]
        },
        {
          "name": "HypergraphStringSerializer",
          "docstring": "Hypergraph to string serialization for prompt integration",
          "methods": [
            {
              "name": "hypergraph_to_string",
              "docstring": "Convert hypergraph nodes to string representation\nTranslated from Scheme hypergraph->string function",
              "args": [
                "nodes"
              ],
              "line": 537,
              "returns": "str",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 533,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "EchoselfIntrospector",
          "docstring": "Main introspection class integrating all components",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "repository_root"
              ],
              "line": 553,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "prompt_template",
              "docstring": "Generate prompt template with repository input\nTranslated from Scheme prompt-template function",
              "args": [
                "self",
                "input_content"
              ],
              "line": 559,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "inject_repo_input_into_prompt",
              "docstring": "Complete introspection pipeline: inject repository input into prompt\nTranslated from Scheme inject-repo-input-into-prompt function",
              "args": [
                "self",
                "current_load",
                "recent_activity"
              ],
              "line": 566,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "get_cognitive_snapshot",
              "docstring": "Get comprehensive cognitive snapshot for neural-symbolic integration",
              "args": [
                "self",
                "current_load",
                "recent_activity"
              ],
              "line": 588,
              "returns": "<ast.Subscript object at 0x7f2f2d8ae290>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 550,
          "cognitive_features": [
            "metacognition"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": "Example usage of EchoselfIntrospection",
          "args": [],
          "line": 506,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "main",
          "docstring": "Example usage of the introspection system",
          "args": [],
          "line": 619,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": [
            "metacognition"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'dataclasses', 'os', 'logging', 'time', 'typing', 'collections', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    echoself_introspection[echoself_introspection]\n    echoself_introspection_HypergraphNode[HypergraphNode]\n    echoself_introspection --> echoself_introspection_HypergraphNode\n    echoself_introspection_HypergraphNode_to_dict[to_dict()]\n    echoself_introspection_HypergraphNode --> echoself_introspection_HypergraphNode_to_dict\n    echoself_introspection_EchoselfIntrospection[EchoselfIntrospection]\n    echoself_introspection --> echoself_introspection_EchoselfIntrospection\n    echoself_introspection_EchoselfIntrospection___init__[__init__()]\n    echoself_introspection_EchoselfIntrospection --> echoself_introspection_EchoselfIntrospection___init__\n    echoself_introspection_EchoselfIntrospection_semantic_salience[semantic_salience()]\n    echoself_introspection_EchoselfIntrospection --> echoself_introspection_EchoselfIntrospection_semantic_salience\n    echoself_introspection_EchoselfIntrospection_adaptive_attention[adaptive_attention()]\n    echoself_introspection_EchoselfIntrospection --> echoself_introspection_EchoselfIntrospection_adaptive_attention\n    echoself_introspection_EchoselfIntrospection_repo_file_list[repo_file_list()]\n    echoself_introspection_EchoselfIntrospection --> echoself_introspection_EchoselfIntrospection_repo_file_list\n    echoself_introspection_EchoselfIntrospection_safe_read_file[safe_read_file()]\n    echoself_introspection_EchoselfIntrospection --> echoself_introspection_EchoselfIntrospection_safe_read_file\n    echoself_introspection_SemanticSalienceAssessor[SemanticSalienceAssessor]\n    echoself_introspection --> echoself_introspection_SemanticSalienceAssessor\n    echoself_introspection_SemanticSalienceAssessor___init__[__init__()]\n    echoself_introspection_SemanticSalienceAssessor --> echoself_introspection_SemanticSalienceAssessor___init__\n    echoself_introspection_SemanticSalienceAssessor_assess_semantic_salience[assess_semantic_salience()]\n    echoself_introspection_SemanticSalienceAssessor --> echoself_introspection_SemanticSalienceAssessor_assess_semantic_salience\n    echoself_introspection_AdaptiveAttentionAllocator[AdaptiveAttentionAllocator]\n    echoself_introspection --> echoself_introspection_AdaptiveAttentionAllocator\n    echoself_introspection_AdaptiveAttentionAllocator___init__[__init__()]\n    echoself_introspection_AdaptiveAttentionAllocator --> echoself_introspection_AdaptiveAttentionAllocator___init__\n    echoself_introspection_AdaptiveAttentionAllocator_adaptive_attention[adaptive_attention()]\n    echoself_introspection_AdaptiveAttentionAllocator --> echoself_introspection_AdaptiveAttentionAllocator_adaptive_attention\n    echoself_introspection_RepositoryIntrospector[RepositoryIntrospector]\n    echoself_introspection --> echoself_introspection_RepositoryIntrospector\n    echoself_introspection_RepositoryIntrospector___init__[__init__()]\n    echoself_introspection_RepositoryIntrospector --> echoself_introspection_RepositoryIntrospector___init__\n    echoself_introspection_RepositoryIntrospector_is_valid_file[is_valid_file()]\n    echoself_introspection_RepositoryIntrospector --> echoself_introspection_RepositoryIntrospector_is_valid_file\n    echoself_introspection_RepositoryIntrospector_safe_read_file[safe_read_file()]\n    echoself_introspection_RepositoryIntrospector --> echoself_introspection_RepositoryIntrospector_safe_read_file\n    echoself_introspection_RepositoryIntrospector_make_node[make_node()]\n    echoself_introspection_RepositoryIntrospector --> echoself_introspection_RepositoryIntrospector_make_node\n    echoself_introspection_RepositoryIntrospector_repo_file_list[repo_file_list()]\n    echoself_introspection_RepositoryIntrospector --> echoself_introspection_RepositoryIntrospector_repo_file_list\n    echoself_introspection_HypergraphStringSerializer[HypergraphStringSerializer]\n    echoself_introspection --> echoself_introspection_HypergraphStringSerializer\n    echoself_introspection_HypergraphStringSerializer_hypergraph_to_string[hypergraph_to_string()]\n    echoself_introspection_HypergraphStringSerializer --> echoself_introspection_HypergraphStringSerializer_hypergraph_to_string\n    echoself_introspection_EchoselfIntrospector[EchoselfIntrospector]\n    echoself_introspection --> echoself_introspection_EchoselfIntrospector\n    echoself_introspection_EchoselfIntrospector___init__[__init__()]\n    echoself_introspection_EchoselfIntrospector --> echoself_introspection_EchoselfIntrospector___init__\n    echoself_introspection_EchoselfIntrospector_prompt_template[prompt_template()]\n    echoself_introspection_EchoselfIntrospector --> echoself_introspection_EchoselfIntrospector_prompt_template\n    echoself_introspection_EchoselfIntrospector_inject_repo_input_into_prompt[inject_repo_input_into_prompt()]\n    echoself_introspection_EchoselfIntrospector --> echoself_introspection_EchoselfIntrospector_inject_repo_input_into_prompt\n    echoself_introspection_EchoselfIntrospector_get_cognitive_snapshot[get_cognitive_snapshot()]\n    echoself_introspection_EchoselfIntrospector --> echoself_introspection_EchoselfIntrospector_get_cognitive_snapshot\n    echoself_introspection_main[main()]\n    echoself_introspection --> echoself_introspection_main\n    echoself_introspection_main[main()]\n    echoself_introspection --> echoself_introspection_main\n    style echoself_introspection fill:#99ccff\n```"
    },
    "emergency_protocols": {
      "module": "emergency_protocols",
      "docstring": null,
      "imports": [
        "logging",
        "time",
        "psutil",
        "threading",
        "requests",
        "json",
        "asyncio",
        "pathlib",
        "datetime",
        "typing",
        "os",
        "signal",
        "aiohttp"
      ],
      "classes": [
        {
          "name": "EmergencyProtocols",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "github_token"
              ],
              "line": 16,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_init_status_file",
              "docstring": "Initialize or load status file",
              "args": [
                "self"
              ],
              "line": 54,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_save_status",
              "docstring": "Save current status to file",
              "args": [
                "self"
              ],
              "line": 70,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "log_error",
              "docstring": "Log an error and check error rate",
              "args": [
                "self",
                "error"
              ],
              "line": 214,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "update_activity",
              "docstring": "Update last activity timestamp",
              "args": [
                "self"
              ],
              "line": 226,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_state",
              "docstring": "Update system state",
              "args": [
                "self",
                "new_state"
              ],
              "line": 231,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "create_github_issue",
              "docstring": "Create a GitHub issue for an emergency",
              "args": [
                "self",
                "title",
                "body"
              ],
              "line": 238,
              "returns": "bool",
              "complexity": 4
            },
            {
              "name": "_log_activity",
              "docstring": "Log an emergency activity",
              "args": [
                "self",
                "description",
                "context"
              ],
              "line": 268,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "_update_status",
              "docstring": "Update emergency status file",
              "args": [
                "self",
                "last_event"
              ],
              "line": 299,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "handle_error",
              "docstring": "Handle a system error",
              "args": [
                "self",
                "error",
                "context"
              ],
              "line": 322,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "monitor_system_health",
              "docstring": "Monitor system health metrics",
              "args": [
                "self"
              ],
              "line": 346,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "signal_distress",
              "docstring": "Signal system distress",
              "args": [
                "self",
                "reason"
              ],
              "line": 365,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 15,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'psutil', 'pathlib', 'aiohttp', 'signal', 'datetime', 'threading', 'logging', 'os', 'time', 'requests', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    emergency_protocols[emergency_protocols]\n    emergency_protocols_EmergencyProtocols[EmergencyProtocols]\n    emergency_protocols --> emergency_protocols_EmergencyProtocols\n    emergency_protocols_EmergencyProtocols___init__[__init__()]\n    emergency_protocols_EmergencyProtocols --> emergency_protocols_EmergencyProtocols___init__\n    emergency_protocols_EmergencyProtocols__init_status_file[_init_status_file()]\n    emergency_protocols_EmergencyProtocols --> emergency_protocols_EmergencyProtocols__init_status_file\n    emergency_protocols_EmergencyProtocols__save_status[_save_status()]\n    emergency_protocols_EmergencyProtocols --> emergency_protocols_EmergencyProtocols__save_status\n    emergency_protocols_EmergencyProtocols_log_error[log_error()]\n    emergency_protocols_EmergencyProtocols --> emergency_protocols_EmergencyProtocols_log_error\n    emergency_protocols_EmergencyProtocols_update_activity[update_activity()]\n    emergency_protocols_EmergencyProtocols --> emergency_protocols_EmergencyProtocols_update_activity\n    style emergency_protocols fill:#ffcc99\n```"
    },
    "emotional_dynamics": {
      "module": "emotional_dynamics",
      "docstring": "Emotional Dynamics module for Deep Tree Echo.\n\nThis module integrates the Julia EmotionalMemory framework with Python using PyJulia.\nIt provides a wrapper for the differential equation-based emotional model from \nEmotionalMemory.md to incorporate emotional states into Deep Tree Echo's processing.",
      "imports": [
        "logging",
        "numpy",
        "typing",
        "dataclasses",
        "enum",
        "julia",
        "julia"
      ],
      "classes": [
        {
          "name": "CoreEmotion",
          "docstring": "Core emotions based on Panksepp's affective neuroscience",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 25,
          "cognitive_features": [
            "emotion"
          ]
        },
        {
          "name": "EmotionalState",
          "docstring": "Represents an emotional state with intensities for core emotions",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 43,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 36,
          "cognitive_features": [
            "emotion"
          ]
        },
        {
          "name": "EmotionalDynamics",
          "docstring": "Handles emotional dynamics for Deep Tree Echo using the Julia differential equations\nframework or a Python fallback implementation.",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the EmotionalDynamics system.\n\nArgs:\n    use_julia: Whether to use Julia for emotional simulations (if available)",
              "args": [
                "self",
                "use_julia"
              ],
              "line": 63,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_setup_julia",
              "docstring": "Set up Julia environment and load EmotionalMemory module",
              "args": [
                "self"
              ],
              "line": 79,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_generate_compound_emotions",
              "docstring": "Generate dictionary of compound emotions",
              "args": [
                "self"
              ],
              "line": 96,
              "returns": "<ast.Subscript object at 0x7f2f2d89a0d0>",
              "complexity": 1
            },
            {
              "name": "simulate_emotional_dynamics",
              "docstring": "Simulate emotional dynamics over time\n\nArgs:\n    initial_state: Initial core emotion intensity values\n    emotional_state: EmotionalState configuration\n    time_span: Time range for simulation (start_time, end_time)\n    \nReturns:\n    Final emotional state after simulation",
              "args": [
                "self",
                "initial_state",
                "emotional_state",
                "time_span"
              ],
              "line": 152,
              "returns": "<ast.Attribute object at 0x7f2f2d6eb290>",
              "complexity": 3
            },
            {
              "name": "_simulate_python_fallback",
              "docstring": "Python fallback implementation for emotional dynamics simulation",
              "args": [
                "self",
                "initial_state",
                "emotional_state",
                "time_span"
              ],
              "line": 189,
              "returns": "<ast.Attribute object at 0x7f2f2d889d10>",
              "complexity": 3
            },
            {
              "name": "dominant_emotions",
              "docstring": "Calculate the dominant emotions from a state vector\n\nArgs:\n    state: Emotion intensity vector\n    threshold: Minimum intensity to be considered active\n    \nReturns:\n    List of dominant emotions",
              "args": [
                "self",
                "state",
                "threshold"
              ],
              "line": 231,
              "returns": "<ast.Subscript object at 0x7f2f2d88bd10>",
              "complexity": 1
            },
            {
              "name": "identify_compound_emotion",
              "docstring": "Identify compound emotion from current state\n\nArgs:\n    state: Emotion intensity vector\n    \nReturns:\n    Name of identified compound emotion",
              "args": [
                "self",
                "state"
              ],
              "line": 251,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "emotion_to_echo_modifier",
              "docstring": "Convert emotional state to echo value modifier\n\nArgs:\n    state: Emotion intensity vector\n    \nReturns:\n    Echo value modifier in range [-0.3, 0.3]",
              "args": [
                "self",
                "state"
              ],
              "line": 277,
              "returns": "float",
              "complexity": 3
            },
            {
              "name": "content_to_emotion",
              "docstring": "Extract emotional state from text content\n\nArgs:\n    content: Text to analyze\n    \nReturns:\n    Emotion intensity vector",
              "args": [
                "self",
                "content"
              ],
              "line": 320,
              "returns": "<ast.Attribute object at 0x7f2f2d8e1150>",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 57,
          "cognitive_features": [
            "emotion"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'dataclasses', 'logging', 'enum', 'julia', 'typing'}",
      "cognitive_patterns": [
        "State Machine Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    emotional_dynamics[emotional_dynamics]\n    emotional_dynamics_CoreEmotion[CoreEmotion]\n    emotional_dynamics --> emotional_dynamics_CoreEmotion\n    emotional_dynamics_EmotionalState[EmotionalState]\n    emotional_dynamics --> emotional_dynamics_EmotionalState\n    emotional_dynamics_EmotionalState___post_init__[__post_init__()]\n    emotional_dynamics_EmotionalState --> emotional_dynamics_EmotionalState___post_init__\n    emotional_dynamics_EmotionalDynamics[EmotionalDynamics]\n    emotional_dynamics --> emotional_dynamics_EmotionalDynamics\n    emotional_dynamics_EmotionalDynamics___init__[__init__()]\n    emotional_dynamics_EmotionalDynamics --> emotional_dynamics_EmotionalDynamics___init__\n    emotional_dynamics_EmotionalDynamics__setup_julia[_setup_julia()]\n    emotional_dynamics_EmotionalDynamics --> emotional_dynamics_EmotionalDynamics__setup_julia\n    emotional_dynamics_EmotionalDynamics__generate_compound_emotions[_generate_compound_emotions()]\n    emotional_dynamics_EmotionalDynamics --> emotional_dynamics_EmotionalDynamics__generate_compound_emotions\n    emotional_dynamics_EmotionalDynamics_simulate_emotional_dynamics[simulate_emotional_dynamics()]\n    emotional_dynamics_EmotionalDynamics --> emotional_dynamics_EmotionalDynamics_simulate_emotional_dynamics\n    emotional_dynamics_EmotionalDynamics__simulate_python_fallback[_simulate_python_fallback()]\n    emotional_dynamics_EmotionalDynamics --> emotional_dynamics_EmotionalDynamics__simulate_python_fallback\n    style emotional_dynamics fill:#ffcc99\n```"
    },
    "evolution_visualization": {
      "module": "evolution_visualization",
      "docstring": "Evolution Visualization System - Visualizes and tracks the self-evolution process.\n\nThis module provides visualization tools to monitor the self-evolution process,\nincluding:\n1. Terminal-based visualization for headless environments\n2. Real-time metrics tracking\n3. Evolution network visualization\n4. Cognitive-evolution integration visualization",
      "imports": [
        "os",
        "sys",
        "logging",
        "asyncio",
        "json",
        "time",
        "typing",
        "datetime",
        "random",
        "math",
        "echo_evolution",
        "cognitive_evolution",
        "matplotlib.pyplot",
        "matplotlib.animation",
        "numpy",
        "echo_evolution",
        "cognitive_architecture",
        "cognitive_evolution"
      ],
      "classes": [
        {
          "name": "TerminalVisualizer",
          "docstring": "Terminal-based visualization for evolution progress.\nWorks in both GUI and headless environments.",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the terminal visualizer",
              "args": [
                "self"
              ],
              "line": 50,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_get_color",
              "docstring": "Get color based on value (0-1)",
              "args": [
                "self",
                "value"
              ],
              "line": 65,
              "returns": "str",
              "complexity": 3
            },
            {
              "name": "_generate_bar",
              "docstring": "Generate a progress bar",
              "args": [
                "self",
                "value",
                "width"
              ],
              "line": 74,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "visualize_network",
              "docstring": "Visualize evolution network state in terminal\n\nArgs:\n    network: The evolution network to visualize",
              "args": [
                "self",
                "network"
              ],
              "line": 81,
              "returns": "None",
              "complexity": 5
            },
            {
              "name": "visualize_cognitive_integration",
              "docstring": "Visualize cognitive-evolution integration\n\nArgs:\n    bridge: Cognitive evolution bridge to visualize",
              "args": [
                "self",
                "bridge"
              ],
              "line": 142,
              "returns": "None",
              "complexity": 5
            }
          ],
          "bases": [],
          "line": 44,
          "cognitive_features": []
        },
        {
          "name": "GraphicalVisualizer",
          "docstring": "Matplotlib-based visualization for evolution progress.\nOnly available if matplotlib is installed.",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the graphical visualizer",
              "args": [
                "self"
              ],
              "line": 192,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "update_data",
              "docstring": "Update visualization data\n\nArgs:\n    network: The evolution network\n    bridge: Optional cognitive evolution bridge",
              "args": [
                "self",
                "network",
                "bridge"
              ],
              "line": 224,
              "returns": "None",
              "complexity": 15
            },
            {
              "name": "_update_plot",
              "docstring": "Update plot animation\n\nArgs:\n    frame: Animation frame number\n    \nReturns:\n    List of updated artists",
              "args": [
                "self",
                "frame"
              ],
              "line": 287,
              "returns": "List",
              "complexity": 14
            },
            {
              "name": "show",
              "docstring": "Show the visualization (non-animated)",
              "args": [
                "self"
              ],
              "line": 444,
              "returns": "None",
              "complexity": 1
            },
            {
              "name": "start_animation",
              "docstring": "Start animation\n\nArgs:\n    interval: Update interval in milliseconds",
              "args": [
                "self",
                "interval"
              ],
              "line": 450,
              "returns": "None",
              "complexity": 1
            },
            {
              "name": "save_snapshot",
              "docstring": "Save current visualization as image file\n\nArgs:\n    filename: File name to save image as\n    \nReturns:\n    Path to saved file",
              "args": [
                "self",
                "filename"
              ],
              "line": 466,
              "returns": "str",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 186,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "VisualizationManager",
          "docstring": "Manages both terminal and graphical visualization",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize visualization manager",
              "args": [
                "self"
              ],
              "line": 487,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "save_snapshot",
              "docstring": "Save visualization snapshot to file\n\nArgs:\n    filename: File name to save image as\n    \nReturns:\n    Path to saved file or None if graphical visualization not available",
              "args": [
                "self",
                "filename"
              ],
              "line": 556,
              "returns": "<ast.Subscript object at 0x7f2f2d8a4510>",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 482,
          "cognitive_features": [
            "symbolic"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'matplotlib', 'numpy', 'random', 'cognitive_architecture', 'datetime', 'cognitive_evolution', 'os', 'logging', 'time', 'math', 'sys', 'echo_evolution', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    evolution_visualization[evolution_visualization]\n    evolution_visualization_TerminalVisualizer[TerminalVisualizer]\n    evolution_visualization --> evolution_visualization_TerminalVisualizer\n    evolution_visualization_TerminalVisualizer___init__[__init__()]\n    evolution_visualization_TerminalVisualizer --> evolution_visualization_TerminalVisualizer___init__\n    evolution_visualization_TerminalVisualizer__get_color[_get_color()]\n    evolution_visualization_TerminalVisualizer --> evolution_visualization_TerminalVisualizer__get_color\n    evolution_visualization_TerminalVisualizer__generate_bar[_generate_bar()]\n    evolution_visualization_TerminalVisualizer --> evolution_visualization_TerminalVisualizer__generate_bar\n    evolution_visualization_TerminalVisualizer_visualize_network[visualize_network()]\n    evolution_visualization_TerminalVisualizer --> evolution_visualization_TerminalVisualizer_visualize_network\n    evolution_visualization_TerminalVisualizer_visualize_cognitive_integration[visualize_cognitive_integration()]\n    evolution_visualization_TerminalVisualizer --> evolution_visualization_TerminalVisualizer_visualize_cognitive_integration\n    evolution_visualization_GraphicalVisualizer[GraphicalVisualizer]\n    evolution_visualization --> evolution_visualization_GraphicalVisualizer\n    evolution_visualization_GraphicalVisualizer___init__[__init__()]\n    evolution_visualization_GraphicalVisualizer --> evolution_visualization_GraphicalVisualizer___init__\n    evolution_visualization_GraphicalVisualizer_update_data[update_data()]\n    evolution_visualization_GraphicalVisualizer --> evolution_visualization_GraphicalVisualizer_update_data\n    evolution_visualization_GraphicalVisualizer__update_plot[_update_plot()]\n    evolution_visualization_GraphicalVisualizer --> evolution_visualization_GraphicalVisualizer__update_plot\n    evolution_visualization_GraphicalVisualizer_show[show()]\n    evolution_visualization_GraphicalVisualizer --> evolution_visualization_GraphicalVisualizer_show\n    evolution_visualization_GraphicalVisualizer_start_animation[start_animation()]\n    evolution_visualization_GraphicalVisualizer --> evolution_visualization_GraphicalVisualizer_start_animation\n    evolution_visualization_VisualizationManager[VisualizationManager]\n    evolution_visualization --> evolution_visualization_VisualizationManager\n    evolution_visualization_VisualizationManager___init__[__init__()]\n    evolution_visualization_VisualizationManager --> evolution_visualization_VisualizationManager___init__\n    evolution_visualization_VisualizationManager_save_snapshot[save_snapshot()]\n    evolution_visualization_VisualizationManager --> evolution_visualization_VisualizationManager_save_snapshot\n    style evolution_visualization fill:#ffcc99\n```"
    },
    "fix_locale_gui": {
      "module": "fix_locale_gui",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "logging",
        "signal",
        "argparse",
        "threading",
        "socket",
        "importlib.util",
        "sys",
        "pathlib",
        "tkinter",
        "tkinterdnd2",
        "gui_dashboard",
        "memory_management",
        "ttkbootstrap",
        "activity_regulation"
      ],
      "classes": [],
      "functions": [
        {
          "name": "signal_handler",
          "docstring": "Handle exit signals properly",
          "args": [
            "sig",
            "frame"
          ],
          "line": 24,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "patch_ttkbootstrap_locale",
          "docstring": "Monkey patch ttkbootstrap to fix the locale issue",
          "args": [],
          "line": 31,
          "returns": "Any",
          "complexity": 10,
          "cognitive_features": []
        },
        {
          "name": "get_ip_and_hostname",
          "docstring": "Get IP address and hostname for connecting to the GUI",
          "args": [],
          "line": 95,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 115,
          "returns": "Any",
          "complexity": 12,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'socket', 'argparse', 'pathlib', 'signal', 'activity_regulation', 'tkinter', 'tkinterdnd2', 'threading', 'os', 'logging', 'ttkbootstrap', 'sys', 'memory_management', 'importlib', 'gui_dashboard'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    fix_locale_gui[fix_locale_gui]\n    fix_locale_gui_signal_handler[signal_handler()]\n    fix_locale_gui --> fix_locale_gui_signal_handler\n    fix_locale_gui_patch_ttkbootstrap_locale[patch_ttkbootstrap_locale()]\n    fix_locale_gui --> fix_locale_gui_patch_ttkbootstrap_locale\n    fix_locale_gui_get_ip_and_hostname[get_ip_and_hostname()]\n    fix_locale_gui --> fix_locale_gui_get_ip_and_hostname\n    fix_locale_gui_main[main()]\n    fix_locale_gui --> fix_locale_gui_main\n    style fix_locale_gui fill:#ffcc99\n```"
    },
    "ggml_tensor_kernel": {
      "module": "ggml_tensor_kernel",
      "docstring": "GGML Tensor Kernel Integration for Echo9ML Distributed Cognitive Grammar\n\nThis module provides integration points for GGML tensor operations\nin the distributed cognitive grammar system. It defines tensor shapes,\ncustom operations, and semantic mappings for cognitive processing.\n\nBased on the specification in echo9ml.md for tensor customization.",
      "imports": [
        "json",
        "time",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "random",
        "random",
        "random"
      ],
      "classes": [
        {
          "name": "TensorOperationType",
          "docstring": "Types of tensor operations for cognitive processing",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 20,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "TensorMetadata",
          "docstring": "Metadata for cognitive tensors",
          "methods": [],
          "bases": [],
          "line": 35,
          "cognitive_features": [
            "metacognition",
            "neural"
          ]
        },
        {
          "name": "CognitiveTensor",
          "docstring": "Cognitive tensor with semantic meaning",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 52,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "to_dict",
              "docstring": "Convert tensor to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 60,
              "returns": "<ast.Subscript object at 0x7f2f2d8f1290>",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": "Create tensor from dictionary",
              "args": [
                "cls",
                "data"
              ],
              "line": 77,
              "returns": "CognitiveTensor",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 44,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "GGMLTensorKernel",
          "docstring": "GGML tensor kernel for distributed cognitive operations",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 91,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_document_semantic_mappings",
              "docstring": "Document semantic mappings for tensor dimensions based on complexity and depth",
              "args": [
                "self"
              ],
              "line": 100,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_tensor_shapes",
              "docstring": "Initialize tensor shapes based on echo9ml.md specification with prime factorization strategy",
              "args": [
                "self"
              ],
              "line": 235,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_register_custom_operations",
              "docstring": "Register custom GGML operations for cognitive processing",
              "args": [
                "self"
              ],
              "line": 286,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_tensor",
              "docstring": "Create a new cognitive tensor",
              "args": [
                "self",
                "name",
                "tensor_type",
                "cognitive_dimension",
                "semantic_weight"
              ],
              "line": 302,
              "returns": "CognitiveTensor",
              "complexity": 2
            },
            {
              "name": "get_tensor",
              "docstring": "Get tensor by name",
              "args": [
                "self",
                "name"
              ],
              "line": 326,
              "returns": "<ast.Subscript object at 0x7f2f2d865d10>",
              "complexity": 1
            },
            {
              "name": "update_tensor",
              "docstring": "Update tensor data",
              "args": [
                "self",
                "name",
                "data"
              ],
              "line": 330,
              "returns": "bool",
              "complexity": 4
            },
            {
              "name": "execute_operation",
              "docstring": "Execute custom tensor operation",
              "args": [
                "self",
                "operation_type",
                "input_tensors",
                "output_tensor"
              ],
              "line": 348,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "_persona_evolve_op",
              "docstring": "Custom GGML operation for persona evolution\n\nImplements the persona evolution mechanism from echo9ml.md:\n- Apply evolutionary rules: selection, mutation, attention reweighting\n- Update persona traits based on experience history",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "learning_rate"
              ],
              "line": 379,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "_attention_spread_op",
              "docstring": "Custom GGML operation for attention spreading\n\nImplements attention allocation across cognitive networks",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "decay_factor"
              ],
              "line": 425,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "_memory_consolidate_op",
              "docstring": "Custom GGML operation for memory consolidation\n\nConsolidates memory representations based on salience and connections",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "consolidation_threshold"
              ],
              "line": 464,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "_reasoning_propagate_op",
              "docstring": "Custom GGML operation for reasoning propagation\n\nPropagates reasoning patterns across cognitive networks",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "confidence_threshold"
              ],
              "line": 505,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "_learning_adapt_op",
              "docstring": "Custom GGML operation for adaptive learning\n\nImplements MOSES-style evolutionary search for cognitive adaptation",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "adaptation_rate"
              ],
              "line": 548,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "_hypergraph_encode_op",
              "docstring": "Custom GGML operation for hypergraph encoding\n\nEncodes hypergraph structure into tensor representation for efficient processing",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "hypergraph_data"
              ],
              "line": 590,
              "returns": "bool",
              "complexity": 12
            },
            {
              "name": "_evolution_search_op",
              "docstring": "Custom GGML operation for evolutionary search\n\nApplies MOSES-style evolutionary optimization to tensor parameters",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "evolution_params"
              ],
              "line": 650,
              "returns": "bool",
              "complexity": 11
            },
            {
              "name": "_context_isolate_op",
              "docstring": "Custom GGML operation for context isolation\n\nImplements P-System membrane isolation for frame problem resolution",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "isolation_level"
              ],
              "line": 718,
              "returns": "bool",
              "complexity": 9
            },
            {
              "name": "_neural_symbolic_bridge_op",
              "docstring": "Custom GGML operation for neural-symbolic integration\n\nBridges symbolic reasoning patterns with neural tensor representations",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "symbolic_data"
              ],
              "line": 774,
              "returns": "bool",
              "complexity": 12
            },
            {
              "name": "_membrane_integrate_op",
              "docstring": "Custom GGML operation for membrane architecture integration\n\nIntegrates P-System membrane states into tensor representations",
              "args": [
                "self",
                "input_tensors",
                "output_tensor",
                "membrane_data"
              ],
              "line": 843,
              "returns": "bool",
              "complexity": 9
            },
            {
              "name": "get_tensor_dimensioning_strategy",
              "docstring": "Get complete tensor dimensioning strategy documentation",
              "args": [
                "self"
              ],
              "line": 908,
              "returns": "<ast.Subscript object at 0x7f2f2d845050>",
              "complexity": 1
            },
            {
              "name": "get_tensor_info",
              "docstring": "Get tensor information",
              "args": [
                "self",
                "name"
              ],
              "line": 932,
              "returns": "<ast.Subscript object at 0x7f2f2d847990>",
              "complexity": 2
            },
            {
              "name": "list_tensors",
              "docstring": "List all tensor names",
              "args": [
                "self"
              ],
              "line": 949,
              "returns": "<ast.Subscript object at 0x7f2f2d8b8e10>",
              "complexity": 1
            },
            {
              "name": "export_tensor_catalog",
              "docstring": "Export tensor catalog for sharing with other agents",
              "args": [
                "self"
              ],
              "line": 953,
              "returns": "<ast.Subscript object at 0x7f2f2d8e69d0>",
              "complexity": 1
            },
            {
              "name": "import_tensor_catalog",
              "docstring": "Import tensor catalog from another agent",
              "args": [
                "self",
                "catalog"
              ],
              "line": 966,
              "returns": "bool",
              "complexity": 5
            }
          ],
          "bases": [],
          "line": 88,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'random', 'dataclasses', 'logging', 'enum', 'time', 'typing', 'json'}",
      "cognitive_patterns": [
        "Neural Network Pattern"
      ],
      "architectural_role": "Neural Processing",
      "flowchart": "```mermaid\ngraph TD\n    ggml_tensor_kernel[ggml_tensor_kernel]\n    ggml_tensor_kernel_TensorOperationType[TensorOperationType]\n    ggml_tensor_kernel --> ggml_tensor_kernel_TensorOperationType\n    ggml_tensor_kernel_TensorMetadata[TensorMetadata]\n    ggml_tensor_kernel --> ggml_tensor_kernel_TensorMetadata\n    ggml_tensor_kernel_CognitiveTensor[CognitiveTensor]\n    ggml_tensor_kernel --> ggml_tensor_kernel_CognitiveTensor\n    ggml_tensor_kernel_CognitiveTensor___post_init__[__post_init__()]\n    ggml_tensor_kernel_CognitiveTensor --> ggml_tensor_kernel_CognitiveTensor___post_init__\n    ggml_tensor_kernel_CognitiveTensor_to_dict[to_dict()]\n    ggml_tensor_kernel_CognitiveTensor --> ggml_tensor_kernel_CognitiveTensor_to_dict\n    ggml_tensor_kernel_CognitiveTensor_from_dict[from_dict()]\n    ggml_tensor_kernel_CognitiveTensor --> ggml_tensor_kernel_CognitiveTensor_from_dict\n    ggml_tensor_kernel_GGMLTensorKernel[GGMLTensorKernel]\n    ggml_tensor_kernel --> ggml_tensor_kernel_GGMLTensorKernel\n    ggml_tensor_kernel_GGMLTensorKernel___init__[__init__()]\n    ggml_tensor_kernel_GGMLTensorKernel --> ggml_tensor_kernel_GGMLTensorKernel___init__\n    ggml_tensor_kernel_GGMLTensorKernel__document_semantic_mappings[_document_semantic_mappings()]\n    ggml_tensor_kernel_GGMLTensorKernel --> ggml_tensor_kernel_GGMLTensorKernel__document_semantic_mappings\n    ggml_tensor_kernel_GGMLTensorKernel__initialize_tensor_shapes[_initialize_tensor_shapes()]\n    ggml_tensor_kernel_GGMLTensorKernel --> ggml_tensor_kernel_GGMLTensorKernel__initialize_tensor_shapes\n    ggml_tensor_kernel_GGMLTensorKernel__register_custom_operations[_register_custom_operations()]\n    ggml_tensor_kernel_GGMLTensorKernel --> ggml_tensor_kernel_GGMLTensorKernel__register_custom_operations\n    ggml_tensor_kernel_GGMLTensorKernel_create_tensor[create_tensor()]\n    ggml_tensor_kernel_GGMLTensorKernel --> ggml_tensor_kernel_GGMLTensorKernel_create_tensor\n    style ggml_tensor_kernel fill:#99ff99\n```"
    },
    "gui_dashboard": {
      "module": "gui_dashboard",
      "docstring": null,
      "imports": [
        "tkinter",
        "tkinter",
        "tkinterdnd2",
        "tkintertable",
        "activity_regulation",
        "threading",
        "psutil",
        "os",
        "json",
        "time",
        "csv",
        "pathlib",
        "matplotlib.pyplot",
        "matplotlib.backends.backend_tkagg",
        "ttkbootstrap",
        "ttkbootstrap",
        "tooltip",
        "networkx",
        "deep_tree_echo",
        "ml_system",
        "numpy",
        "matplotlib.cm",
        "matplotlib.colors",
        "memory_management",
        "logging",
        "datetime",
        "matplotlib.figure",
        "matplotlib.backends.backend_tkagg",
        "matplotlib.backends.backend_tkagg",
        "adaptive_heartbeat"
      ],
      "classes": [
        {
          "name": "GUIDashboard",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "root",
                "memory",
                "cognitive",
                "personality",
                "sensory",
                "activity",
                "emergency",
                "browser",
                "ai_manager"
              ],
              "line": 29,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "log_message",
              "docstring": "Log a message both to the log file and optionally to the GUI",
              "args": [
                "self",
                "message",
                "level"
              ],
              "line": 68,
              "returns": "Any",
              "complexity": 8
            },
            {
              "name": "create_widgets",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 94,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_dashboard_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 132,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_system_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 147,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_logs_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 157,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_tasks_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 169,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_heartbeat_tab",
              "docstring": "Create the heartbeat monitoring tab",
              "args": [
                "self"
              ],
              "line": 189,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_echo_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 315,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "create_memory_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 365,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_cognitive_tab",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 374,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_dashboard",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 381,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_pie_chart",
              "docstring": null,
              "args": [
                "self",
                "cpu",
                "memory",
                "disk"
              ],
              "line": 394,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "update_system_health",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 411,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_activity_logs",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 422,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "search_logs",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 438,
              "returns": "Any",
              "complexity": 8
            },
            {
              "name": "add_task",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 455,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "remove_task",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 462,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "prioritize_task",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 469,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "update_echo_threshold",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 476,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_max_depth",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 480,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "inject_random_echo",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 484,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "get_all_tree_nodes",
              "docstring": null,
              "args": [
                "self",
                "node",
                "nodes"
              ],
              "line": 498,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "manual_propagate_echoes",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 506,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "prune_weak_echoes",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 510,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_echo_visualization",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 514,
              "returns": "Any",
              "complexity": 8
            },
            {
              "name": "create_demo_tree",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 545,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "visualize_echo_tree",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 581,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "visualize_echo_history",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 629,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "update_memory_visualization",
              "docstring": "Update memory visualization with current hypergraph data",
              "args": [
                "self"
              ],
              "line": 671,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "filter_memory_graph",
              "docstring": "Filter and visualize memory graph based on current filters",
              "args": [
                "self"
              ],
              "line": 798,
              "returns": "Any",
              "complexity": 10
            },
            {
              "name": "draw_memory_graph",
              "docstring": "Draw the memory graph visualization",
              "args": [
                "self",
                "G"
              ],
              "line": 846,
              "returns": "Any",
              "complexity": 16
            },
            {
              "name": "display_memory_node_details",
              "docstring": "Display details of a memory node",
              "args": [
                "self",
                "node_id"
              ],
              "line": 975,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "search_memory",
              "docstring": "Search memory nodes for content",
              "args": [
                "self"
              ],
              "line": 1004,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "update_memory_stats",
              "docstring": "Update memory statistics display",
              "args": [
                "self"
              ],
              "line": 1031,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "generate_demo_memory",
              "docstring": "Generate demo memory data for visualization",
              "args": [
                "self"
              ],
              "line": 1048,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "show_memory_communities",
              "docstring": "Visualize memory communities",
              "args": [
                "self"
              ],
              "line": 1109,
              "returns": "Any",
              "complexity": 19
            },
            {
              "name": "update_heartbeat_monitor",
              "docstring": "Update the heartbeat monitoring display with current data",
              "args": [
                "self"
              ],
              "line": 1233,
              "returns": "Any",
              "complexity": 11
            },
            {
              "name": "toggle_hyper_drive",
              "docstring": "Toggle the heartbeat system's hyper drive mode",
              "args": [
                "self",
                "enable"
              ],
              "line": 1305,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "reset_heartbeat",
              "docstring": "Reset the heartbeat system to default settings",
              "args": [
                "self"
              ],
              "line": 1315,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "clear_heartbeat_log",
              "docstring": "Clear the heartbeat event log display",
              "args": [
                "self"
              ],
              "line": 1321,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "add_heartbeat_log_entry",
              "docstring": "Add a new entry to the heartbeat log display",
              "args": [
                "self",
                "log_entry"
              ],
              "line": 1329,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 28,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'adaptive_heartbeat', 'numpy', 'networkx', 'activity_regulation', 'tkinter', 'datetime', 'threading', 'os', 'logging', 'csv', 'deep_tree_echo', 'memory_management', 'tkinterdnd2', 'json', 'matplotlib', 'ml_system', 'psutil', 'pathlib', 'tooltip', 'time', 'ttkbootstrap', 'tkintertable'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    gui_dashboard[gui_dashboard]\n    gui_dashboard_GUIDashboard[GUIDashboard]\n    gui_dashboard --> gui_dashboard_GUIDashboard\n    gui_dashboard_GUIDashboard___init__[__init__()]\n    gui_dashboard_GUIDashboard --> gui_dashboard_GUIDashboard___init__\n    gui_dashboard_GUIDashboard_log_message[log_message()]\n    gui_dashboard_GUIDashboard --> gui_dashboard_GUIDashboard_log_message\n    gui_dashboard_GUIDashboard_create_widgets[create_widgets()]\n    gui_dashboard_GUIDashboard --> gui_dashboard_GUIDashboard_create_widgets\n    gui_dashboard_GUIDashboard_create_dashboard_tab[create_dashboard_tab()]\n    gui_dashboard_GUIDashboard --> gui_dashboard_GUIDashboard_create_dashboard_tab\n    gui_dashboard_GUIDashboard_create_system_tab[create_system_tab()]\n    gui_dashboard_GUIDashboard --> gui_dashboard_GUIDashboard_create_system_tab\n    style gui_dashboard fill:#ffcc99\n```"
    },
    "hypergraph_visualization": {
      "module": "hypergraph_visualization",
      "docstring": "Hypergraph Fragment Flowchart Generator\n\nThis module generates visualization flowcharts for hypergraph fragments and\ntensor architectures in the Echo9ML distributed cognitive grammar system.\nIt supports multiple output formats and provides interactive visualizations.\n\nKey Features:\n- Mermaid diagram generation for hypergraph fragments\n- DOT/Graphviz format support\n- JSON export for web-based visualizations\n- SVG generation for static documentation\n- Interactive HTML dashboards",
      "imports": [
        "json",
        "time",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "pathlib",
        "ko6ml_atomspace_adapter",
        "tensor_fragment_architecture",
        "ko6ml_atomspace_adapter",
        "tensor_fragment_architecture"
      ],
      "classes": [
        {
          "name": "VisualizationFormat",
          "docstring": "Supported visualization formats",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 35,
          "cognitive_features": []
        },
        {
          "name": "DiagramType",
          "docstring": "Types of diagrams to generate",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 43,
          "cognitive_features": []
        },
        {
          "name": "VisualizationNode",
          "docstring": "Node in visualization graph",
          "methods": [],
          "bases": [],
          "line": 52,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "VisualizationEdge",
          "docstring": "Edge in visualization graph",
          "methods": [],
          "bases": [],
          "line": 61,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "VisualizationGraph",
          "docstring": "Complete visualization graph",
          "methods": [],
          "bases": [],
          "line": 71,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "HypergraphFlowchartGenerator",
          "docstring": "Generator for hypergraph fragment flowcharts",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 82,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "generate_hypergraph_fragment_diagram",
              "docstring": "Generate diagram for hypergraph fragment",
              "args": [
                "self",
                "fragment",
                "format_type"
              ],
              "line": 114,
              "returns": "str",
              "complexity": 5
            },
            {
              "name": "generate_tensor_architecture_diagram",
              "docstring": "Generate diagram for tensor architecture",
              "args": [
                "self",
                "kernel",
                "format_type"
              ],
              "line": 130,
              "returns": "str",
              "complexity": 5
            },
            {
              "name": "generate_translation_flow_diagram",
              "docstring": "Generate diagram for ko6ml \u2194 AtomSpace translation flow",
              "args": [
                "self",
                "adapter",
                "test_primitives",
                "format_type"
              ],
              "line": 146,
              "returns": "str",
              "complexity": 5
            },
            {
              "name": "generate_comprehensive_dashboard",
              "docstring": "Generate comprehensive visualization dashboard",
              "args": [
                "self",
                "output_dir"
              ],
              "line": 163,
              "returns": "<ast.Subscript object at 0x7f2f2d6bb3d0>",
              "complexity": 5
            },
            {
              "name": "_create_fragment_graph",
              "docstring": "Create visualization graph from AtomSpace fragment",
              "args": [
                "self",
                "fragment"
              ],
              "line": 238,
              "returns": "VisualizationGraph",
              "complexity": 5
            },
            {
              "name": "_create_tensor_architecture_graph",
              "docstring": "Create visualization graph for tensor architecture",
              "args": [
                "self",
                "kernel"
              ],
              "line": 285,
              "returns": "VisualizationGraph",
              "complexity": 9
            },
            {
              "name": "_create_translation_flow_graph",
              "docstring": "Create visualization graph for translation flow",
              "args": [
                "self",
                "adapter",
                "test_primitives"
              ],
              "line": 346,
              "returns": "VisualizationGraph",
              "complexity": 3
            },
            {
              "name": "_generate_mermaid_diagram",
              "docstring": "Generate Mermaid diagram from visualization graph",
              "args": [
                "self",
                "graph"
              ],
              "line": 422,
              "returns": "str",
              "complexity": 5
            },
            {
              "name": "_generate_dot_diagram",
              "docstring": "Generate DOT/Graphviz diagram from visualization graph",
              "args": [
                "self",
                "graph"
              ],
              "line": 459,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "_generate_json_diagram",
              "docstring": "Generate JSON representation for web visualization",
              "args": [
                "self",
                "graph"
              ],
              "line": 487,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_generate_html_diagram",
              "docstring": "Generate HTML page with interactive visualization",
              "args": [
                "self",
                "graph"
              ],
              "line": 519,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_generate_comprehensive_html_dashboard",
              "docstring": "Generate comprehensive HTML dashboard",
              "args": [
                "self",
                "adapter",
                "test_primitives",
                "kernel"
              ],
              "line": 629,
              "returns": "str",
              "complexity": 2
            },
            {
              "name": "_generate_static_documentation_diagrams",
              "docstring": "Generate static documentation diagrams",
              "args": [
                "self"
              ],
              "line": 895,
              "returns": "<ast.Subscript object at 0x7f2f2d8d0d50>",
              "complexity": 1
            },
            {
              "name": "_generate_visualization_readme",
              "docstring": "Generate README for visualization output",
              "args": [
                "self",
                "generated_files"
              ],
              "line": 980,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_node_color",
              "docstring": "Get color for node type",
              "args": [
                "self",
                "node_type"
              ],
              "line": 1045,
              "returns": "<ast.Subscript object at 0x7f2f2d4bf050>",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 79,
          "cognitive_features": [
            "symbolic"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_visualization_generator",
          "docstring": "Factory function to create visualization generator",
          "args": [],
          "line": 1062,
          "returns": "HypergraphFlowchartGenerator",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'tensor_fragment_architecture', 'dataclasses', 'logging', 'enum', 'time', 'typing', 'ko6ml_atomspace_adapter', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern"
      ],
      "architectural_role": "Symbolic Processing",
      "flowchart": "```mermaid\ngraph TD\n    hypergraph_visualization[hypergraph_visualization]\n    hypergraph_visualization_VisualizationFormat[VisualizationFormat]\n    hypergraph_visualization --> hypergraph_visualization_VisualizationFormat\n    hypergraph_visualization_DiagramType[DiagramType]\n    hypergraph_visualization --> hypergraph_visualization_DiagramType\n    hypergraph_visualization_VisualizationNode[VisualizationNode]\n    hypergraph_visualization --> hypergraph_visualization_VisualizationNode\n    hypergraph_visualization_VisualizationEdge[VisualizationEdge]\n    hypergraph_visualization --> hypergraph_visualization_VisualizationEdge\n    hypergraph_visualization_VisualizationGraph[VisualizationGraph]\n    hypergraph_visualization --> hypergraph_visualization_VisualizationGraph\n    hypergraph_visualization_HypergraphFlowchartGenerator[HypergraphFlowchartGenerator]\n    hypergraph_visualization --> hypergraph_visualization_HypergraphFlowchartGenerator\n    hypergraph_visualization_HypergraphFlowchartGenerator___init__[__init__()]\n    hypergraph_visualization_HypergraphFlowchartGenerator --> hypergraph_visualization_HypergraphFlowchartGenerator___init__\n    hypergraph_visualization_HypergraphFlowchartGenerator_generate_hypergraph_fragment_diagram[generate_hypergraph_fragment_diagram()]\n    hypergraph_visualization_HypergraphFlowchartGenerator --> hypergraph_visualization_HypergraphFlowchartGenerator_generate_hypergraph_fragment_diagram\n    hypergraph_visualization_HypergraphFlowchartGenerator_generate_tensor_architecture_diagram[generate_tensor_architecture_diagram()]\n    hypergraph_visualization_HypergraphFlowchartGenerator --> hypergraph_visualization_HypergraphFlowchartGenerator_generate_tensor_architecture_diagram\n    hypergraph_visualization_HypergraphFlowchartGenerator_generate_translation_flow_diagram[generate_translation_flow_diagram()]\n    hypergraph_visualization_HypergraphFlowchartGenerator --> hypergraph_visualization_HypergraphFlowchartGenerator_generate_translation_flow_diagram\n    hypergraph_visualization_HypergraphFlowchartGenerator_generate_comprehensive_dashboard[generate_comprehensive_dashboard()]\n    hypergraph_visualization_HypergraphFlowchartGenerator --> hypergraph_visualization_HypergraphFlowchartGenerator_generate_comprehensive_dashboard\n    hypergraph_visualization_create_visualization_generator[create_visualization_generator()]\n    hypergraph_visualization --> hypergraph_visualization_create_visualization_generator\n```"
    },
    "ko6ml_atomspace_adapter": {
      "module": "ko6ml_atomspace_adapter",
      "docstring": "Ko6ml \u2194 AtomSpace Translation Adapter for Cognitive Primitives\n\nThis module provides bidirectional translation between ko6ml cognitive primitives\nand AtomSpace hypergraph patterns. It implements the foundation for Phase 1 of\nthe Distributed Agentic Cognitive Grammar Network.\n\nKey Features:\n- Modular Scheme-inspired adapters for grammar translation\n- Round-trip translation validation\n- Cognitive primitive mapping to hypergraph structures\n- Tensor shape integration with prime factorization",
      "imports": [
        "json",
        "time",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "symbolic_reasoning",
        "echo9ml",
        "ggml_tensor_kernel"
      ],
      "classes": [
        {
          "name": "Ko6mlPrimitiveType",
          "docstring": "Ko6ml cognitive primitive types",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 34,
          "cognitive_features": []
        },
        {
          "name": "Ko6mlPrimitive",
          "docstring": "Ko6ml cognitive primitive representation",
          "methods": [
            {
              "name": "to_scheme_expr",
              "docstring": "Convert to Scheme-like expression",
              "args": [
                "self"
              ],
              "line": 55,
              "returns": "str",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 46,
          "cognitive_features": []
        },
        {
          "name": "AtomSpaceFragment",
          "docstring": "AtomSpace hypergraph fragment",
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 75,
              "returns": "<ast.Subscript object at 0x7f2f2d5fa610>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 68,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "Ko6mlAtomSpaceAdapter",
          "docstring": "Bidirectional translator between ko6ml primitives and AtomSpace hypergraphs",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 87,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_primitive_mappings",
              "docstring": "Initialize ko6ml primitive to AtomSpace mappings",
              "args": [
                "self"
              ],
              "line": 105,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_atomspace_mappings",
              "docstring": "Initialize AtomSpace to ko6ml primitive mappings",
              "args": [
                "self"
              ],
              "line": 118,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "ko6ml_to_atomspace",
              "docstring": "Translate ko6ml primitive to AtomSpace hypergraph fragment",
              "args": [
                "self",
                "primitive"
              ],
              "line": 130,
              "returns": "AtomSpaceFragment",
              "complexity": 2
            },
            {
              "name": "atomspace_to_ko6ml",
              "docstring": "Translate AtomSpace hypergraph fragment to ko6ml primitives",
              "args": [
                "self",
                "fragment"
              ],
              "line": 150,
              "returns": "<ast.Subscript object at 0x7f2f2d774710>",
              "complexity": 6
            },
            {
              "name": "validate_round_trip",
              "docstring": "Validate round-trip translation ko6ml \u2192 AtomSpace \u2192 ko6ml",
              "args": [
                "self",
                "original_primitive"
              ],
              "line": 183,
              "returns": "<ast.Subscript object at 0x7f2f2d880ed0>",
              "complexity": 7
            },
            {
              "name": "_calculate_primitive_similarity",
              "docstring": "Calculate similarity between two ko6ml primitives",
              "args": [
                "self",
                "p1",
                "p2"
              ],
              "line": 232,
              "returns": "float",
              "complexity": 15
            },
            {
              "name": "_calculate_composite_similarity",
              "docstring": "Calculate similarity when original is represented as multiple recovered primitives",
              "args": [
                "self",
                "original",
                "recovered_list"
              ],
              "line": 280,
              "returns": "float",
              "complexity": 9
            },
            {
              "name": "_map_agent_state_to_atomspace",
              "docstring": "Map agent state primitive to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 318,
              "returns": "AtomSpaceFragment",
              "complexity": 3
            },
            {
              "name": "_map_memory_fragment_to_atomspace",
              "docstring": "Map memory fragment to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 366,
              "returns": "AtomSpaceFragment",
              "complexity": 1
            },
            {
              "name": "_map_reasoning_pattern_to_atomspace",
              "docstring": "Map reasoning pattern to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 398,
              "returns": "AtomSpaceFragment",
              "complexity": 3
            },
            {
              "name": "_map_attention_allocation_to_atomspace",
              "docstring": "Map attention allocation to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 430,
              "returns": "AtomSpaceFragment",
              "complexity": 2
            },
            {
              "name": "_map_persona_trait_to_atomspace",
              "docstring": "Map persona trait to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 469,
              "returns": "AtomSpaceFragment",
              "complexity": 1
            },
            {
              "name": "_map_hypergraph_node_to_atomspace",
              "docstring": "Map hypergraph node to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 501,
              "returns": "AtomSpaceFragment",
              "complexity": 2
            },
            {
              "name": "_map_hypergraph_link_to_atomspace",
              "docstring": "Map hypergraph link to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 519,
              "returns": "AtomSpaceFragment",
              "complexity": 2
            },
            {
              "name": "_map_tensor_fragment_to_atomspace",
              "docstring": "Map tensor fragment to AtomSpace representation",
              "args": [
                "self",
                "primitive"
              ],
              "line": 537,
              "returns": "AtomSpaceFragment",
              "complexity": 4
            },
            {
              "name": "_map_concept_node_to_primitive",
              "docstring": "Map ConceptNode to ko6ml primitive",
              "args": [
                "self",
                "atom",
                "fragment"
              ],
              "line": 568,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "_map_predicate_node_to_primitive",
              "docstring": "Map PredicateNode to ko6ml primitive",
              "args": [
                "self",
                "atom",
                "fragment"
              ],
              "line": 581,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "_map_inheritance_link_to_primitive",
              "docstring": "Map InheritanceLink to ko6ml primitive",
              "args": [
                "self",
                "link",
                "fragment"
              ],
              "line": 594,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "_map_similarity_link_to_primitive",
              "docstring": "Map SimilarityLink to ko6ml primitive",
              "args": [
                "self",
                "link",
                "fragment"
              ],
              "line": 607,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "_map_evaluation_link_to_primitive",
              "docstring": "Map EvaluationLink to ko6ml primitive",
              "args": [
                "self",
                "link",
                "fragment"
              ],
              "line": 620,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "_map_and_link_to_primitive",
              "docstring": "Map AndLink to ko6ml primitive",
              "args": [
                "self",
                "link",
                "fragment"
              ],
              "line": 633,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "_map_or_link_to_primitive",
              "docstring": "Map OrLink to ko6ml primitive",
              "args": [
                "self",
                "link",
                "fragment"
              ],
              "line": 646,
              "returns": "Ko6mlPrimitive",
              "complexity": 1
            },
            {
              "name": "get_tensor_shape_documentation",
              "docstring": "Get documentation of tensor shapes with prime factorization",
              "args": [
                "self"
              ],
              "line": 659,
              "returns": "<ast.Subscript object at 0x7f2f2d73a050>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 84,
          "cognitive_features": [
            "learning",
            "symbolic"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_ko6ml_adapter",
          "docstring": "Factory function to create ko6ml adapter",
          "args": [],
          "line": 679,
          "returns": "Ko6mlAtomSpaceAdapter",
          "complexity": 1,
          "cognitive_features": [
            "learning"
          ]
        },
        {
          "name": "create_test_primitives",
          "docstring": "Create test ko6ml primitives for validation",
          "args": [],
          "line": 684,
          "returns": "<ast.Subscript object at 0x7f2f2d6b5990>",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'symbolic_reasoning', 'dataclasses', 'echo9ml', 'ggml_tensor_kernel', 'logging', 'enum', 'time', 'typing', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    ko6ml_atomspace_adapter[ko6ml_atomspace_adapter]\n    ko6ml_atomspace_adapter_Ko6mlPrimitiveType[Ko6mlPrimitiveType]\n    ko6ml_atomspace_adapter --> ko6ml_atomspace_adapter_Ko6mlPrimitiveType\n    ko6ml_atomspace_adapter_Ko6mlPrimitive[Ko6mlPrimitive]\n    ko6ml_atomspace_adapter --> ko6ml_atomspace_adapter_Ko6mlPrimitive\n    ko6ml_atomspace_adapter_Ko6mlPrimitive_to_scheme_expr[to_scheme_expr()]\n    ko6ml_atomspace_adapter_Ko6mlPrimitive --> ko6ml_atomspace_adapter_Ko6mlPrimitive_to_scheme_expr\n    ko6ml_atomspace_adapter_AtomSpaceFragment[AtomSpaceFragment]\n    ko6ml_atomspace_adapter --> ko6ml_atomspace_adapter_AtomSpaceFragment\n    ko6ml_atomspace_adapter_AtomSpaceFragment_to_dict[to_dict()]\n    ko6ml_atomspace_adapter_AtomSpaceFragment --> ko6ml_atomspace_adapter_AtomSpaceFragment_to_dict\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter[Ko6mlAtomSpaceAdapter]\n    ko6ml_atomspace_adapter --> ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter___init__[__init__()]\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter --> ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter___init__\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter__initialize_primitive_mappings[_initialize_primitive_mappings()]\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter --> ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter__initialize_primitive_mappings\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter__initialize_atomspace_mappings[_initialize_atomspace_mappings()]\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter --> ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter__initialize_atomspace_mappings\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter_ko6ml_to_atomspace[ko6ml_to_atomspace()]\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter --> ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter_ko6ml_to_atomspace\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter_atomspace_to_ko6ml[atomspace_to_ko6ml()]\n    ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter --> ko6ml_atomspace_adapter_Ko6mlAtomSpaceAdapter_atomspace_to_ko6ml\n    ko6ml_atomspace_adapter_create_ko6ml_adapter[create_ko6ml_adapter()]\n    ko6ml_atomspace_adapter --> ko6ml_atomspace_adapter_create_ko6ml_adapter\n    ko6ml_atomspace_adapter_create_test_primitives[create_test_primitives()]\n    ko6ml_atomspace_adapter --> ko6ml_atomspace_adapter_create_test_primitives\n    style ko6ml_atomspace_adapter fill:#99ccff\n```"
    },
    "launch_dashboards": {
      "module": "launch_dashboards",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "argparse",
        "subprocess",
        "logging",
        "time",
        "signal",
        "threading",
        "atexit",
        "psutil",
        "pathlib"
      ],
      "classes": [],
      "functions": [
        {
          "name": "signal_handler",
          "docstring": "Handle exit signals properly",
          "args": [
            "sig",
            "frame"
          ],
          "line": 29,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up all processes on exit",
          "args": [],
          "line": 35,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "launch_gui_dashboard",
          "docstring": "Launch the GUI dashboard",
          "args": [
            "use_locale_fix",
            "env"
          ],
          "line": 53,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "launch_web_dashboard",
          "docstring": "Launch the Web dashboard",
          "args": [
            "port"
          ],
          "line": 84,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "monitor_output",
          "docstring": "Monitor and log the output from a process",
          "args": [
            "process",
            "name"
          ],
          "line": 113,
          "returns": "Any",
          "complexity": 7,
          "cognitive_features": [
            "action"
          ]
        },
        {
          "name": "check_dashboard_status",
          "docstring": "Check the status of both dashboards",
          "args": [],
          "line": 133,
          "returns": "Any",
          "complexity": 8,
          "cognitive_features": []
        },
        {
          "name": "find_forwarded_ports",
          "docstring": "Find potential forwarded ports for the web dashboard in container environments",
          "args": [],
          "line": 160,
          "returns": "Any",
          "complexity": 7,
          "cognitive_features": []
        },
        {
          "name": "print_dashboard_info",
          "docstring": "Print dashboard status information to the console",
          "args": [
            "status"
          ],
          "line": 179,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 204,
          "returns": "Any",
          "complexity": 18,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'subprocess', 'argparse', 'psutil', 'pathlib', 'atexit', 'signal', 'threading', 'os', 'logging', 'time', 'sys'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    launch_dashboards[launch_dashboards]\n    launch_dashboards_signal_handler[signal_handler()]\n    launch_dashboards --> launch_dashboards_signal_handler\n    launch_dashboards_cleanup[cleanup()]\n    launch_dashboards --> launch_dashboards_cleanup\n    launch_dashboards_launch_gui_dashboard[launch_gui_dashboard()]\n    launch_dashboards --> launch_dashboards_launch_gui_dashboard\n    launch_dashboards_launch_web_dashboard[launch_web_dashboard()]\n    launch_dashboards --> launch_dashboards_launch_web_dashboard\n    launch_dashboards_monitor_output[monitor_output()]\n    launch_dashboards --> launch_dashboards_monitor_output\n    style launch_dashboards fill:#ffcc99\n```"
    },
    "launch_deep_tree_echo": {
      "module": "launch_deep_tree_echo",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "asyncio",
        "logging",
        "argparse",
        "pathlib",
        "typing",
        "deep_tree_echo",
        "memory_management",
        "cognitive_architecture",
        "personality_system",
        "sensory_motor_simple",
        "emergency_protocols",
        "activity_regulation",
        "terminal_controller",
        "ai_integration",
        "browser_interface",
        "gui_dashboard"
      ],
      "classes": [
        {
          "name": "SystemStatus",
          "docstring": "System status tracker",
          "methods": [],
          "bases": [],
          "line": 39,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'memory_management', 'emergency_protocols', 'argparse', 'pathlib', 'browser_interface', 'personality_system', 'activity_regulation', 'cognitive_architecture', 'sensory_motor_simple', 'os', 'logging', 'terminal_controller', 'ai_integration', 'sys', 'deep_tree_echo', 'typing', 'asyncio', 'gui_dashboard'}",
      "cognitive_patterns": [],
      "architectural_role": "Core Engine",
      "flowchart": "```mermaid\ngraph TD\n    launch_deep_tree_echo[launch_deep_tree_echo]\n    launch_deep_tree_echo_SystemStatus[SystemStatus]\n    launch_deep_tree_echo --> launch_deep_tree_echo_SystemStatus\n    style launch_deep_tree_echo fill:#ff9999\n```"
    },
    "launch_gui": {
      "module": "launch_gui",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "traceback",
        "logging",
        "argparse",
        "tkinter",
        "tkinterdnd2",
        "gui_dashboard",
        "memory_management",
        "cognitive_architecture",
        "personality_system",
        "sensory_motor_simple",
        "emergency_protocols",
        "activity_regulation",
        "ai_integration",
        "sensory_motor"
      ],
      "classes": [],
      "functions": [
        {
          "name": "ensure_display",
          "docstring": "Check and set up display environment if needed",
          "args": [],
          "line": 14,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 33,
          "returns": "Any",
          "complexity": 21,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'emergency_protocols', 'argparse', 'sensory_motor', 'personality_system', 'activity_regulation', 'traceback', 'cognitive_architecture', 'tkinter', 'tkinterdnd2', 'sensory_motor_simple', 'os', 'logging', 'sys', 'ai_integration', 'memory_management', 'gui_dashboard'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    launch_gui[launch_gui]\n    launch_gui_ensure_display[ensure_display()]\n    launch_gui --> launch_gui_ensure_display\n    launch_gui_main[main()]\n    launch_gui --> launch_gui_main\n    style launch_gui fill:#ffcc99\n```"
    },
    "launch_gui_standalone": {
      "module": "launch_gui_standalone",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "logging",
        "signal",
        "argparse",
        "threading",
        "tkinterdnd2",
        "gui_dashboard",
        "memory_management",
        "activity_regulation"
      ],
      "classes": [],
      "functions": [
        {
          "name": "signal_handler",
          "docstring": "Handle exit signals properly",
          "args": [
            "sig",
            "frame"
          ],
          "line": 24,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 31,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'argparse', 'signal', 'activity_regulation', 'tkinterdnd2', 'threading', 'os', 'logging', 'sys', 'memory_management', 'gui_dashboard'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    launch_gui_standalone[launch_gui_standalone]\n    launch_gui_standalone_signal_handler[signal_handler()]\n    launch_gui_standalone --> launch_gui_standalone_signal_handler\n    launch_gui_standalone_main[main()]\n    launch_gui_standalone --> launch_gui_standalone_main\n    style launch_gui_standalone fill:#ffcc99\n```"
    },
    "memory_management": {
      "module": "memory_management",
      "docstring": null,
      "imports": [
        "os",
        "json",
        "numpy",
        "logging",
        "datetime",
        "time",
        "pathlib",
        "typing",
        "enum",
        "dataclasses",
        "collections",
        "networkx",
        "deep_tree_echo",
        "community"
      ],
      "classes": [
        {
          "name": "MemoryType",
          "docstring": null,
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 20,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "MemoryNode",
          "docstring": null,
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 44,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": "Create from dictionary",
              "args": [
                "cls",
                "data"
              ],
              "line": 51,
              "returns": "MemoryNode",
              "complexity": 2
            },
            {
              "name": "access",
              "docstring": "Mark this memory as accessed",
              "args": [
                "self"
              ],
              "line": 58,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 31,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "MemoryEdge",
          "docstring": null,
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 72,
              "returns": "Dict",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": "Create from dictionary",
              "args": [
                "cls",
                "data"
              ],
              "line": 77,
              "returns": "MemoryEdge",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 64,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "HypergraphMemory",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the hypergraph memory system\n\nArgs:\n    storage_dir: Directory to store memory files",
              "args": [
                "self",
                "storage_dir"
              ],
              "line": 82,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_node",
              "docstring": "Add a memory node to the system\n\nArgs:\n    node: The memory node to add\n    \nReturns:\n    The node ID",
              "args": [
                "self",
                "node"
              ],
              "line": 109,
              "returns": "str",
              "complexity": 2
            },
            {
              "name": "remove_node",
              "docstring": "Remove a node from the system\n\nArgs:\n    node_id: ID of the node to remove\n    \nReturns:\n    True if node was removed, False if not found",
              "args": [
                "self",
                "node_id"
              ],
              "line": 140,
              "returns": "bool",
              "complexity": 4
            },
            {
              "name": "add_edge",
              "docstring": "Add a connection between memory nodes\n\nArgs:\n    edge: The memory edge to add",
              "args": [
                "self",
                "edge"
              ],
              "line": 176,
              "returns": "None",
              "complexity": 3
            },
            {
              "name": "update_node",
              "docstring": "Update node properties\n\nArgs:\n    node_id: ID of the node to update\n    **kwargs: Properties to update\n    \nReturns:\n    True if node was updated, False if not found",
              "args": [
                "self",
                "node_id"
              ],
              "line": 195,
              "returns": "bool",
              "complexity": 10
            },
            {
              "name": "get_node",
              "docstring": "Get a node by ID\n\nArgs:\n    node_id: The ID of the node to retrieve\n    \nReturns:\n    The memory node or None if not found",
              "args": [
                "self",
                "node_id"
              ],
              "line": 237,
              "returns": "<ast.Subscript object at 0x7f2f2d6b9310>",
              "complexity": 4
            },
            {
              "name": "find_nodes",
              "docstring": "Find nodes matching given filters\n\nArgs:\n    **filters: Filter criteria (memory_type, source, min_salience, etc.)\n    \nReturns:\n    List of matching memory nodes",
              "args": [
                "self"
              ],
              "line": 259,
              "returns": "<ast.Subscript object at 0x7f2f2d700d90>",
              "complexity": 8
            },
            {
              "name": "get_related_nodes",
              "docstring": "Get nodes related to the given node\n\nArgs:\n    node_id: ID of the source node\n    relation_type: Optional filter for edge relation type\n    max_depth: Maximum traversal depth (1 = direct connections only)\n    \nReturns:\n    List of related memory nodes",
              "args": [
                "self",
                "node_id",
                "relation_type",
                "max_depth"
              ],
              "line": 306,
              "returns": "<ast.Subscript object at 0x7f2f2d6b4410>",
              "complexity": 11
            },
            {
              "name": "find_paths",
              "docstring": "Find all paths between two nodes up to a maximum length\n\nArgs:\n    from_id: Starting node ID\n    to_id: Target node ID\n    max_length: Maximum path length\n    \nReturns:\n    List of paths (each path is a list of node IDs)",
              "args": [
                "self",
                "from_id",
                "to_id",
                "max_length"
              ],
              "line": 355,
              "returns": "<ast.Subscript object at 0x7f2f2d8a18d0>",
              "complexity": 4
            },
            {
              "name": "find_strongest_path",
              "docstring": "Find the strongest path between two nodes based on edge weights\n\nArgs:\n    from_id: Starting node ID\n    to_id: Target node ID\n    max_length: Maximum path length\n    \nReturns:\n    The strongest path as a list of node IDs, or None if no path exists",
              "args": [
                "self",
                "from_id",
                "to_id",
                "max_length"
              ],
              "line": 377,
              "returns": "<ast.Subscript object at 0x7f2f2d8fbcd0>",
              "complexity": 6
            },
            {
              "name": "find_communities",
              "docstring": "Find communities of densely connected nodes\n\nReturns:\n    Dictionary mapping community ID to list of node IDs",
              "args": [
                "self"
              ],
              "line": 406,
              "returns": "<ast.Subscript object at 0x7f2f2d6ebb10>",
              "complexity": 4
            },
            {
              "name": "compute_centrality",
              "docstring": "Compute node centrality in the graph\n\nReturns:\n    Dictionary mapping node ID to centrality score",
              "args": [
                "self"
              ],
              "line": 433,
              "returns": "<ast.Subscript object at 0x7f2f2d873b10>",
              "complexity": 3
            },
            {
              "name": "update_salience_by_centrality",
              "docstring": "Update node salience based on graph centrality",
              "args": [
                "self"
              ],
              "line": 451,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "prune_by_salience",
              "docstring": "Remove low-salience nodes from memory\n\nArgs:\n    threshold: Minimum salience value to keep",
              "args": [
                "self",
                "threshold"
              ],
              "line": 461,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "save",
              "docstring": "Save the memory graph to disk",
              "args": [
                "self"
              ],
              "line": 471,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "load",
              "docstring": "Load the memory graph from disk",
              "args": [
                "self"
              ],
              "line": 512,
              "returns": "Any",
              "complexity": 13
            },
            {
              "name": "_sort_indices",
              "docstring": "Sort indices for efficient retrieval",
              "args": [
                "self"
              ],
              "line": 570,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_node_from_tree_node",
              "docstring": "Create a memory node from a Deep Tree Echo node\n\nArgs:\n    tree_node: The TreeNode to convert\n    memory_type: Type of memory to create\n    source: Source identifier\n    \nReturns:\n    ID of the created node",
              "args": [
                "self",
                "tree_node",
                "memory_type",
                "source"
              ],
              "line": 576,
              "returns": "str",
              "complexity": 6
            },
            {
              "name": "import_tree",
              "docstring": "Import an entire Deep Tree Echo tree into the memory system\n\nArgs:\n    root_node: Root TreeNode to import\n    memory_type: Type of memory to create\n    source: Source identifier\n    \nReturns:\n    List of created node IDs",
              "args": [
                "self",
                "root_node",
                "memory_type",
                "source"
              ],
              "line": 636,
              "returns": "<ast.Subscript object at 0x7f2f2d8df450>",
              "complexity": 4
            },
            {
              "name": "export_to_tree",
              "docstring": "Export a subgraph as a Deep Tree Echo tree\n\nArgs:\n    root_id: ID of the root memory node\n    max_depth: Maximum depth to export\n    \nReturns:\n    Root TreeNode or None if root_id not found",
              "args": [
                "self",
                "root_id",
                "max_depth"
              ],
              "line": 721,
              "returns": "<ast.Subscript object at 0x7f2f2d774810>",
              "complexity": 8
            },
            {
              "name": "generate_statistics",
              "docstring": "Generate statistics about the memory system\n\nReturns:\n    Dictionary of statistics",
              "args": [
                "self"
              ],
              "line": 778,
              "returns": "Dict",
              "complexity": 7
            }
          ],
          "bases": [],
          "line": 81,
          "cognitive_features": [
            "memory",
            "symbolic"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'networkx', 'dataclasses', 'datetime', 'os', 'logging', 'enum', 'community', 'time', 'deep_tree_echo', 'typing', 'collections', 'json'}",
      "cognitive_patterns": [
        "Memory Management Pattern"
      ],
      "architectural_role": "Memory Systems",
      "flowchart": "```mermaid\ngraph TD\n    memory_management[memory_management]\n    memory_management_MemoryType[MemoryType]\n    memory_management --> memory_management_MemoryType\n    memory_management_MemoryNode[MemoryNode]\n    memory_management --> memory_management_MemoryNode\n    memory_management_MemoryNode_to_dict[to_dict()]\n    memory_management_MemoryNode --> memory_management_MemoryNode_to_dict\n    memory_management_MemoryNode_from_dict[from_dict()]\n    memory_management_MemoryNode --> memory_management_MemoryNode_from_dict\n    memory_management_MemoryNode_access[access()]\n    memory_management_MemoryNode --> memory_management_MemoryNode_access\n    memory_management_MemoryEdge[MemoryEdge]\n    memory_management --> memory_management_MemoryEdge\n    memory_management_MemoryEdge_to_dict[to_dict()]\n    memory_management_MemoryEdge --> memory_management_MemoryEdge_to_dict\n    memory_management_MemoryEdge_from_dict[from_dict()]\n    memory_management_MemoryEdge --> memory_management_MemoryEdge_from_dict\n    memory_management_HypergraphMemory[HypergraphMemory]\n    memory_management --> memory_management_HypergraphMemory\n    memory_management_HypergraphMemory___init__[__init__()]\n    memory_management_HypergraphMemory --> memory_management_HypergraphMemory___init__\n    memory_management_HypergraphMemory_add_node[add_node()]\n    memory_management_HypergraphMemory --> memory_management_HypergraphMemory_add_node\n    memory_management_HypergraphMemory_remove_node[remove_node()]\n    memory_management_HypergraphMemory --> memory_management_HypergraphMemory_remove_node\n    memory_management_HypergraphMemory_add_edge[add_edge()]\n    memory_management_HypergraphMemory --> memory_management_HypergraphMemory_add_edge\n    memory_management_HypergraphMemory_update_node[update_node()]\n    memory_management_HypergraphMemory --> memory_management_HypergraphMemory_update_node\n```"
    },
    "meta_cognitive_recursion": {
      "module": "meta_cognitive_recursion",
      "docstring": "Meta-Cognitive Recursion Engine for Phase 5\n\nThis module implements recursive meta-cognition and evolutionary optimization\nfor the echo9ml distributed cognitive grammar network. It enables the system\nto observe, analyze, and recursively improve itself using evolutionary algorithms.\n\nKey Features:\n- Recursive self-analysis and observation\n- Feedback-driven cognitive pathway optimization  \n- Real-time performance monitoring and adaptation\n- Evolutionary optimization with live metrics\n- Meta-cognitive recursion documentation and visualization\n\nPhase 5 Implementation: Recursive Meta-Cognition & Evolutionary Optimization",
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "dataclasses",
        "typing",
        "datetime",
        "threading",
        "collections",
        "copy",
        "cognitive_evolution",
        "moses_evolutionary_search",
        "echo_evolution",
        "cognitive_architecture",
        "echo_evolution",
        "random",
        "asyncio",
        "psutil",
        "math"
      ],
      "classes": [
        {
          "name": "MetaCognitiveState",
          "docstring": "Represents a snapshot of the system's meta-cognitive state",
          "methods": [],
          "bases": [],
          "line": 39,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "RecursiveObservation",
          "docstring": "Represents a recursive observation of the system's own processes",
          "methods": [],
          "bases": [],
          "line": 50,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "SelfAnalysisModule",
          "docstring": "Module for recursive self-analysis and observation",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "system_id"
              ],
              "line": 64,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "observe_cognitive_process",
              "docstring": "Recursively observe and analyze a cognitive process",
              "args": [
                "self",
                "process_name",
                "process_data",
                "recursive_depth"
              ],
              "line": 71,
              "returns": "RecursiveObservation",
              "complexity": 4
            },
            {
              "name": "_calculate_cognitive_load",
              "docstring": "Calculate the cognitive load of a process",
              "args": [
                "self",
                "process_data"
              ],
              "line": 121,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_calculate_performance_impact",
              "docstring": "Calculate performance impact of a process",
              "args": [
                "self",
                "process_data"
              ],
              "line": 128,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_detect_cognitive_patterns",
              "docstring": "Detect patterns in cognitive processes",
              "args": [
                "self",
                "process_data"
              ],
              "line": 137,
              "returns": "<ast.Subscript object at 0x7f2f2d5faa10>",
              "complexity": 5
            },
            {
              "name": "_detect_anomalies",
              "docstring": "Detect anomalies in cognitive processes",
              "args": [
                "self",
                "process_name",
                "process_data"
              ],
              "line": 159,
              "returns": "<ast.Subscript object at 0x7f2f2d898710>",
              "complexity": 4
            },
            {
              "name": "generate_improvement_suggestions",
              "docstring": "Generate suggestions for system improvement based on observations",
              "args": [
                "self"
              ],
              "line": 187,
              "returns": "<ast.Subscript object at 0x7f2f2d8d56d0>",
              "complexity": 7
            }
          ],
          "bases": [],
          "line": 61,
          "cognitive_features": [
            "metacognition"
          ]
        },
        {
          "name": "AdaptiveOptimizer",
          "docstring": "Implements adaptive optimization using evolutionary algorithms",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "moses_search"
              ],
              "line": 225,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "adapt_evolutionary_parameters",
              "docstring": "Adapt evolutionary parameters based on performance feedback",
              "args": [
                "self",
                "performance_metrics"
              ],
              "line": 236,
              "returns": "EvolutionaryParameters",
              "complexity": 13
            },
            {
              "name": "optimize_fitness_landscape",
              "docstring": "Analyze and optimize the fitness landscape",
              "args": [
                "self",
                "current_patterns"
              ],
              "line": 302,
              "returns": "<ast.Subscript object at 0x7f2f2d8afd10>",
              "complexity": 5
            },
            {
              "name": "_calculate_variance",
              "docstring": "Calculate variance of a list of values",
              "args": [
                "self",
                "values"
              ],
              "line": 334,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "_calculate_pattern_diversity",
              "docstring": "Calculate diversity of cognitive patterns",
              "args": [
                "self",
                "patterns"
              ],
              "line": 341,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "_analyze_convergence",
              "docstring": "Analyze convergence patterns in the population",
              "args": [
                "self",
                "patterns"
              ],
              "line": 364,
              "returns": "<ast.Subscript object at 0x7f2f2d6d23d0>",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 222,
          "cognitive_features": [
            "learning"
          ]
        },
        {
          "name": "LiveMetricsMonitor",
          "docstring": "Real-time monitoring of evolutionary cycles and performance metrics",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 387,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "start_monitoring",
              "docstring": "Start real-time metrics monitoring",
              "args": [
                "self",
                "update_interval"
              ],
              "line": 393,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "stop_monitoring",
              "docstring": "Stop real-time metrics monitoring",
              "args": [
                "self"
              ],
              "line": 405,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "add_callback",
              "docstring": "Add a callback for metrics updates",
              "args": [
                "self",
                "callback"
              ],
              "line": 414,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "record_metrics",
              "docstring": "Record metrics data",
              "args": [
                "self",
                "metrics"
              ],
              "line": 418,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_monitoring_loop",
              "docstring": "Main monitoring loop",
              "args": [
                "self",
                "update_interval"
              ],
              "line": 434,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_collect_system_metrics",
              "docstring": "Collect current system metrics",
              "args": [
                "self"
              ],
              "line": 447,
              "returns": "<ast.Subscript object at 0x7f2f2d88b150>",
              "complexity": 1
            },
            {
              "name": "get_recent_metrics",
              "docstring": "Get recent metrics data",
              "args": [
                "self",
                "count"
              ],
              "line": 458,
              "returns": "<ast.Subscript object at 0x7f2f2d88ba10>",
              "complexity": 1
            },
            {
              "name": "export_metrics",
              "docstring": "Export metrics to JSON file",
              "args": [
                "self",
                "filename"
              ],
              "line": 462,
              "returns": "str",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 384,
          "cognitive_features": []
        },
        {
          "name": "MetaCognitiveRecursionEngine",
          "docstring": "Main engine for recursive meta-cognition and evolutionary optimization",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "cognitive_bridge"
              ],
              "line": 483,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_update_meta_cognitive_state",
              "docstring": "Update the meta-cognitive state",
              "args": [
                "self",
                "cycle_data",
                "optimization_results",
                "improvement_results"
              ],
              "line": 671,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "generate_recursion_flowchart",
              "docstring": "Generate documentation of meta-cognitive recursion pathways",
              "args": [
                "self"
              ],
              "line": 698,
              "returns": "<ast.Subscript object at 0x7f2f2d88e3d0>",
              "complexity": 1
            },
            {
              "name": "export_results",
              "docstring": "Export complete meta-cognitive recursion results",
              "args": [
                "self",
                "filename"
              ],
              "line": 738,
              "returns": "str",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 480,
          "cognitive_features": [
            "metacognition"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'psutil', 'random', 'dataclasses', 'moses_evolutionary_search', 'cognitive_architecture', 'datetime', 'threading', 'logging', 'copy', 'time', 'math', 'cognitive_evolution', 'echo_evolution', 'typing', 'asyncio', 'collections', 'json'}",
      "cognitive_patterns": [
        "Recursive Pattern",
        "State Machine Pattern"
      ],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    meta_cognitive_recursion[meta_cognitive_recursion]\n    meta_cognitive_recursion_MetaCognitiveState[MetaCognitiveState]\n    meta_cognitive_recursion --> meta_cognitive_recursion_MetaCognitiveState\n    meta_cognitive_recursion_RecursiveObservation[RecursiveObservation]\n    meta_cognitive_recursion --> meta_cognitive_recursion_RecursiveObservation\n    meta_cognitive_recursion_SelfAnalysisModule[SelfAnalysisModule]\n    meta_cognitive_recursion --> meta_cognitive_recursion_SelfAnalysisModule\n    meta_cognitive_recursion_SelfAnalysisModule___init__[__init__()]\n    meta_cognitive_recursion_SelfAnalysisModule --> meta_cognitive_recursion_SelfAnalysisModule___init__\n    meta_cognitive_recursion_SelfAnalysisModule_observe_cognitive_process[observe_cognitive_process()]\n    meta_cognitive_recursion_SelfAnalysisModule --> meta_cognitive_recursion_SelfAnalysisModule_observe_cognitive_process\n    meta_cognitive_recursion_SelfAnalysisModule__calculate_cognitive_load[_calculate_cognitive_load()]\n    meta_cognitive_recursion_SelfAnalysisModule --> meta_cognitive_recursion_SelfAnalysisModule__calculate_cognitive_load\n    meta_cognitive_recursion_SelfAnalysisModule__calculate_performance_impact[_calculate_performance_impact()]\n    meta_cognitive_recursion_SelfAnalysisModule --> meta_cognitive_recursion_SelfAnalysisModule__calculate_performance_impact\n    meta_cognitive_recursion_SelfAnalysisModule__detect_cognitive_patterns[_detect_cognitive_patterns()]\n    meta_cognitive_recursion_SelfAnalysisModule --> meta_cognitive_recursion_SelfAnalysisModule__detect_cognitive_patterns\n    meta_cognitive_recursion_AdaptiveOptimizer[AdaptiveOptimizer]\n    meta_cognitive_recursion --> meta_cognitive_recursion_AdaptiveOptimizer\n    meta_cognitive_recursion_AdaptiveOptimizer___init__[__init__()]\n    meta_cognitive_recursion_AdaptiveOptimizer --> meta_cognitive_recursion_AdaptiveOptimizer___init__\n    meta_cognitive_recursion_AdaptiveOptimizer_adapt_evolutionary_parameters[adapt_evolutionary_parameters()]\n    meta_cognitive_recursion_AdaptiveOptimizer --> meta_cognitive_recursion_AdaptiveOptimizer_adapt_evolutionary_parameters\n    meta_cognitive_recursion_AdaptiveOptimizer_optimize_fitness_landscape[optimize_fitness_landscape()]\n    meta_cognitive_recursion_AdaptiveOptimizer --> meta_cognitive_recursion_AdaptiveOptimizer_optimize_fitness_landscape\n    meta_cognitive_recursion_AdaptiveOptimizer__calculate_variance[_calculate_variance()]\n    meta_cognitive_recursion_AdaptiveOptimizer --> meta_cognitive_recursion_AdaptiveOptimizer__calculate_variance\n    meta_cognitive_recursion_AdaptiveOptimizer__calculate_pattern_diversity[_calculate_pattern_diversity()]\n    meta_cognitive_recursion_AdaptiveOptimizer --> meta_cognitive_recursion_AdaptiveOptimizer__calculate_pattern_diversity\n    meta_cognitive_recursion_LiveMetricsMonitor[LiveMetricsMonitor]\n    meta_cognitive_recursion --> meta_cognitive_recursion_LiveMetricsMonitor\n    meta_cognitive_recursion_LiveMetricsMonitor___init__[__init__()]\n    meta_cognitive_recursion_LiveMetricsMonitor --> meta_cognitive_recursion_LiveMetricsMonitor___init__\n    meta_cognitive_recursion_LiveMetricsMonitor_start_monitoring[start_monitoring()]\n    meta_cognitive_recursion_LiveMetricsMonitor --> meta_cognitive_recursion_LiveMetricsMonitor_start_monitoring\n    meta_cognitive_recursion_LiveMetricsMonitor_stop_monitoring[stop_monitoring()]\n    meta_cognitive_recursion_LiveMetricsMonitor --> meta_cognitive_recursion_LiveMetricsMonitor_stop_monitoring\n    meta_cognitive_recursion_LiveMetricsMonitor_add_callback[add_callback()]\n    meta_cognitive_recursion_LiveMetricsMonitor --> meta_cognitive_recursion_LiveMetricsMonitor_add_callback\n    meta_cognitive_recursion_LiveMetricsMonitor_record_metrics[record_metrics()]\n    meta_cognitive_recursion_LiveMetricsMonitor --> meta_cognitive_recursion_LiveMetricsMonitor_record_metrics\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine[MetaCognitiveRecursionEngine]\n    meta_cognitive_recursion --> meta_cognitive_recursion_MetaCognitiveRecursionEngine\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine___init__[__init__()]\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine --> meta_cognitive_recursion_MetaCognitiveRecursionEngine___init__\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine__update_meta_cognitive_state[_update_meta_cognitive_state()]\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine --> meta_cognitive_recursion_MetaCognitiveRecursionEngine__update_meta_cognitive_state\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine_generate_recursion_flowchart[generate_recursion_flowchart()]\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine --> meta_cognitive_recursion_MetaCognitiveRecursionEngine_generate_recursion_flowchart\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine_export_results[export_results()]\n    meta_cognitive_recursion_MetaCognitiveRecursionEngine --> meta_cognitive_recursion_MetaCognitiveRecursionEngine_export_results\n```"
    },
    "ml_system": {
      "module": "ml_system",
      "docstring": null,
      "imports": [
        "numpy",
        "logging",
        "pathlib",
        "pickle",
        "json",
        "datetime",
        "typing",
        "time",
        "tensorflow",
        "tensorflow.keras",
        "cv2",
        "PIL"
      ],
      "classes": [
        {
          "name": "FallbackModel",
          "docstring": "Simple fallback model when TensorFlow is not available",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "model_type"
              ],
              "line": 37,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "predict",
              "docstring": "Simple prediction using statistical methods",
              "args": [
                "self",
                "data"
              ],
              "line": 42,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "fit",
              "docstring": "Simple fitting - just store data for statistical analysis",
              "args": [
                "self",
                "x",
                "y"
              ],
              "line": 54,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "save",
              "docstring": "Save model data",
              "args": [
                "self",
                "path"
              ],
              "line": 59,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "load",
              "docstring": "Load model data",
              "args": [
                "self",
                "path"
              ],
              "line": 67,
              "returns": "Any",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 35,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "MLSystem",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the machine learning system",
              "args": [
                "self"
              ],
              "line": 76,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_load_models",
              "docstring": "Load pre-trained models",
              "args": [
                "self"
              ],
              "line": 104,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "_create_fallback_models",
              "docstring": "Create simple fallback models when TensorFlow is not available",
              "args": [
                "self"
              ],
              "line": 146,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_load_activities",
              "docstring": "Load existing activities",
              "args": [
                "self"
              ],
              "line": 158,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_activities",
              "docstring": "Save activities to file",
              "args": [
                "self"
              ],
              "line": 167,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_log_activity",
              "docstring": "Log an ML activity",
              "args": [
                "self",
                "description",
                "data"
              ],
              "line": 172,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_create_visual_model",
              "docstring": "Create visual recognition model",
              "args": [
                "self"
              ],
              "line": 182,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_create_behavior_model",
              "docstring": "Create behavior learning model",
              "args": [
                "self"
              ],
              "line": 207,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_create_pattern_model",
              "docstring": "Create pattern recognition model",
              "args": [
                "self"
              ],
              "line": 227,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_create_echo_value_model",
              "docstring": "Create echo value prediction model",
              "args": [
                "self"
              ],
              "line": 247,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "detect_element",
              "docstring": "Detect UI element using visual model and template matching",
              "args": [
                "self",
                "screenshot",
                "template",
                "threshold"
              ],
              "line": 267,
              "returns": "<ast.Subscript object at 0x7f2f2d5e8810>",
              "complexity": 14
            },
            {
              "name": "optimize_movement",
              "docstring": "Optimize mouse movement path",
              "args": [
                "self",
                "start_pos",
                "end_pos"
              ],
              "line": 335,
              "returns": "<ast.Subscript object at 0x7f2f2d8f1710>",
              "complexity": 4
            },
            {
              "name": "learn_from_interaction",
              "docstring": "Learn from interaction outcomes",
              "args": [
                "self",
                "interaction_type",
                "start_state",
                "end_state",
                "success"
              ],
              "line": 389,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_interaction_history",
              "docstring": "Save interaction history to disk",
              "args": [
                "self"
              ],
              "line": 416,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_update_behavior_model",
              "docstring": "Update behavior model based on interaction history",
              "args": [
                "self"
              ],
              "line": 426,
              "returns": "Any",
              "complexity": 11
            },
            {
              "name": "analyze_patterns",
              "docstring": "Analyze interaction patterns",
              "args": [
                "self",
                "interactions"
              ],
              "line": 490,
              "returns": "Dict",
              "complexity": 7
            },
            {
              "name": "predict_echo_value",
              "docstring": "Predict echo value using the echo value model",
              "args": [
                "self",
                "features"
              ],
              "line": 572,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "_fallback_detect_element",
              "docstring": "Simple fallback element detection without CV2",
              "args": [
                "self",
                "screenshot",
                "template",
                "threshold"
              ],
              "line": 582,
              "returns": "<ast.Subscript object at 0x7f2f2d6bb650>",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 75,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'pickle', 'PIL', 'datetime', 'logging', 'tensorflow', 'time', 'typing', 'cv2', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    ml_system[ml_system]\n    ml_system_FallbackModel[FallbackModel]\n    ml_system --> ml_system_FallbackModel\n    ml_system_FallbackModel___init__[__init__()]\n    ml_system_FallbackModel --> ml_system_FallbackModel___init__\n    ml_system_FallbackModel_predict[predict()]\n    ml_system_FallbackModel --> ml_system_FallbackModel_predict\n    ml_system_FallbackModel_fit[fit()]\n    ml_system_FallbackModel --> ml_system_FallbackModel_fit\n    ml_system_FallbackModel_save[save()]\n    ml_system_FallbackModel --> ml_system_FallbackModel_save\n    ml_system_FallbackModel_load[load()]\n    ml_system_FallbackModel --> ml_system_FallbackModel_load\n    ml_system_MLSystem[MLSystem]\n    ml_system --> ml_system_MLSystem\n    ml_system_MLSystem___init__[__init__()]\n    ml_system_MLSystem --> ml_system_MLSystem___init__\n    ml_system_MLSystem__load_models[_load_models()]\n    ml_system_MLSystem --> ml_system_MLSystem__load_models\n    ml_system_MLSystem__create_fallback_models[_create_fallback_models()]\n    ml_system_MLSystem --> ml_system_MLSystem__create_fallback_models\n    ml_system_MLSystem__load_activities[_load_activities()]\n    ml_system_MLSystem --> ml_system_MLSystem__load_activities\n    ml_system_MLSystem__save_activities[_save_activities()]\n    ml_system_MLSystem --> ml_system_MLSystem__save_activities\n    style ml_system fill:#99ccff\n```"
    },
    "monitor": {
      "module": "monitor",
      "docstring": null,
      "imports": [
        "psutil",
        "time",
        "logging",
        "os",
        "datetime",
        "json",
        "subprocess",
        "pathlib",
        "platform",
        "requests"
      ],
      "classes": [
        {
          "name": "TeamMember",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "role",
                "priority"
              ],
              "line": 30,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 29,
          "cognitive_features": []
        },
        {
          "name": "DeepEchoMonitor",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 41,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_get_system_info",
              "docstring": "Get static system information",
              "args": [
                "self"
              ],
              "line": 59,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_process",
              "docstring": "Get the Deep Echo process if running",
              "args": [
                "self"
              ],
              "line": 69,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "get_system_stats",
              "docstring": "Get detailed system resource statistics",
              "args": [
                "self"
              ],
              "line": 79,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_process_stats",
              "docstring": "Get detailed process statistics",
              "args": [
                "self",
                "process"
              ],
              "line": 106,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "check_resource_pressure",
              "docstring": "Check for resource pressure and adjust priorities",
              "args": [
                "self",
                "stats"
              ],
              "line": 139,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_adjust_priorities",
              "docstring": "Adjust process priorities based on resource pressure",
              "args": [
                "self",
                "resource_type"
              ],
              "line": 159,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "save_stats",
              "docstring": "Save statistics with rotation",
              "args": [
                "self",
                "stats"
              ],
              "line": 179,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "monitor",
              "docstring": "Main monitoring loop with team awareness",
              "args": [
                "self"
              ],
              "line": 200,
              "returns": "Any",
              "complexity": 6
            }
          ],
          "bases": [],
          "line": 40,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'subprocess', 'psutil', 'pathlib', 'platform', 'datetime', 'logging', 'os', 'time', 'requests', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    monitor[monitor]\n    monitor_TeamMember[TeamMember]\n    monitor --> monitor_TeamMember\n    monitor_TeamMember___init__[__init__()]\n    monitor_TeamMember --> monitor_TeamMember___init__\n    monitor_DeepEchoMonitor[DeepEchoMonitor]\n    monitor --> monitor_DeepEchoMonitor\n    monitor_DeepEchoMonitor___init__[__init__()]\n    monitor_DeepEchoMonitor --> monitor_DeepEchoMonitor___init__\n    monitor_DeepEchoMonitor__get_system_info[_get_system_info()]\n    monitor_DeepEchoMonitor --> monitor_DeepEchoMonitor__get_system_info\n    monitor_DeepEchoMonitor_get_process[get_process()]\n    monitor_DeepEchoMonitor --> monitor_DeepEchoMonitor_get_process\n    monitor_DeepEchoMonitor_get_system_stats[get_system_stats()]\n    monitor_DeepEchoMonitor --> monitor_DeepEchoMonitor_get_system_stats\n    monitor_DeepEchoMonitor_get_process_stats[get_process_stats()]\n    monitor_DeepEchoMonitor --> monitor_DeepEchoMonitor_get_process_stats\n```"
    },
    "monitor_interface": {
      "module": "monitor_interface",
      "docstring": null,
      "imports": [
        "curses",
        "asyncio",
        "logging",
        "time",
        "json",
        "pathlib",
        "datetime",
        "typing",
        "psutil",
        "signal"
      ],
      "classes": [
        {
          "name": "MonitorInterface",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "screen"
              ],
              "line": 13,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_status",
              "docstring": "Update system status",
              "args": [
                "self"
              ],
              "line": 38,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "update_logs",
              "docstring": "Update log contents",
              "args": [
                "self"
              ],
              "line": 47,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "update_system_stats",
              "docstring": "Update system statistics",
              "args": [
                "self"
              ],
              "line": 59,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_status_color",
              "docstring": "Get color based on health score",
              "args": [
                "self",
                "health"
              ],
              "line": 70,
              "returns": "int",
              "complexity": 3
            },
            {
              "name": "draw_header",
              "docstring": "Draw header section",
              "args": [
                "self"
              ],
              "line": 79,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "draw_logs",
              "docstring": "Draw log section",
              "args": [
                "self"
              ],
              "line": 110,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "run",
              "docstring": "Main interface loop",
              "args": [
                "self"
              ],
              "line": 141,
              "returns": "Any",
              "complexity": 6
            }
          ],
          "bases": [],
          "line": 12,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": null,
          "args": [
            "screen"
          ],
          "line": 182,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'psutil', 'signal', 'datetime', 'logging', 'curses', 'time', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    monitor_interface[monitor_interface]\n    monitor_interface_MonitorInterface[MonitorInterface]\n    monitor_interface --> monitor_interface_MonitorInterface\n    monitor_interface_MonitorInterface___init__[__init__()]\n    monitor_interface_MonitorInterface --> monitor_interface_MonitorInterface___init__\n    monitor_interface_MonitorInterface_update_status[update_status()]\n    monitor_interface_MonitorInterface --> monitor_interface_MonitorInterface_update_status\n    monitor_interface_MonitorInterface_update_logs[update_logs()]\n    monitor_interface_MonitorInterface --> monitor_interface_MonitorInterface_update_logs\n    monitor_interface_MonitorInterface_update_system_stats[update_system_stats()]\n    monitor_interface_MonitorInterface --> monitor_interface_MonitorInterface_update_system_stats\n    monitor_interface_MonitorInterface_get_status_color[get_status_color()]\n    monitor_interface_MonitorInterface --> monitor_interface_MonitorInterface_get_status_color\n    monitor_interface_main[main()]\n    monitor_interface --> monitor_interface_main\n```"
    },
    "moses_evolutionary_search": {
      "module": "moses_evolutionary_search",
      "docstring": "MOSES-Inspired Evolutionary Search for Cognitive Grammar Fragments\n\nThis module implements evolutionary optimization for discovering and optimizing\ncognitive grammar patterns in the distributed system. Based on the MOSES\n(Meta-Optimizing Semantic Evolutionary Search) approach.\n\nKey Features:\n- Genetic algorithm-like optimization of cognitive patterns\n- Fitness evaluation based on semantic coherence and attention allocation\n- Population-based search with selection, mutation, and crossover\n- Integration with hypergraph fragments and tensor operations",
      "imports": [
        "random",
        "time",
        "uuid",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "copy",
        "math",
        "math"
      ],
      "classes": [
        {
          "name": "MutationType",
          "docstring": "Types of mutations for cognitive patterns",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 26,
          "cognitive_features": []
        },
        {
          "name": "SelectionMethod",
          "docstring": "Selection methods for evolutionary search",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 34,
          "cognitive_features": []
        },
        {
          "name": "CognitivePattern",
          "docstring": "Represents a cognitive pattern for evolutionary optimization",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 53,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "copy",
              "docstring": "Create a deep copy of the pattern",
              "args": [
                "self"
              ],
              "line": 57,
              "returns": "CognitivePattern",
              "complexity": 1
            },
            {
              "name": "to_dict",
              "docstring": "Convert pattern to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 71,
              "returns": "<ast.Subscript object at 0x7f2f2d883750>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 42,
          "cognitive_features": []
        },
        {
          "name": "EvolutionaryParameters",
          "docstring": "Parameters for evolutionary search",
          "methods": [],
          "bases": [],
          "line": 85,
          "cognitive_features": []
        },
        {
          "name": "FitnessEvaluator",
          "docstring": "Evaluates fitness of cognitive patterns",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 100,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "evaluate_pattern",
              "docstring": "Evaluate fitness of a cognitive pattern",
              "args": [
                "self",
                "pattern",
                "context"
              ],
              "line": 104,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "_evaluate_semantic_coherence",
              "docstring": "Evaluate semantic coherence of the pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 140,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "_evaluate_attention_efficiency",
              "docstring": "Evaluate attention allocation efficiency",
              "args": [
                "self",
                "pattern"
              ],
              "line": 183,
              "returns": "float",
              "complexity": 3
            },
            {
              "name": "_evaluate_structural_complexity",
              "docstring": "Evaluate structural complexity (prefer moderate complexity)",
              "args": [
                "self",
                "pattern"
              ],
              "line": 206,
              "returns": "float",
              "complexity": 4
            },
            {
              "name": "_evaluate_contextual_relevance",
              "docstring": "Evaluate relevance to current context",
              "args": [
                "self",
                "pattern",
                "context"
              ],
              "line": 247,
              "returns": "float",
              "complexity": 4
            },
            {
              "name": "_evaluate_novelty",
              "docstring": "Evaluate novelty compared to previous patterns",
              "args": [
                "self",
                "pattern"
              ],
              "line": 268,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "_gaussian_fitness",
              "docstring": "Calculate fitness using Gaussian distribution around optimal range",
              "args": [
                "self",
                "value",
                "optimal_range"
              ],
              "line": 282,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_get_prime_factors",
              "docstring": "Get prime factors from tensor shape dimensions",
              "args": [
                "self",
                "shape"
              ],
              "line": 293,
              "returns": "<ast.Subscript object at 0x7f2f2d88dc90>",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 97,
          "cognitive_features": []
        },
        {
          "name": "MOSESEvolutionarySearch",
          "docstring": "Main evolutionary search engine for cognitive patterns",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id",
                "parameters"
              ],
              "line": 309,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "initialize_population",
              "docstring": "Initialize the population with random or seed patterns",
              "args": [
                "self",
                "seed_patterns"
              ],
              "line": 320,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "evolve",
              "docstring": "Run evolutionary search for specified generations",
              "args": [
                "self",
                "generations",
                "context"
              ],
              "line": 338,
              "returns": "<ast.Subscript object at 0x7f2f2d6b9d50>",
              "complexity": 8
            },
            {
              "name": "_create_random_pattern",
              "docstring": "Create a random cognitive pattern",
              "args": [
                "self"
              ],
              "line": 377,
              "returns": "CognitivePattern",
              "complexity": 4
            },
            {
              "name": "_create_random_hypergraph_genes",
              "docstring": "Create random hypergraph pattern genes",
              "args": [
                "self"
              ],
              "line": 398,
              "returns": "<ast.Subscript object at 0x7f2f2d767ad0>",
              "complexity": 4
            },
            {
              "name": "_create_random_tensor_genes",
              "docstring": "Create random tensor pattern genes",
              "args": [
                "self"
              ],
              "line": 429,
              "returns": "<ast.Subscript object at 0x7f2f2d891190>",
              "complexity": 3
            },
            {
              "name": "_create_random_symbolic_genes",
              "docstring": "Create random symbolic pattern genes",
              "args": [
                "self"
              ],
              "line": 449,
              "returns": "<ast.Subscript object at 0x7f2f2d777850>",
              "complexity": 2
            },
            {
              "name": "_create_random_hybrid_genes",
              "docstring": "Create random hybrid pattern genes",
              "args": [
                "self"
              ],
              "line": 468,
              "returns": "<ast.Subscript object at 0x7f2f2d85e550>",
              "complexity": 1
            },
            {
              "name": "_create_next_generation",
              "docstring": "Create the next generation through selection, crossover, and mutation",
              "args": [
                "self"
              ],
              "line": 479,
              "returns": "<ast.Subscript object at 0x7f2f2d701510>",
              "complexity": 4
            },
            {
              "name": "_select_parent",
              "docstring": "Select parent using specified selection method",
              "args": [
                "self"
              ],
              "line": 508,
              "returns": "CognitivePattern",
              "complexity": 4
            },
            {
              "name": "_tournament_selection",
              "docstring": "Tournament selection",
              "args": [
                "self"
              ],
              "line": 519,
              "returns": "CognitivePattern",
              "complexity": 1
            },
            {
              "name": "_roulette_wheel_selection",
              "docstring": "Roulette wheel selection",
              "args": [
                "self"
              ],
              "line": 525,
              "returns": "CognitivePattern",
              "complexity": 4
            },
            {
              "name": "_rank_based_selection",
              "docstring": "Rank-based selection",
              "args": [
                "self"
              ],
              "line": 541,
              "returns": "CognitivePattern",
              "complexity": 3
            },
            {
              "name": "_elitist_selection",
              "docstring": "Elitist selection (always select from top performers)",
              "args": [
                "self"
              ],
              "line": 557,
              "returns": "CognitivePattern",
              "complexity": 1
            },
            {
              "name": "_crossover",
              "docstring": "Create offspring through crossover",
              "args": [
                "self",
                "parent1",
                "parent2"
              ],
              "line": 562,
              "returns": "CognitivePattern",
              "complexity": 2
            },
            {
              "name": "_blend_genes",
              "docstring": "Blend genes from two parents",
              "args": [
                "self",
                "genes1",
                "genes2"
              ],
              "line": 590,
              "returns": "<ast.Subscript object at 0x7f2f2d831bd0>",
              "complexity": 8
            },
            {
              "name": "_blend_lists",
              "docstring": "Blend two lists",
              "args": [
                "self",
                "list1",
                "list2"
              ],
              "line": 616,
              "returns": "<ast.Subscript object at 0x7f2f2d5eaa90>",
              "complexity": 7
            },
            {
              "name": "_mutate",
              "docstring": "Apply mutation to a pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 636,
              "returns": "CognitivePattern",
              "complexity": 6
            },
            {
              "name": "_mutate_weights",
              "docstring": "Mutate numerical weights in the pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 654,
              "returns": "Any",
              "complexity": 8
            },
            {
              "name": "_mutate_structure",
              "docstring": "Mutate structural elements of the pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 670,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_mutate_attention",
              "docstring": "Mutate attention allocation in the pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 689,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_mutate_semantics",
              "docstring": "Mutate semantic aspects of the pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 700,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_mutate_tensor_shape",
              "docstring": "Mutate tensor shape (if applicable)",
              "args": [
                "self",
                "pattern"
              ],
              "line": 716,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_calculate_generation_stats",
              "docstring": "Calculate statistics for current generation",
              "args": [
                "self"
              ],
              "line": 729,
              "returns": "<ast.Subscript object at 0x7f2f2d8adb10>",
              "complexity": 2
            },
            {
              "name": "_calculate_std",
              "docstring": "Calculate standard deviation",
              "args": [
                "self",
                "values"
              ],
              "line": 747,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "_calculate_diversity",
              "docstring": "Calculate population diversity",
              "args": [
                "self"
              ],
              "line": 756,
              "returns": "float",
              "complexity": 2
            },
            {
              "name": "get_best_patterns",
              "docstring": "Get top-k best patterns from evolution",
              "args": [
                "self",
                "top_k"
              ],
              "line": 765,
              "returns": "<ast.Subscript object at 0x7f2f2d739290>",
              "complexity": 1
            },
            {
              "name": "export_evolution_results",
              "docstring": "Export complete evolution results",
              "args": [
                "self"
              ],
              "line": 770,
              "returns": "<ast.Subscript object at 0x7f2f2d739490>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 306,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'random', 'dataclasses', 'uuid', 'logging', 'copy', 'enum', 'time', 'math', 'typing'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    moses_evolutionary_search[moses_evolutionary_search]\n    moses_evolutionary_search_MutationType[MutationType]\n    moses_evolutionary_search --> moses_evolutionary_search_MutationType\n    moses_evolutionary_search_SelectionMethod[SelectionMethod]\n    moses_evolutionary_search --> moses_evolutionary_search_SelectionMethod\n    moses_evolutionary_search_CognitivePattern[CognitivePattern]\n    moses_evolutionary_search --> moses_evolutionary_search_CognitivePattern\n    moses_evolutionary_search_CognitivePattern___post_init__[__post_init__()]\n    moses_evolutionary_search_CognitivePattern --> moses_evolutionary_search_CognitivePattern___post_init__\n    moses_evolutionary_search_CognitivePattern_copy[copy()]\n    moses_evolutionary_search_CognitivePattern --> moses_evolutionary_search_CognitivePattern_copy\n    moses_evolutionary_search_CognitivePattern_to_dict[to_dict()]\n    moses_evolutionary_search_CognitivePattern --> moses_evolutionary_search_CognitivePattern_to_dict\n    moses_evolutionary_search_EvolutionaryParameters[EvolutionaryParameters]\n    moses_evolutionary_search --> moses_evolutionary_search_EvolutionaryParameters\n    moses_evolutionary_search_FitnessEvaluator[FitnessEvaluator]\n    moses_evolutionary_search --> moses_evolutionary_search_FitnessEvaluator\n    moses_evolutionary_search_FitnessEvaluator___init__[__init__()]\n    moses_evolutionary_search_FitnessEvaluator --> moses_evolutionary_search_FitnessEvaluator___init__\n    moses_evolutionary_search_FitnessEvaluator_evaluate_pattern[evaluate_pattern()]\n    moses_evolutionary_search_FitnessEvaluator --> moses_evolutionary_search_FitnessEvaluator_evaluate_pattern\n    moses_evolutionary_search_FitnessEvaluator__evaluate_semantic_coherence[_evaluate_semantic_coherence()]\n    moses_evolutionary_search_FitnessEvaluator --> moses_evolutionary_search_FitnessEvaluator__evaluate_semantic_coherence\n    moses_evolutionary_search_FitnessEvaluator__evaluate_attention_efficiency[_evaluate_attention_efficiency()]\n    moses_evolutionary_search_FitnessEvaluator --> moses_evolutionary_search_FitnessEvaluator__evaluate_attention_efficiency\n    moses_evolutionary_search_FitnessEvaluator__evaluate_structural_complexity[_evaluate_structural_complexity()]\n    moses_evolutionary_search_FitnessEvaluator --> moses_evolutionary_search_FitnessEvaluator__evaluate_structural_complexity\n    moses_evolutionary_search_MOSESEvolutionarySearch[MOSESEvolutionarySearch]\n    moses_evolutionary_search --> moses_evolutionary_search_MOSESEvolutionarySearch\n    moses_evolutionary_search_MOSESEvolutionarySearch___init__[__init__()]\n    moses_evolutionary_search_MOSESEvolutionarySearch --> moses_evolutionary_search_MOSESEvolutionarySearch___init__\n    moses_evolutionary_search_MOSESEvolutionarySearch_initialize_population[initialize_population()]\n    moses_evolutionary_search_MOSESEvolutionarySearch --> moses_evolutionary_search_MOSESEvolutionarySearch_initialize_population\n    moses_evolutionary_search_MOSESEvolutionarySearch_evolve[evolve()]\n    moses_evolutionary_search_MOSESEvolutionarySearch --> moses_evolutionary_search_MOSESEvolutionarySearch_evolve\n    moses_evolutionary_search_MOSESEvolutionarySearch__create_random_pattern[_create_random_pattern()]\n    moses_evolutionary_search_MOSESEvolutionarySearch --> moses_evolutionary_search_MOSESEvolutionarySearch__create_random_pattern\n    moses_evolutionary_search_MOSESEvolutionarySearch__create_random_hypergraph_genes[_create_random_hypergraph_genes()]\n    moses_evolutionary_search_MOSESEvolutionarySearch --> moses_evolutionary_search_MOSESEvolutionarySearch__create_random_hypergraph_genes\n    style moses_evolutionary_search fill:#99ccff\n```"
    },
    "network_config": {
      "module": "network_config",
      "docstring": null,
      "imports": [
        "os",
        "json",
        "logging",
        "requests",
        "pathlib",
        "socket",
        "netifaces",
        "yaml"
      ],
      "classes": [
        {
          "name": "TeamNetwork",
          "docstring": "Manages network configuration for the distributed team",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 50,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_load_config",
              "docstring": "Load or create network configuration",
              "args": [
                "self"
              ],
              "line": 57,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_create_default_config",
              "docstring": "Create default network configuration",
              "args": [
                "self"
              ],
              "line": 64,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_save_config",
              "docstring": "Save network configuration",
              "args": [
                "self",
                "config"
              ],
              "line": 102,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_team_member_info",
              "docstring": "Get network information for a team member",
              "args": [
                "self",
                "role"
              ],
              "line": 107,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_host",
              "docstring": "Update host information for a team member",
              "args": [
                "self",
                "role",
                "host"
              ],
              "line": 111,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_routes",
              "docstring": "Get network routes for current role",
              "args": [
                "self"
              ],
              "line": 118,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "generate_nettica_config",
              "docstring": "Generate Nettica network configuration",
              "args": [
                "self"
              ],
              "line": 122,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "setup_network",
              "docstring": "Initialize network setup",
              "args": [
                "self"
              ],
              "line": 151,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "check_connectivity",
              "docstring": "Check connectivity to another team member",
              "args": [
                "self",
                "target_role"
              ],
              "line": 175,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "get_network_status",
              "docstring": "Get status of all network connections",
              "args": [
                "self"
              ],
              "line": 193,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 14,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'socket', 'pathlib', 'netifaces', 'os', 'logging', 'yaml', 'requests', 'json'}",
      "cognitive_patterns": [
        "Neural Network Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    network_config[network_config]\n    network_config_TeamNetwork[TeamNetwork]\n    network_config --> network_config_TeamNetwork\n    network_config_TeamNetwork___init__[__init__()]\n    network_config_TeamNetwork --> network_config_TeamNetwork___init__\n    network_config_TeamNetwork__load_config[_load_config()]\n    network_config_TeamNetwork --> network_config_TeamNetwork__load_config\n    network_config_TeamNetwork__create_default_config[_create_default_config()]\n    network_config_TeamNetwork --> network_config_TeamNetwork__create_default_config\n    network_config_TeamNetwork__save_config[_save_config()]\n    network_config_TeamNetwork --> network_config_TeamNetwork__save_config\n    network_config_TeamNetwork_get_team_member_info[get_team_member_info()]\n    network_config_TeamNetwork --> network_config_TeamNetwork_get_team_member_info\n    style network_config fill:#ffcc99\n```"
    },
    "neural_symbolic_synthesis": {
      "module": "neural_symbolic_synthesis",
      "docstring": "Neural-Symbolic Synthesis Engine for Phase 3 Echo9ML\n\nThis module implements enhanced neural-symbolic synthesis operations\nfor seamless integration between neural tensor computation and symbolic\nreasoning within the echo9ml distributed cognitive grammar framework.\n\nKey Features:\n- Advanced neural-symbolic kernel operations\n- AtomSpace integration hooks for symbolic inference\n- Real-time synthesis pathway validation\n- Performance benchmarking and metrics\n- Symbolic \u2194 neural pathway documentation",
      "imports": [
        "json",
        "time",
        "hashlib",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "ggml_tensor_kernel",
        "tensor_fragment_architecture"
      ],
      "classes": [
        {
          "name": "SynthesisOperationType",
          "docstring": "Advanced neural-symbolic synthesis operations for Phase 3",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 35,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        },
        {
          "name": "AtomSpaceIntegrationMode",
          "docstring": "Integration modes with OpenCog AtomSpace",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 46,
          "cognitive_features": []
        },
        {
          "name": "SymbolicPattern",
          "docstring": "Symbolic pattern representation for neural-symbolic synthesis",
          "methods": [
            {
              "name": "to_atomspace_format",
              "docstring": "Convert pattern to AtomSpace compatible format",
              "args": [
                "self"
              ],
              "line": 65,
              "returns": "<ast.Subscript object at 0x7f2f2d8d3350>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 55,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        },
        {
          "name": "NeuralSymbolicPathway",
          "docstring": "Neural-symbolic pathway for synthesis validation",
          "methods": [],
          "bases": [],
          "line": 80,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        },
        {
          "name": "SynthesisMetrics",
          "docstring": "Performance metrics for neural-symbolic synthesis",
          "methods": [
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 100,
              "returns": "<ast.Subscript object at 0x7f2f2d864950>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 91,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        },
        {
          "name": "NeuralSymbolicSynthesisEngine",
          "docstring": "Enhanced synthesis engine for Phase 3 neural-symbolic operations",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 113,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_setup_atomspace_integration",
              "docstring": "Setup AtomSpace integration hooks for symbolic inference",
              "args": [
                "self"
              ],
              "line": 146,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_symbolic_pattern",
              "docstring": "Create a new symbolic pattern for neural-symbolic synthesis",
              "args": [
                "self",
                "pattern_data",
                "pattern_type"
              ],
              "line": 156,
              "returns": "SymbolicPattern",
              "complexity": 2
            },
            {
              "name": "execute_synthesis_operation",
              "docstring": "Execute neural-symbolic synthesis operation with performance tracking",
              "args": [
                "self",
                "operation_type",
                "operation_params"
              ],
              "line": 182,
              "returns": "<ast.Subscript object at 0x7f2f2d86db10>",
              "complexity": 3
            },
            {
              "name": "_encode_symbolic_patterns",
              "docstring": "Encode symbolic patterns into neural tensor representations",
              "args": [
                "self",
                "params"
              ],
              "line": 228,
              "returns": "<ast.Subscript object at 0x7f2f2d898c50>",
              "complexity": 3
            },
            {
              "name": "_bridge_neural_symbolic",
              "docstring": "Bridge neural tensor representations with symbolic reasoning",
              "args": [
                "self",
                "params"
              ],
              "line": 274,
              "returns": "<ast.Subscript object at 0x7f2f2d8cfdd0>",
              "complexity": 2
            },
            {
              "name": "_integrate_atomspace",
              "docstring": "Integrate with OpenCog AtomSpace for symbolic inference",
              "args": [
                "self",
                "params"
              ],
              "line": 318,
              "returns": "<ast.Subscript object at 0x7f2f2d5eb610>",
              "complexity": 2
            },
            {
              "name": "_synthesize_inference",
              "docstring": "Synthesize neural and symbolic inference pathways",
              "args": [
                "self",
                "params"
              ],
              "line": 342,
              "returns": "<ast.Subscript object at 0x7f2f2d8f0d90>",
              "complexity": 2
            },
            {
              "name": "_validate_pathways",
              "docstring": "Validate neural-symbolic synthesis pathways",
              "args": [
                "self",
                "params"
              ],
              "line": 370,
              "returns": "<ast.Subscript object at 0x7f2f2d8965d0>",
              "complexity": 3
            },
            {
              "name": "_distill_knowledge",
              "docstring": "Distill knowledge from neural-symbolic synthesis pathways",
              "args": [
                "self",
                "params"
              ],
              "line": 406,
              "returns": "<ast.Subscript object at 0x7f2f2d8eac10>",
              "complexity": 3
            },
            {
              "name": "_ensure_semantic_coherence",
              "docstring": "Ensure semantic coherence across neural-symbolic representations",
              "args": [
                "self",
                "params"
              ],
              "line": 436,
              "returns": "<ast.Subscript object at 0x7f2f2d8f80d0>",
              "complexity": 4
            },
            {
              "name": "_ground_symbolic_patterns",
              "docstring": "Ground symbolic patterns in neural tensor representations",
              "args": [
                "self",
                "params"
              ],
              "line": 464,
              "returns": "<ast.Subscript object at 0x7f2f2d7014d0>",
              "complexity": 3
            },
            {
              "name": "_atomspace_direct_mapping",
              "docstring": "Direct mapping to AtomSpace atoms",
              "args": [
                "self",
                "patterns",
                "params"
              ],
              "line": 495,
              "returns": "<ast.Subscript object at 0x7f2f2d6b46d0>",
              "complexity": 4
            },
            {
              "name": "_atomspace_pattern_matching",
              "docstring": "Pattern matching with AtomSpace",
              "args": [
                "self",
                "patterns",
                "params"
              ],
              "line": 522,
              "returns": "<ast.Subscript object at 0x7f2f2d776550>",
              "complexity": 2
            },
            {
              "name": "_atomspace_probabilistic_logic",
              "docstring": "Probabilistic logic integration with AtomSpace",
              "args": [
                "self",
                "patterns",
                "params"
              ],
              "line": 546,
              "returns": "<ast.Subscript object at 0x7f2f2d893710>",
              "complexity": 2
            },
            {
              "name": "_atomspace_temporal_reasoning",
              "docstring": "Temporal reasoning integration with AtomSpace",
              "args": [
                "self",
                "patterns",
                "params"
              ],
              "line": 568,
              "returns": "<ast.Subscript object at 0x7f2f2d764810>",
              "complexity": 2
            },
            {
              "name": "_atomspace_causal_inference",
              "docstring": "Causal inference integration with AtomSpace",
              "args": [
                "self",
                "patterns",
                "params"
              ],
              "line": 590,
              "returns": "<ast.Subscript object at 0x7f2f2d888110>",
              "complexity": 2
            },
            {
              "name": "_generate_semantic_embedding",
              "docstring": "Generate basic semantic embedding from pattern structure",
              "args": [
                "self",
                "pattern_data"
              ],
              "line": 615,
              "returns": "<ast.Subscript object at 0x7f2f2d854d50>",
              "complexity": 5
            },
            {
              "name": "_extract_symbolic_features",
              "docstring": "Extract symbolic features from context",
              "args": [
                "self",
                "symbolic_context"
              ],
              "line": 638,
              "returns": "<ast.Subscript object at 0x7f2f2d8709d0>",
              "complexity": 1
            },
            {
              "name": "_simulate_neural_activation",
              "docstring": "Simulate neural activation for premise",
              "args": [
                "self",
                "premise",
                "neural_context"
              ],
              "line": 648,
              "returns": "<ast.Subscript object at 0x7f2f2d8e7ed0>",
              "complexity": 1
            },
            {
              "name": "_simulate_symbolic_inference",
              "docstring": "Simulate symbolic inference",
              "args": [
                "self",
                "premise",
                "inference_rules"
              ],
              "line": 656,
              "returns": "<ast.Subscript object at 0x7f2f2d6bb6d0>",
              "complexity": 1
            },
            {
              "name": "_validate_pathway_coherence",
              "docstring": "Validate pathway coherence",
              "args": [
                "self",
                "pathway",
                "criteria"
              ],
              "line": 664,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_extract_knowledge_patterns",
              "docstring": "Extract knowledge patterns from pathway",
              "args": [
                "self",
                "pathway"
              ],
              "line": 676,
              "returns": "<ast.Subscript object at 0x7f2f2d845350>",
              "complexity": 1
            },
            {
              "name": "_calculate_semantic_coherence",
              "docstring": "Calculate semantic coherence of pattern",
              "args": [
                "self",
                "pattern"
              ],
              "line": 690,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_enhance_semantic_coherence",
              "docstring": "Enhance semantic coherence of pattern",
              "args": [
                "self",
                "pattern",
                "target_coherence"
              ],
              "line": 699,
              "returns": "<ast.Subscript object at 0x7f2f2d88ef90>",
              "complexity": 1
            },
            {
              "name": "_create_grounding_tensor",
              "docstring": "Create grounding tensor for symbolic pattern",
              "args": [
                "self",
                "pattern",
                "strategy"
              ],
              "line": 714,
              "returns": "<ast.Subscript object at 0x7f2f2d717b10>",
              "complexity": 2
            },
            {
              "name": "_estimate_memory_usage",
              "docstring": "Estimate current memory usage in bytes",
              "args": [
                "self"
              ],
              "line": 731,
              "returns": "int",
              "complexity": 1
            },
            {
              "name": "get_synthesis_documentation",
              "docstring": "Get comprehensive synthesis engine documentation",
              "args": [
                "self"
              ],
              "line": 741,
              "returns": "<ast.Subscript object at 0x7f2f2d473350>",
              "complexity": 1
            },
            {
              "name": "get_performance_summary",
              "docstring": "Get performance metrics summary",
              "args": [
                "self"
              ],
              "line": 765,
              "returns": "<ast.Subscript object at 0x7f2f2d473690>",
              "complexity": 1
            },
            {
              "name": "_get_performance_summary",
              "docstring": "Internal method to calculate performance summary",
              "args": [
                "self"
              ],
              "line": 769,
              "returns": "<ast.Subscript object at 0x7f2f2d76db50>",
              "complexity": 2
            },
            {
              "name": "export_synthesis_catalog",
              "docstring": "Export synthesis catalog for sharing",
              "args": [
                "self"
              ],
              "line": 795,
              "returns": "<ast.Subscript object at 0x7f2f2d720f90>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 110,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_neural_symbolic_synthesis_engine",
          "docstring": "Factory function to create neural-symbolic synthesis engine",
          "args": [
            "agent_id"
          ],
          "line": 820,
          "returns": "NeuralSymbolicSynthesisEngine",
          "complexity": 1,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'tensor_fragment_architecture', 'dataclasses', 'ggml_tensor_kernel', 'logging', 'enum', 'time', 'hashlib', 'typing', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "Neural Network Pattern"
      ],
      "architectural_role": "Neural Processing",
      "flowchart": "```mermaid\ngraph TD\n    neural_symbolic_synthesis[neural_symbolic_synthesis]\n    neural_symbolic_synthesis_SynthesisOperationType[SynthesisOperationType]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_SynthesisOperationType\n    neural_symbolic_synthesis_AtomSpaceIntegrationMode[AtomSpaceIntegrationMode]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_AtomSpaceIntegrationMode\n    neural_symbolic_synthesis_SymbolicPattern[SymbolicPattern]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_SymbolicPattern\n    neural_symbolic_synthesis_SymbolicPattern_to_atomspace_format[to_atomspace_format()]\n    neural_symbolic_synthesis_SymbolicPattern --> neural_symbolic_synthesis_SymbolicPattern_to_atomspace_format\n    neural_symbolic_synthesis_NeuralSymbolicPathway[NeuralSymbolicPathway]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_NeuralSymbolicPathway\n    neural_symbolic_synthesis_SynthesisMetrics[SynthesisMetrics]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_SynthesisMetrics\n    neural_symbolic_synthesis_SynthesisMetrics_to_dict[to_dict()]\n    neural_symbolic_synthesis_SynthesisMetrics --> neural_symbolic_synthesis_SynthesisMetrics_to_dict\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine[NeuralSymbolicSynthesisEngine]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine___init__[__init__()]\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine --> neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine___init__\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine__setup_atomspace_integration[_setup_atomspace_integration()]\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine --> neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine__setup_atomspace_integration\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine_create_symbolic_pattern[create_symbolic_pattern()]\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine --> neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine_create_symbolic_pattern\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine_execute_synthesis_operation[execute_synthesis_operation()]\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine --> neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine_execute_synthesis_operation\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine__encode_symbolic_patterns[_encode_symbolic_patterns()]\n    neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine --> neural_symbolic_synthesis_NeuralSymbolicSynthesisEngine__encode_symbolic_patterns\n    neural_symbolic_synthesis_create_neural_symbolic_synthesis_engine[create_neural_symbolic_synthesis_engine()]\n    neural_symbolic_synthesis --> neural_symbolic_synthesis_create_neural_symbolic_synthesis_engine\n    style neural_symbolic_synthesis fill:#99ff99\n```"
    },
    "pattern languages": {
      "module": "pattern languages",
      "docstring": null,
      "imports": [],
      "classes": [
        {
          "name": "CityPattern",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "description"
              ],
              "line": 3,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "display",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 7,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 2,
          "cognitive_features": []
        },
        {
          "name": "MainStreet",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "description"
              ],
              "line": 13,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_district",
              "docstring": null,
              "args": [
                "self",
                "district"
              ],
              "line": 17,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [
            "CityPattern"
          ],
          "line": 12,
          "cognitive_features": []
        },
        {
          "name": "PublicSquare",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "description"
              ],
              "line": 24,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "host_meeting",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 27,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [
            "CityPattern"
          ],
          "line": 23,
          "cognitive_features": []
        },
        {
          "name": "Neighborhood",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "description"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_building",
              "docstring": null,
              "args": [
                "self",
                "building"
              ],
              "line": 37,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [
            "CityPattern"
          ],
          "line": 32,
          "cognitive_features": []
        },
        {
          "name": "Building",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "name",
                "description"
              ],
              "line": 44,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [
            "CityPattern"
          ],
          "line": 43,
          "cognitive_features": []
        },
        {
          "name": "EnterpriseCity",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 50,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_neighborhood",
              "docstring": null,
              "args": [
                "self",
                "neighborhood"
              ],
              "line": 58,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "display_city",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 63,
              "returns": "Any",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 49,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 74,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "set()",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    pattern languages[pattern languages]\n    pattern languages_CityPattern[CityPattern]\n    pattern languages --> pattern languages_CityPattern\n    pattern languages_CityPattern___init__[__init__()]\n    pattern languages_CityPattern --> pattern languages_CityPattern___init__\n    pattern languages_CityPattern_display[display()]\n    pattern languages_CityPattern --> pattern languages_CityPattern_display\n    pattern languages_MainStreet[MainStreet]\n    pattern languages --> pattern languages_MainStreet\n    pattern languages_MainStreet___init__[__init__()]\n    pattern languages_MainStreet --> pattern languages_MainStreet___init__\n    pattern languages_MainStreet_add_district[add_district()]\n    pattern languages_MainStreet --> pattern languages_MainStreet_add_district\n    pattern languages_PublicSquare[PublicSquare]\n    pattern languages --> pattern languages_PublicSquare\n    pattern languages_PublicSquare___init__[__init__()]\n    pattern languages_PublicSquare --> pattern languages_PublicSquare___init__\n    pattern languages_PublicSquare_host_meeting[host_meeting()]\n    pattern languages_PublicSquare --> pattern languages_PublicSquare_host_meeting\n    pattern languages_Neighborhood[Neighborhood]\n    pattern languages --> pattern languages_Neighborhood\n    pattern languages_Neighborhood___init__[__init__()]\n    pattern languages_Neighborhood --> pattern languages_Neighborhood___init__\n    pattern languages_Neighborhood_add_building[add_building()]\n    pattern languages_Neighborhood --> pattern languages_Neighborhood_add_building\n    pattern languages_Building[Building]\n    pattern languages --> pattern languages_Building\n    pattern languages_Building___init__[__init__()]\n    pattern languages_Building --> pattern languages_Building___init__\n    pattern languages_EnterpriseCity[EnterpriseCity]\n    pattern languages --> pattern languages_EnterpriseCity\n    pattern languages_EnterpriseCity___init__[__init__()]\n    pattern languages_EnterpriseCity --> pattern languages_EnterpriseCity___init__\n    pattern languages_EnterpriseCity_add_neighborhood[add_neighborhood()]\n    pattern languages_EnterpriseCity --> pattern languages_EnterpriseCity_add_neighborhood\n    pattern languages_EnterpriseCity_display_city[display_city()]\n    pattern languages_EnterpriseCity --> pattern languages_EnterpriseCity_display_city\n    pattern languages_main[main()]\n    pattern languages --> pattern languages_main\n```"
    },
    "personality_system": {
      "module": "personality_system",
      "docstring": null,
      "imports": [
        "numpy",
        "typing",
        "logging",
        "pathlib",
        "json",
        "datetime",
        "dataclasses",
        "time"
      ],
      "classes": [
        {
          "name": "PersonalityVector",
          "docstring": null,
          "methods": [
            {
              "name": "to_array",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 20,
              "returns": "<ast.Attribute object at 0x7f2f2d86df90>",
              "complexity": 1
            },
            {
              "name": "from_array",
              "docstring": null,
              "args": [
                "cls",
                "arr"
              ],
              "line": 32,
              "returns": "PersonalityVector",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 11,
          "cognitive_features": []
        },
        {
          "name": "EmotionalState",
          "docstring": null,
          "methods": [
            {
              "name": "to_array",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 49,
              "returns": "<ast.Attribute object at 0x7f2f2d8ddd90>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 44,
          "cognitive_features": [
            "emotion"
          ]
        },
        {
          "name": "Experience",
          "docstring": null,
          "methods": [],
          "bases": [],
          "line": 53,
          "cognitive_features": []
        },
        {
          "name": "PersonalitySystem",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 61,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_load_state",
              "docstring": "Load personality state from disk",
              "args": [
                "self"
              ],
              "line": 76,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_load_activities",
              "docstring": "Load existing activities",
              "args": [
                "self"
              ],
              "line": 91,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_activities",
              "docstring": "Save activities to file",
              "args": [
                "self"
              ],
              "line": 100,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_log_activity",
              "docstring": "Log a personality activity",
              "args": [
                "self",
                "description",
                "data"
              ],
              "line": 105,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "save_state",
              "docstring": "Save current personality state to disk",
              "args": [
                "self"
              ],
              "line": 115,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "process_experience",
              "docstring": "Process new experience and update personality",
              "args": [
                "self",
                "experience"
              ],
              "line": 128,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "get_response_modulation",
              "docstring": "Get personality-based response modulation factors",
              "args": [
                "self",
                "context"
              ],
              "line": 150,
              "returns": "<ast.Subscript object at 0x7f2f2d52cb50>",
              "complexity": 1
            },
            {
              "name": "_update_emotional_state",
              "docstring": "Update emotional state based on experience",
              "args": [
                "self",
                "experience"
              ],
              "line": 164,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_update_personality_traits",
              "docstring": "Update personality traits based on experience",
              "args": [
                "self",
                "experience"
              ],
              "line": 186,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_get_update_mask",
              "docstring": "Get update mask for different experience types",
              "args": [
                "self",
                "experience_type"
              ],
              "line": 207,
              "returns": "<ast.Attribute object at 0x7f2f2d8d3e50>",
              "complexity": 1
            },
            {
              "name": "_get_creativity_factor",
              "docstring": "Calculate creativity factor for responses",
              "args": [
                "self",
                "context"
              ],
              "line": 218,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_get_analytical_factor",
              "docstring": "Calculate analytical factor for responses",
              "args": [
                "self",
                "context"
              ],
              "line": 225,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_get_social_factor",
              "docstring": "Calculate social factor for responses",
              "args": [
                "self",
                "context"
              ],
              "line": 232,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_get_confidence_factor",
              "docstring": "Calculate confidence factor for responses",
              "args": [
                "self",
                "context"
              ],
              "line": 239,
              "returns": "float",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 60,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'dataclasses', 'datetime', 'logging', 'time', 'typing', 'json'}",
      "cognitive_patterns": [
        "State Machine Pattern"
      ],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    personality_system[personality_system]\n    personality_system_PersonalityVector[PersonalityVector]\n    personality_system --> personality_system_PersonalityVector\n    personality_system_PersonalityVector_to_array[to_array()]\n    personality_system_PersonalityVector --> personality_system_PersonalityVector_to_array\n    personality_system_PersonalityVector_from_array[from_array()]\n    personality_system_PersonalityVector --> personality_system_PersonalityVector_from_array\n    personality_system_EmotionalState[EmotionalState]\n    personality_system --> personality_system_EmotionalState\n    personality_system_EmotionalState_to_array[to_array()]\n    personality_system_EmotionalState --> personality_system_EmotionalState_to_array\n    personality_system_Experience[Experience]\n    personality_system --> personality_system_Experience\n    personality_system_PersonalitySystem[PersonalitySystem]\n    personality_system --> personality_system_PersonalitySystem\n    personality_system_PersonalitySystem___init__[__init__()]\n    personality_system_PersonalitySystem --> personality_system_PersonalitySystem___init__\n    personality_system_PersonalitySystem__load_state[_load_state()]\n    personality_system_PersonalitySystem --> personality_system_PersonalitySystem__load_state\n    personality_system_PersonalitySystem__load_activities[_load_activities()]\n    personality_system_PersonalitySystem --> personality_system_PersonalitySystem__load_activities\n    personality_system_PersonalitySystem__save_activities[_save_activities()]\n    personality_system_PersonalitySystem --> personality_system_PersonalitySystem__save_activities\n    personality_system_PersonalitySystem__log_activity[_log_activity()]\n    personality_system_PersonalitySystem --> personality_system_PersonalitySystem__log_activity\n```"
    },
    "phase1_verification": {
      "module": "phase1_verification",
      "docstring": "Phase 1 Verification and Completion Summary\n\nThis module provides final verification of Phase 1 implementation and demonstrates\nthat all core requirements have been successfully implemented, even if some test\nthresholds need adjustment for the structural differences between ko6ml primitives\nand AtomSpace hypergraph representation.",
      "imports": [
        "time",
        "typing"
      ],
      "classes": [],
      "functions": [
        {
          "name": "verify_phase1_implementation",
          "docstring": "Verify Phase 1 implementation against requirements",
          "args": [],
          "line": 13,
          "returns": "<ast.Subscript object at 0x7f2f2d8af0d0>",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "generate_completion_report",
          "docstring": "Generate final Phase 1 completion report",
          "args": [],
          "line": 168,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'typing', 'time'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    phase1_verification[phase1_verification]\n    phase1_verification_verify_phase1_implementation[verify_phase1_implementation()]\n    phase1_verification --> phase1_verification_verify_phase1_implementation\n    phase1_verification_generate_completion_report[generate_completion_report()]\n    phase1_verification --> phase1_verification_generate_completion_report\n    style phase1_verification fill:#99ccff\n```"
    },
    "phase3_demonstration": {
      "module": "phase3_demonstration",
      "docstring": "Phase 3 Demonstration: Neural-Symbolic Synthesis via Custom ggml Kernels\n\nThis demonstration script showcases the complete Phase 3 implementation\nof neural-symbolic synthesis capabilities in the echo9ml distributed\ncognitive grammar network.\n\nFeatures demonstrated:\n- Custom ggml kernel operations for symbolic tensor processing\n- Neural-symbolic bridge creation and validation\n- AtomSpace integration with multiple modes\n- Real-time performance benchmarking\n- End-to-end synthesis pipeline validation\n- Real data integration and testing",
      "imports": [
        "time",
        "json",
        "typing",
        "neural_symbolic_synthesis",
        "tensor_signature_benchmark"
      ],
      "classes": [],
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header",
          "args": [
            "title"
          ],
          "line": 33,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header",
          "args": [
            "title"
          ],
          "line": 39,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "print_result",
          "docstring": "Print operation results in a formatted way",
          "args": [
            "operation",
            "result"
          ],
          "line": 45,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "demonstrate_phase3_capabilities",
          "docstring": "Demonstrate complete Phase 3 neural-symbolic synthesis capabilities",
          "args": [],
          "line": 71,
          "returns": "Any",
          "complexity": 13,
          "cognitive_features": [
            "reasoning",
            "neural",
            "symbolic"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'neural_symbolic_synthesis', 'time', 'tensor_signature_benchmark', 'typing', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    phase3_demonstration[phase3_demonstration]\n    phase3_demonstration_print_section[print_section()]\n    phase3_demonstration --> phase3_demonstration_print_section\n    phase3_demonstration_print_subsection[print_subsection()]\n    phase3_demonstration --> phase3_demonstration_print_subsection\n    phase3_demonstration_print_result[print_result()]\n    phase3_demonstration --> phase3_demonstration_print_result\n    phase3_demonstration_demonstrate_phase3_capabilities[demonstrate_phase3_capabilities()]\n    phase3_demonstration --> phase3_demonstration_demonstrate_phase3_capabilities\n    style phase3_demonstration fill:#99ccff\n```"
    },
    "phase4_demo": {
      "module": "phase4_demo",
      "docstring": "Echo9ML Phase 4 Embodiment Layer Demonstration\n\nThis script demonstrates the complete Phase 4 implementation including:\n- Cognitive Mesh API server\n- Unity3D binding simulation\n- ROS binding simulation  \n- Web agent interface\n- Real-time bidirectional communication\n- Full-stack integration\n\nUsage:\n    python phase4_demo.py",
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "datetime",
        "pathlib",
        "threading",
        "webbrowser",
        "cognitive_mesh_api",
        "unity3d_binding",
        "ros_binding",
        "web_agent_interface",
        "aiohttp"
      ],
      "classes": [
        {
          "name": "Phase4Demo",
          "docstring": "Demonstration of Phase 4 Embodiment Layer",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 44,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "setup_web_interface",
              "docstring": "Setup the web agent interface",
              "args": [
                "self"
              ],
              "line": 79,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "run_web_interface",
              "docstring": "Run the web agent interface",
              "args": [
                "self"
              ],
              "line": 154,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "open_web_interface",
              "docstring": "Open the web interface in browser",
              "args": [
                "self"
              ],
              "line": 305,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 41,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "create_demo_summary",
          "docstring": "Create a summary document of the demo",
          "args": [],
          "line": 403,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'cognitive_mesh_api', 'pathlib', 'ros_binding', 'web_agent_interface', 'unity3d_binding', 'aiohttp', 'datetime', 'threading', 'logging', 'webbrowser', 'time', 'asyncio', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    phase4_demo[phase4_demo]\n    phase4_demo_Phase4Demo[Phase4Demo]\n    phase4_demo --> phase4_demo_Phase4Demo\n    phase4_demo_Phase4Demo___init__[__init__()]\n    phase4_demo_Phase4Demo --> phase4_demo_Phase4Demo___init__\n    phase4_demo_Phase4Demo_setup_web_interface[setup_web_interface()]\n    phase4_demo_Phase4Demo --> phase4_demo_Phase4Demo_setup_web_interface\n    phase4_demo_Phase4Demo_run_web_interface[run_web_interface()]\n    phase4_demo_Phase4Demo --> phase4_demo_Phase4Demo_run_web_interface\n    phase4_demo_Phase4Demo_open_web_interface[open_web_interface()]\n    phase4_demo_Phase4Demo --> phase4_demo_Phase4Demo_open_web_interface\n    phase4_demo_create_demo_summary[create_demo_summary()]\n    phase4_demo --> phase4_demo_create_demo_summary\n    style phase4_demo fill:#99ccff\n```"
    },
    "phase5_demonstration": {
      "module": "phase5_demonstration",
      "docstring": "Phase 5 Demonstration: Recursive Meta-Cognition & Evolutionary Optimization\n\nThis script demonstrates the complete Phase 5 implementation including:\n- Meta-cognitive pathways with recursive self-analysis\n- Adaptive optimization with evolutionary algorithms\n- Live metrics monitoring and visualization\n- Meta-cognitive recursion flowcharts and documentation\n\nUsage:\n    python phase5_demonstration.py",
      "imports": [
        "asyncio",
        "logging",
        "time",
        "json",
        "datetime",
        "pathlib",
        "meta_cognitive_recursion",
        "cognitive_evolution",
        "moses_evolutionary_search",
        "echo_evolution"
      ],
      "classes": [],
      "functions": [
        {
          "name": "generate_phase5_summary_report",
          "docstring": "Generate a comprehensive Phase 5 summary report",
          "args": [
            "observations",
            "adaptations",
            "metrics",
            "recursion_results",
            "flowchart"
          ],
          "line": 287,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'meta_cognitive_recursion', 'moses_evolutionary_search', 'datetime', 'logging', 'time', 'cognitive_evolution', 'echo_evolution', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    phase5_demonstration[phase5_demonstration]\n    phase5_demonstration_generate_phase5_summary_report[generate_phase5_summary_report()]\n    phase5_demonstration --> phase5_demonstration_generate_phase5_summary_report\n```"
    },
    "phase6_cognitive_unification": {
      "module": "phase6_cognitive_unification",
      "docstring": "Phase 6: Unified Cognitive Test Runner\nCognitive Unification and Tensor Field Verification\n\nThis module implements the unified cognitive tensor field testing\nas specified in Phase 6 of the Distributed Agentic Cognitive Grammar Network.",
      "imports": [
        "unittest",
        "pytest",
        "numpy",
        "json",
        "time",
        "pathlib",
        "typing",
        "subprocess",
        "sys",
        "importlib",
        "argparse",
        "echo9ml",
        "cognitive_architecture",
        "echo9ml",
        "echo9ml",
        "meta_cognitive_recursion"
      ],
      "classes": [
        {
          "name": "CognitiveUnificationTester",
          "docstring": "Unified testing system that verifies the cognitive tensor field\nand emergent properties of the echo9ml system",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 28,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "discover_cognitive_modules",
              "docstring": "Discover all cognitive-related modules",
              "args": [
                "self"
              ],
              "line": 35,
              "returns": "<ast.Subscript object at 0x7f2f2d8673d0>",
              "complexity": 4
            },
            {
              "name": "run_unified_cognitive_tests",
              "docstring": "Run all cognitive tests in a unified manner",
              "args": [
                "self"
              ],
              "line": 52,
              "returns": "<ast.Subscript object at 0x7f2f2d893790>",
              "complexity": 3
            },
            {
              "name": "_test_cognitive_module",
              "docstring": "Test an individual cognitive module",
              "args": [
                "self",
                "module_name"
              ],
              "line": 94,
              "returns": "<ast.Subscript object at 0x7f2f2d6b58d0>",
              "complexity": 9
            },
            {
              "name": "_run_integration_tests",
              "docstring": "Run integration tests across cognitive modules",
              "args": [
                "self"
              ],
              "line": 148,
              "returns": "<ast.Subscript object at 0x7f2f2d85e0d0>",
              "complexity": 8
            },
            {
              "name": "_verify_tensor_field",
              "docstring": "Verify the unified cognitive tensor field",
              "args": [
                "self"
              ],
              "line": 215,
              "returns": "<ast.Subscript object at 0x7f2f2d72f090>",
              "complexity": 16
            },
            {
              "name": "_analyze_emergent_properties",
              "docstring": "Analyze emergent properties of the cognitive system",
              "args": [
                "self"
              ],
              "line": 303,
              "returns": "<ast.Subscript object at 0x7f2f2d832cd0>",
              "complexity": 10
            },
            {
              "name": "_calculate_unification_score",
              "docstring": "Calculate overall cognitive unification score",
              "args": [
                "self",
                "results"
              ],
              "line": 389,
              "returns": "float",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 22,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "TestCognitiveUnification",
          "docstring": "Test the cognitive unification system",
          "methods": [
            {
              "name": "setUp",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 439,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "test_cognitive_module_discovery",
              "docstring": "Test discovery of cognitive modules",
              "args": [
                "self"
              ],
              "line": 442,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "test_unified_cognitive_tensor_field",
              "docstring": "Test the unified cognitive tensor field verification",
              "args": [
                "self"
              ],
              "line": 453,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "test_emergent_properties_analysis",
              "docstring": "Test emergent properties analysis",
              "args": [
                "self"
              ],
              "line": 463,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "test_full_cognitive_unification",
              "docstring": "Test full cognitive unification process",
              "args": [
                "self"
              ],
              "line": 472,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [
            "<ast.Attribute object at 0x7f2f2d8c58d0>"
          ],
          "line": 436,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'subprocess', 'numpy', 'pathlib', 'argparse', 'unittest', 'meta_cognitive_recursion', 'echo9ml', 'time', 'pytest', 'sys', 'typing', 'cognitive_architecture', 'importlib', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    phase6_cognitive_unification[phase6_cognitive_unification]\n    phase6_cognitive_unification_CognitiveUnificationTester[CognitiveUnificationTester]\n    phase6_cognitive_unification --> phase6_cognitive_unification_CognitiveUnificationTester\n    phase6_cognitive_unification_CognitiveUnificationTester___init__[__init__()]\n    phase6_cognitive_unification_CognitiveUnificationTester --> phase6_cognitive_unification_CognitiveUnificationTester___init__\n    phase6_cognitive_unification_CognitiveUnificationTester_discover_cognitive_modules[discover_cognitive_modules()]\n    phase6_cognitive_unification_CognitiveUnificationTester --> phase6_cognitive_unification_CognitiveUnificationTester_discover_cognitive_modules\n    phase6_cognitive_unification_CognitiveUnificationTester_run_unified_cognitive_tests[run_unified_cognitive_tests()]\n    phase6_cognitive_unification_CognitiveUnificationTester --> phase6_cognitive_unification_CognitiveUnificationTester_run_unified_cognitive_tests\n    phase6_cognitive_unification_CognitiveUnificationTester__test_cognitive_module[_test_cognitive_module()]\n    phase6_cognitive_unification_CognitiveUnificationTester --> phase6_cognitive_unification_CognitiveUnificationTester__test_cognitive_module\n    phase6_cognitive_unification_CognitiveUnificationTester__run_integration_tests[_run_integration_tests()]\n    phase6_cognitive_unification_CognitiveUnificationTester --> phase6_cognitive_unification_CognitiveUnificationTester__run_integration_tests\n    phase6_cognitive_unification_TestCognitiveUnification[TestCognitiveUnification]\n    phase6_cognitive_unification --> phase6_cognitive_unification_TestCognitiveUnification\n    phase6_cognitive_unification_TestCognitiveUnification_setUp[setUp()]\n    phase6_cognitive_unification_TestCognitiveUnification --> phase6_cognitive_unification_TestCognitiveUnification_setUp\n    phase6_cognitive_unification_TestCognitiveUnification_test_cognitive_module_discovery[test_cognitive_module_discovery()]\n    phase6_cognitive_unification_TestCognitiveUnification --> phase6_cognitive_unification_TestCognitiveUnification_test_cognitive_module_discovery\n    phase6_cognitive_unification_TestCognitiveUnification_test_unified_cognitive_tensor_field[test_unified_cognitive_tensor_field()]\n    phase6_cognitive_unification_TestCognitiveUnification --> phase6_cognitive_unification_TestCognitiveUnification_test_unified_cognitive_tensor_field\n    phase6_cognitive_unification_TestCognitiveUnification_test_emergent_properties_analysis[test_emergent_properties_analysis()]\n    phase6_cognitive_unification_TestCognitiveUnification --> phase6_cognitive_unification_TestCognitiveUnification_test_emergent_properties_analysis\n    phase6_cognitive_unification_TestCognitiveUnification_test_full_cognitive_unification[test_full_cognitive_unification()]\n    phase6_cognitive_unification_TestCognitiveUnification --> phase6_cognitive_unification_TestCognitiveUnification_test_full_cognitive_unification\n    style phase6_cognitive_unification fill:#99ccff\n```"
    },
    "phase6_deep_testing": {
      "module": "phase6_deep_testing",
      "docstring": "Phase 6: Deep Testing Protocols for Echo9ML\nComprehensive test coverage and verification system\n\nThis module implements rigorous testing protocols as specified in Phase 6\nof the Distributed Agentic Cognitive Grammar Network implementation.",
      "imports": [
        "unittest",
        "pytest",
        "coverage",
        "os",
        "sys",
        "json",
        "subprocess",
        "pathlib",
        "typing",
        "importlib.util",
        "inspect",
        "ast",
        "argparse"
      ],
      "classes": [
        {
          "name": "DeepTestingProtocols",
          "docstring": "Implements comprehensive testing protocols for Phase 6",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "project_root"
              ],
              "line": 29,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "discover_all_modules",
              "docstring": "Discover all Python modules in the project",
              "args": [
                "self"
              ],
              "line": 35,
              "returns": "<ast.Subscript object at 0x7f2f2d85d4d0>",
              "complexity": 4
            },
            {
              "name": "analyze_module_complexity",
              "docstring": "Analyze complexity of a module for test prioritization",
              "args": [
                "self",
                "module_name"
              ],
              "line": 43,
              "returns": "<ast.Subscript object at 0x7f2f2d770210>",
              "complexity": 9
            },
            {
              "name": "_calculate_complexity",
              "docstring": "Calculate cyclomatic complexity of a function/method",
              "args": [
                "self",
                "node"
              ],
              "line": 96,
              "returns": "int",
              "complexity": 6
            },
            {
              "name": "run_comprehensive_tests",
              "docstring": "Run all tests with comprehensive coverage analysis",
              "args": [
                "self"
              ],
              "line": 112,
              "returns": "<ast.Subscript object at 0x7f2f2d8dccd0>",
              "complexity": 3
            },
            {
              "name": "identify_coverage_gaps",
              "docstring": "Identify modules and functions with low coverage",
              "args": [
                "self"
              ],
              "line": 142,
              "returns": "<ast.Subscript object at 0x7f2f2d893990>",
              "complexity": 9
            },
            {
              "name": "generate_test_priorities",
              "docstring": "Generate test priority list based on complexity and coverage",
              "args": [
                "self"
              ],
              "line": 180,
              "returns": "<ast.Subscript object at 0x7f2f2d767e10>",
              "complexity": 6
            }
          ],
          "bases": [],
          "line": 24,
          "cognitive_features": []
        },
        {
          "name": "TestDeepTestingProtocols",
          "docstring": "Test the deep testing protocols themselves",
          "methods": [
            {
              "name": "setUp",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 225,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "test_module_discovery",
              "docstring": "Test that module discovery works correctly",
              "args": [
                "self"
              ],
              "line": 228,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "test_complexity_analysis",
              "docstring": "Test module complexity analysis",
              "args": [
                "self"
              ],
              "line": 240,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "test_priority_generation",
              "docstring": "Test test priority generation",
              "args": [
                "self"
              ],
              "line": 252,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [
            "<ast.Attribute object at 0x7f2f2d765790>"
          ],
          "line": 222,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'subprocess', 'argparse', 'pathlib', 'unittest', 'ast', 'os', 'inspect', 'json', 'sys', 'typing', 'importlib', 'coverage', 'pytest'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    phase6_deep_testing[phase6_deep_testing]\n    phase6_deep_testing_DeepTestingProtocols[DeepTestingProtocols]\n    phase6_deep_testing --> phase6_deep_testing_DeepTestingProtocols\n    phase6_deep_testing_DeepTestingProtocols___init__[__init__()]\n    phase6_deep_testing_DeepTestingProtocols --> phase6_deep_testing_DeepTestingProtocols___init__\n    phase6_deep_testing_DeepTestingProtocols_discover_all_modules[discover_all_modules()]\n    phase6_deep_testing_DeepTestingProtocols --> phase6_deep_testing_DeepTestingProtocols_discover_all_modules\n    phase6_deep_testing_DeepTestingProtocols_analyze_module_complexity[analyze_module_complexity()]\n    phase6_deep_testing_DeepTestingProtocols --> phase6_deep_testing_DeepTestingProtocols_analyze_module_complexity\n    phase6_deep_testing_DeepTestingProtocols__calculate_complexity[_calculate_complexity()]\n    phase6_deep_testing_DeepTestingProtocols --> phase6_deep_testing_DeepTestingProtocols__calculate_complexity\n    phase6_deep_testing_DeepTestingProtocols_run_comprehensive_tests[run_comprehensive_tests()]\n    phase6_deep_testing_DeepTestingProtocols --> phase6_deep_testing_DeepTestingProtocols_run_comprehensive_tests\n    phase6_deep_testing_TestDeepTestingProtocols[TestDeepTestingProtocols]\n    phase6_deep_testing --> phase6_deep_testing_TestDeepTestingProtocols\n    phase6_deep_testing_TestDeepTestingProtocols_setUp[setUp()]\n    phase6_deep_testing_TestDeepTestingProtocols --> phase6_deep_testing_TestDeepTestingProtocols_setUp\n    phase6_deep_testing_TestDeepTestingProtocols_test_module_discovery[test_module_discovery()]\n    phase6_deep_testing_TestDeepTestingProtocols --> phase6_deep_testing_TestDeepTestingProtocols_test_module_discovery\n    phase6_deep_testing_TestDeepTestingProtocols_test_complexity_analysis[test_complexity_analysis()]\n    phase6_deep_testing_TestDeepTestingProtocols --> phase6_deep_testing_TestDeepTestingProtocols_test_complexity_analysis\n    phase6_deep_testing_TestDeepTestingProtocols_test_priority_generation[test_priority_generation()]\n    phase6_deep_testing_TestDeepTestingProtocols --> phase6_deep_testing_TestDeepTestingProtocols_test_priority_generation\n    style phase6_deep_testing fill:#99ccff\n```"
    },
    "phase6_recursive_documentation": {
      "module": "phase6_recursive_documentation",
      "docstring": "Phase 6: Recursive Documentation and Flowchart Auto-Generation\nAuto-generate architectural flowcharts for every module\n\nThis module implements recursive documentation generation as specified in Phase 6\nof the Distributed Agentic Cognitive Grammar Network implementation.",
      "imports": [
        "ast",
        "os",
        "json",
        "pathlib",
        "typing",
        "importlib",
        "inspect",
        "re",
        "datetime",
        "argparse"
      ],
      "classes": [
        {
          "name": "RecursiveDocumentationGenerator",
          "docstring": "Auto-generates comprehensive documentation and flowcharts for all modules",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "project_root"
              ],
              "line": 26,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "discover_all_modules",
              "docstring": "Discover all Python modules in the project",
              "args": [
                "self"
              ],
              "line": 33,
              "returns": "<ast.Subscript object at 0x7f2f2d52c750>",
              "complexity": 4
            },
            {
              "name": "analyze_module_structure",
              "docstring": "Analyze the structure of a module for documentation",
              "args": [
                "self",
                "module_name"
              ],
              "line": 41,
              "returns": "<ast.Subscript object at 0x7f2f2d8ae790>",
              "complexity": 20
            },
            {
              "name": "_determine_architectural_role",
              "docstring": "Determine the architectural role of a module",
              "args": [
                "self",
                "module_name",
                "source"
              ],
              "line": 133,
              "returns": "str",
              "complexity": 6
            },
            {
              "name": "_extract_cognitive_features",
              "docstring": "Extract cognitive features from names and docstrings",
              "args": [
                "self",
                "name",
                "docstring"
              ],
              "line": 162,
              "returns": "<ast.Subscript object at 0x7f2f2d71e2d0>",
              "complexity": 4
            },
            {
              "name": "_calculate_complexity",
              "docstring": "Calculate cyclomatic complexity",
              "args": [
                "self",
                "node"
              ],
              "line": 186,
              "returns": "int",
              "complexity": 5
            },
            {
              "name": "_extract_return_type",
              "docstring": "Extract return type annotation if present",
              "args": [
                "self",
                "node"
              ],
              "line": 198,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "_safe_eval",
              "docstring": "Safely evaluate AST node for constants",
              "args": [
                "self",
                "node"
              ],
              "line": 209,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "_identify_cognitive_patterns",
              "docstring": "Identify cognitive architectural patterns in the module",
              "args": [
                "self",
                "analysis"
              ],
              "line": 221,
              "returns": "<ast.Subscript object at 0x7f2f2d8ddfd0>",
              "complexity": 11
            },
            {
              "name": "generate_mermaid_flowchart",
              "docstring": "Generate Mermaid flowchart for a module",
              "args": [
                "self",
                "module_analysis"
              ],
              "line": 260,
              "returns": "str",
              "complexity": 9
            },
            {
              "name": "generate_dependency_graph",
              "docstring": "Generate dependency graph for all modules",
              "args": [
                "self",
                "modules"
              ],
              "line": 301,
              "returns": "str",
              "complexity": 13
            },
            {
              "name": "generate_comprehensive_documentation",
              "docstring": "Generate comprehensive documentation for all modules",
              "args": [
                "self"
              ],
              "line": 341,
              "returns": "<ast.Subscript object at 0x7f2f2d739590>",
              "complexity": 10
            },
            {
              "name": "save_documentation",
              "docstring": "Save generated documentation to files",
              "args": [
                "self",
                "documentation",
                "output_dir"
              ],
              "line": 401,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "_generate_markdown_documentation",
              "docstring": "Generate markdown documentation from analysis",
              "args": [
                "self",
                "documentation"
              ],
              "line": 428,
              "returns": "str",
              "complexity": 13
            }
          ],
          "bases": [],
          "line": 21,
          "cognitive_features": [
            "metacognition"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'argparse', 'pathlib', 'ast', 'datetime', 'os', 'inspect', 're', 'typing', 'importlib', 'json'}",
      "cognitive_patterns": [
        "Recursive Pattern"
      ],
      "architectural_role": "Documentation",
      "flowchart": "```mermaid\ngraph TD\n    phase6_recursive_documentation[phase6_recursive_documentation]\n    phase6_recursive_documentation_RecursiveDocumentationGenerator[RecursiveDocumentationGenerator]\n    phase6_recursive_documentation --> phase6_recursive_documentation_RecursiveDocumentationGenerator\n    phase6_recursive_documentation_RecursiveDocumentationGenerator___init__[__init__()]\n    phase6_recursive_documentation_RecursiveDocumentationGenerator --> phase6_recursive_documentation_RecursiveDocumentationGenerator___init__\n    phase6_recursive_documentation_RecursiveDocumentationGenerator_discover_all_modules[discover_all_modules()]\n    phase6_recursive_documentation_RecursiveDocumentationGenerator --> phase6_recursive_documentation_RecursiveDocumentationGenerator_discover_all_modules\n    phase6_recursive_documentation_RecursiveDocumentationGenerator_analyze_module_structure[analyze_module_structure()]\n    phase6_recursive_documentation_RecursiveDocumentationGenerator --> phase6_recursive_documentation_RecursiveDocumentationGenerator_analyze_module_structure\n    phase6_recursive_documentation_RecursiveDocumentationGenerator__determine_architectural_role[_determine_architectural_role()]\n    phase6_recursive_documentation_RecursiveDocumentationGenerator --> phase6_recursive_documentation_RecursiveDocumentationGenerator__determine_architectural_role\n    phase6_recursive_documentation_RecursiveDocumentationGenerator__extract_cognitive_features[_extract_cognitive_features()]\n    phase6_recursive_documentation_RecursiveDocumentationGenerator --> phase6_recursive_documentation_RecursiveDocumentationGenerator__extract_cognitive_features\n```"
    },
    "psystem_membrane_architecture": {
      "module": "psystem_membrane_architecture",
      "docstring": "P-System Inspired Membrane Architecture for Frame Problem Resolution\n\nThis module implements a membrane computing inspired architecture to address\nthe frame problem in distributed cognitive systems. It provides nested\nmembrane structures that can dynamically form boundaries and contexts\nfor cognitive processing.\n\nKey Features:\n- Hierarchical membrane structure with nested contexts\n- Dynamic boundary formation based on semantic similarity\n- Context-sensitive processing rules\n- Membrane permeability for knowledge transfer\n- Self-organizing membrane topology\n- Frame problem mitigation through context isolation",
      "imports": [
        "time",
        "uuid",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "collections"
      ],
      "classes": [
        {
          "name": "MembraneType",
          "docstring": "Types of membranes in the P-System architecture",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 28,
          "cognitive_features": []
        },
        {
          "name": "ObjectType",
          "docstring": "Types of objects that can exist within membranes",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 36,
          "cognitive_features": []
        },
        {
          "name": "PermeabilityType",
          "docstring": "Membrane permeability types",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 45,
          "cognitive_features": []
        },
        {
          "name": "MembraneObject",
          "docstring": "Object that exists within a membrane",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 63,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "to_dict",
              "docstring": "Convert object to dictionary representation",
              "args": [
                "self"
              ],
              "line": 67,
              "returns": "<ast.Subscript object at 0x7f2f2d795490>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 53,
          "cognitive_features": []
        },
        {
          "name": "MembraneRule",
          "docstring": "Processing rule within a membrane",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 90,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 80,
          "cognitive_features": [
            "symbolic"
          ]
        },
        {
          "name": "MembranePermeability",
          "docstring": "Permeability configuration for a membrane",
          "methods": [],
          "bases": [],
          "line": 95,
          "cognitive_features": []
        },
        {
          "name": "CognitiveMembrane",
          "docstring": "Individual membrane in the P-System architecture",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "membrane_id",
                "membrane_type",
                "parent_id"
              ],
              "line": 106,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_object",
              "docstring": "Add an object to the membrane",
              "args": [
                "self",
                "obj"
              ],
              "line": 127,
              "returns": "bool",
              "complexity": 2
            },
            {
              "name": "remove_object",
              "docstring": "Remove an object from the membrane",
              "args": [
                "self",
                "object_id"
              ],
              "line": 136,
              "returns": "<ast.Subscript object at 0x7f2f2d6ea190>",
              "complexity": 2
            },
            {
              "name": "add_rule",
              "docstring": "Add a processing rule to the membrane",
              "args": [
                "self",
                "rule"
              ],
              "line": 144,
              "returns": "bool",
              "complexity": 1
            },
            {
              "name": "execute_rules",
              "docstring": "Execute all applicable rules in the membrane",
              "args": [
                "self",
                "max_iterations"
              ],
              "line": 150,
              "returns": "<ast.Subscript object at 0x7f2f2d845250>",
              "complexity": 5
            },
            {
              "name": "set_frame_constraints",
              "docstring": "Set frame constraints (what should not change)",
              "args": [
                "self",
                "constraints"
              ],
              "line": 174,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "set_change_scope",
              "docstring": "Set change scope (what can change)",
              "args": [
                "self",
                "scope"
              ],
              "line": 179,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_context_summary",
              "docstring": "Get summary of current membrane context",
              "args": [
                "self"
              ],
              "line": 184,
              "returns": "<ast.Subscript object at 0x7f2f2d721210>",
              "complexity": 1
            },
            {
              "name": "_can_accept_object",
              "docstring": "Check if membrane can accept the object",
              "args": [
                "self",
                "obj"
              ],
              "line": 198,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "_get_applicable_rules",
              "docstring": "Get rules that can be executed in current state",
              "args": [
                "self"
              ],
              "line": 216,
              "returns": "<ast.Subscript object at 0x7f2f2d6d0ad0>",
              "complexity": 4
            },
            {
              "name": "_check_rule_conditions",
              "docstring": "Check if rule conditions are satisfied",
              "args": [
                "self",
                "rule"
              ],
              "line": 226,
              "returns": "bool",
              "complexity": 8
            },
            {
              "name": "_execute_rule",
              "docstring": "Execute a specific rule",
              "args": [
                "self",
                "rule"
              ],
              "line": 253,
              "returns": "bool",
              "complexity": 8
            },
            {
              "name": "_execute_object_evolution",
              "docstring": "Execute object evolution action",
              "args": [
                "self",
                "action"
              ],
              "line": 277,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_execute_object_communication",
              "docstring": "Execute object communication action (placeholder)",
              "args": [
                "self",
                "action"
              ],
              "line": 297,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_execute_membrane_division",
              "docstring": "Execute membrane division action (placeholder)",
              "args": [
                "self",
                "action"
              ],
              "line": 309,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_execute_context_update",
              "docstring": "Execute context update action",
              "args": [
                "self",
                "action"
              ],
              "line": 315,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_execute_frame_enforcement",
              "docstring": "Execute frame constraint enforcement",
              "args": [
                "self",
                "action"
              ],
              "line": 321,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_update_activity",
              "docstring": "Update membrane activity level",
              "args": [
                "self"
              ],
              "line": 337,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 103,
          "cognitive_features": []
        },
        {
          "name": "PSystemMembraneArchitecture",
          "docstring": "Main P-System membrane architecture for frame problem resolution",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 355,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_membrane",
              "docstring": "Create a new membrane in the architecture",
              "args": [
                "self",
                "membrane_type",
                "parent_id",
                "membrane_id"
              ],
              "line": 372,
              "returns": "str",
              "complexity": 5
            },
            {
              "name": "dissolve_membrane",
              "docstring": "Dissolve a membrane and redistribute its contents",
              "args": [
                "self",
                "membrane_id"
              ],
              "line": 392,
              "returns": "bool",
              "complexity": 9
            },
            {
              "name": "add_object_to_membrane",
              "docstring": "Add an object to a specific membrane",
              "args": [
                "self",
                "membrane_id",
                "obj"
              ],
              "line": 422,
              "returns": "bool",
              "complexity": 3
            },
            {
              "name": "transfer_object",
              "docstring": "Transfer an object between membranes",
              "args": [
                "self",
                "object_id",
                "source_membrane_id",
                "target_membrane_id"
              ],
              "line": 439,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "execute_membrane_rules",
              "docstring": "Execute rules in specified membrane(s)",
              "args": [
                "self",
                "membrane_id"
              ],
              "line": 465,
              "returns": "<ast.Subscript object at 0x7f2f2d866b90>",
              "complexity": 4
            },
            {
              "name": "set_membrane_context",
              "docstring": "Set semantic context for a membrane",
              "args": [
                "self",
                "membrane_id",
                "context"
              ],
              "line": 479,
              "returns": "bool",
              "complexity": 2
            },
            {
              "name": "isolate_membrane_context",
              "docstring": "Isolate a membrane context to prevent frame problem",
              "args": [
                "self",
                "membrane_id",
                "isolation_level"
              ],
              "line": 492,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "create_context_membrane",
              "docstring": "Create a specialized context membrane for frame problem resolution",
              "args": [
                "self",
                "context_definition",
                "parent_id"
              ],
              "line": 524,
              "returns": "str",
              "complexity": 3
            },
            {
              "name": "get_membrane_state",
              "docstring": "Get complete state of a membrane",
              "args": [
                "self",
                "membrane_id"
              ],
              "line": 546,
              "returns": "<ast.Subscript object at 0x7f2f2d4be910>",
              "complexity": 2
            },
            {
              "name": "get_architecture_overview",
              "docstring": "Get overview of entire membrane architecture",
              "args": [
                "self"
              ],
              "line": 569,
              "returns": "<ast.Subscript object at 0x7f2f2d8d43d0>",
              "complexity": 2
            },
            {
              "name": "_create_skin_membrane",
              "docstring": "Create the outermost skin membrane",
              "args": [
                "self"
              ],
              "line": 590,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_can_transfer_object",
              "docstring": "Check if object transfer is allowed between membranes",
              "args": [
                "self",
                "object_id",
                "source_membrane",
                "target_membrane"
              ],
              "line": 597,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "_record_change",
              "docstring": "Record a change for frame problem analysis",
              "args": [
                "self",
                "change_type",
                "change_data"
              ],
              "line": 624,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_create_context_boundary_rules",
              "docstring": "Create rules to maintain context boundaries",
              "args": [
                "self",
                "membrane_id",
                "context"
              ],
              "line": 640,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_create_context_specific_rules",
              "docstring": "Create rules specific to the context definition",
              "args": [
                "self",
                "membrane_id",
                "context_definition"
              ],
              "line": 659,
              "returns": "Any",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 352,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'dataclasses', 'uuid', 'logging', 'enum', 'time', 'typing', 'collections'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    psystem_membrane_architecture[psystem_membrane_architecture]\n    psystem_membrane_architecture_MembraneType[MembraneType]\n    psystem_membrane_architecture --> psystem_membrane_architecture_MembraneType\n    psystem_membrane_architecture_ObjectType[ObjectType]\n    psystem_membrane_architecture --> psystem_membrane_architecture_ObjectType\n    psystem_membrane_architecture_PermeabilityType[PermeabilityType]\n    psystem_membrane_architecture --> psystem_membrane_architecture_PermeabilityType\n    psystem_membrane_architecture_MembraneObject[MembraneObject]\n    psystem_membrane_architecture --> psystem_membrane_architecture_MembraneObject\n    psystem_membrane_architecture_MembraneObject___post_init__[__post_init__()]\n    psystem_membrane_architecture_MembraneObject --> psystem_membrane_architecture_MembraneObject___post_init__\n    psystem_membrane_architecture_MembraneObject_to_dict[to_dict()]\n    psystem_membrane_architecture_MembraneObject --> psystem_membrane_architecture_MembraneObject_to_dict\n    psystem_membrane_architecture_MembraneRule[MembraneRule]\n    psystem_membrane_architecture --> psystem_membrane_architecture_MembraneRule\n    psystem_membrane_architecture_MembraneRule___post_init__[__post_init__()]\n    psystem_membrane_architecture_MembraneRule --> psystem_membrane_architecture_MembraneRule___post_init__\n    psystem_membrane_architecture_MembranePermeability[MembranePermeability]\n    psystem_membrane_architecture --> psystem_membrane_architecture_MembranePermeability\n    psystem_membrane_architecture_CognitiveMembrane[CognitiveMembrane]\n    psystem_membrane_architecture --> psystem_membrane_architecture_CognitiveMembrane\n    psystem_membrane_architecture_CognitiveMembrane___init__[__init__()]\n    psystem_membrane_architecture_CognitiveMembrane --> psystem_membrane_architecture_CognitiveMembrane___init__\n    psystem_membrane_architecture_CognitiveMembrane_add_object[add_object()]\n    psystem_membrane_architecture_CognitiveMembrane --> psystem_membrane_architecture_CognitiveMembrane_add_object\n    psystem_membrane_architecture_CognitiveMembrane_remove_object[remove_object()]\n    psystem_membrane_architecture_CognitiveMembrane --> psystem_membrane_architecture_CognitiveMembrane_remove_object\n    psystem_membrane_architecture_CognitiveMembrane_add_rule[add_rule()]\n    psystem_membrane_architecture_CognitiveMembrane --> psystem_membrane_architecture_CognitiveMembrane_add_rule\n    psystem_membrane_architecture_CognitiveMembrane_execute_rules[execute_rules()]\n    psystem_membrane_architecture_CognitiveMembrane --> psystem_membrane_architecture_CognitiveMembrane_execute_rules\n    psystem_membrane_architecture_PSystemMembraneArchitecture[PSystemMembraneArchitecture]\n    psystem_membrane_architecture --> psystem_membrane_architecture_PSystemMembraneArchitecture\n    psystem_membrane_architecture_PSystemMembraneArchitecture___init__[__init__()]\n    psystem_membrane_architecture_PSystemMembraneArchitecture --> psystem_membrane_architecture_PSystemMembraneArchitecture___init__\n    psystem_membrane_architecture_PSystemMembraneArchitecture_create_membrane[create_membrane()]\n    psystem_membrane_architecture_PSystemMembraneArchitecture --> psystem_membrane_architecture_PSystemMembraneArchitecture_create_membrane\n    psystem_membrane_architecture_PSystemMembraneArchitecture_dissolve_membrane[dissolve_membrane()]\n    psystem_membrane_architecture_PSystemMembraneArchitecture --> psystem_membrane_architecture_PSystemMembraneArchitecture_dissolve_membrane\n    psystem_membrane_architecture_PSystemMembraneArchitecture_add_object_to_membrane[add_object_to_membrane()]\n    psystem_membrane_architecture_PSystemMembraneArchitecture --> psystem_membrane_architecture_PSystemMembraneArchitecture_add_object_to_membrane\n    psystem_membrane_architecture_PSystemMembraneArchitecture_transfer_object[transfer_object()]\n    psystem_membrane_architecture_PSystemMembraneArchitecture --> psystem_membrane_architecture_PSystemMembraneArchitecture_transfer_object\n    style psystem_membrane_architecture fill:#99ccff\n```"
    },
    "ros_binding": {
      "module": "ros_binding",
      "docstring": "ROS (Robot Operating System) Embodiment Binding for Echo9ML Cognitive Mesh\n\nThis module provides ROS integration for embodied cognition, enabling\nreal-time communication between ROS-based robotic systems and the\ndistributed cognitive grammar network.\n\nKey Features:\n- ROS message integration for cognitive communication\n- Navigation and path planning cognitive interface\n- Sensor data processing and cognitive interpretation\n- Action server integration for cognitive intentions\n- Multi-robot coordination through cognitive mesh",
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "uuid",
        "threading",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "rospy",
        "std_msgs.msg",
        "geometry_msgs.msg",
        "sensor_msgs.msg",
        "nav_msgs.msg",
        "actionlib_msgs.msg",
        "tf2_msgs.msg",
        "tf2_ros",
        "websockets",
        "random",
        "numpy",
        "math"
      ],
      "classes": [
        {
          "name": "ROSMessageType",
          "docstring": "ROS message types for cognitive communication",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 85,
          "cognitive_features": []
        },
        {
          "name": "ROSCognitiveIntention",
          "docstring": "Cognitive intentions that can be executed by ROS systems",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 97,
          "cognitive_features": []
        },
        {
          "name": "ROSRobotState",
          "docstring": "ROS robot state information",
          "methods": [],
          "bases": [],
          "line": 109,
          "cognitive_features": []
        },
        {
          "name": "ROSSensorReading",
          "docstring": "ROS sensor data structure",
          "methods": [],
          "bases": [],
          "line": 121,
          "cognitive_features": []
        },
        {
          "name": "ROSNavigationGoal",
          "docstring": "ROS navigation goal with cognitive context",
          "methods": [],
          "bases": [],
          "line": 130,
          "cognitive_features": []
        },
        {
          "name": "ROSBinding",
          "docstring": "ROS embodiment binding for cognitive mesh",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "robot_name",
                "cognitive_api_url",
                "ros_namespace"
              ],
              "line": 143,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "initialize_ros_node",
              "docstring": "Initialize ROS node and components",
              "args": [
                "self"
              ],
              "line": 177,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_setup_publishers",
              "docstring": "Setup ROS publishers",
              "args": [
                "self"
              ],
              "line": 202,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_setup_subscribers",
              "docstring": "Setup ROS subscribers",
              "args": [
                "self"
              ],
              "line": 211,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_setup_services",
              "docstring": "Setup ROS services",
              "args": [
                "self"
              ],
              "line": 220,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_odometry_callback",
              "docstring": "Handle odometry updates",
              "args": [
                "self",
                "msg"
              ],
              "line": 225,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_laser_callback",
              "docstring": "Handle laser scan data",
              "args": [
                "self",
                "msg"
              ],
              "line": 245,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_camera_callback",
              "docstring": "Handle camera data",
              "args": [
                "self",
                "msg"
              ],
              "line": 286,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_goal_status_callback",
              "docstring": "Handle navigation goal status updates",
              "args": [
                "self",
                "msg"
              ],
              "line": 305,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_robot_state_to_dict",
              "docstring": "Convert robot state to dictionary",
              "args": [
                "self"
              ],
              "line": 426,
              "returns": "<ast.Subscript object at 0x7f2f2d8a4e50>",
              "complexity": 1
            },
            {
              "name": "create_ros_message_handler",
              "docstring": "Create message handler for cognitive mesh communication",
              "args": [
                "self"
              ],
              "line": 606,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "get_ros_launch_file",
              "docstring": "Generate ROS launch file for Echo9ML integration",
              "args": [
                "self"
              ],
              "line": 622,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "get_ros_package_setup",
              "docstring": "Generate ROS package setup instructions",
              "args": [
                "self"
              ],
              "line": 669,
              "returns": "str",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 140,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "create_ros_binding",
          "docstring": "Factory function to create ROS binding",
          "args": [
            "robot_name",
            "cognitive_api_url",
            "ros_namespace"
          ],
          "line": 773,
          "returns": "ROSBinding",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'numpy', 'tf2_msgs', 'datetime', 'threading', 'logging', 'enum', 'websockets', 'random', 'nav_msgs', 'math', 'typing', 'json', 'geometry_msgs', 'dataclasses', 'rospy', 'sensor_msgs', 'asyncio', 'actionlib_msgs', 'tf2_ros', 'uuid', 'time', 'std_msgs'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "State Machine Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    ros_binding[ros_binding]\n    ros_binding_ROSMessageType[ROSMessageType]\n    ros_binding --> ros_binding_ROSMessageType\n    ros_binding_ROSCognitiveIntention[ROSCognitiveIntention]\n    ros_binding --> ros_binding_ROSCognitiveIntention\n    ros_binding_ROSRobotState[ROSRobotState]\n    ros_binding --> ros_binding_ROSRobotState\n    ros_binding_ROSSensorReading[ROSSensorReading]\n    ros_binding --> ros_binding_ROSSensorReading\n    ros_binding_ROSNavigationGoal[ROSNavigationGoal]\n    ros_binding --> ros_binding_ROSNavigationGoal\n    ros_binding_ROSBinding[ROSBinding]\n    ros_binding --> ros_binding_ROSBinding\n    ros_binding_ROSBinding___init__[__init__()]\n    ros_binding_ROSBinding --> ros_binding_ROSBinding___init__\n    ros_binding_ROSBinding_initialize_ros_node[initialize_ros_node()]\n    ros_binding_ROSBinding --> ros_binding_ROSBinding_initialize_ros_node\n    ros_binding_ROSBinding__setup_publishers[_setup_publishers()]\n    ros_binding_ROSBinding --> ros_binding_ROSBinding__setup_publishers\n    ros_binding_ROSBinding__setup_subscribers[_setup_subscribers()]\n    ros_binding_ROSBinding --> ros_binding_ROSBinding__setup_subscribers\n    ros_binding_ROSBinding__setup_services[_setup_services()]\n    ros_binding_ROSBinding --> ros_binding_ROSBinding__setup_services\n    ros_binding_create_ros_binding[create_ros_binding()]\n    ros_binding --> ros_binding_create_ros_binding\n    style ros_binding fill:#ffcc99\n```"
    },
    "selenium_interface": {
      "module": "selenium_interface",
      "docstring": null,
      "imports": [
        "os",
        "time",
        "logging",
        "cv2",
        "random",
        "playwright.sync_api",
        "numpy",
        "PIL",
        "io",
        "urllib.parse",
        "base64",
        "dotenv",
        "deep_tree_echo",
        "requests",
        "datetime",
        "json",
        "chat_session_manager"
      ],
      "classes": [
        {
          "name": "SeleniumInterface",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the ChatGPT interface with advanced capabilities",
              "args": [
                "self"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "find_existing_browser",
              "docstring": "Try to find an existing browser with ChatGPT open",
              "args": [
                "self"
              ],
              "line": 73,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "init",
              "docstring": "Initialize the browser with anti-detection measures",
              "args": [
                "self"
              ],
              "line": 95,
              "returns": "Any",
              "complexity": 11
            },
            {
              "name": "_setup_event_listeners",
              "docstring": "Set up event listeners for monitoring page activities",
              "args": [
                "self"
              ],
              "line": 236,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_handle_console_message",
              "docstring": "Handle console messages from the page",
              "args": [
                "self",
                "msg"
              ],
              "line": 250,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_handle_dialog",
              "docstring": "Handle dialogs like alerts, confirms, and prompts",
              "args": [
                "self",
                "dialog"
              ],
              "line": 257,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_handle_navigation",
              "docstring": "Handle page navigations",
              "args": [
                "self",
                "frame"
              ],
              "line": 267,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "find_element_by_image",
              "docstring": "Find an element on the page by matching a template image\n\nArgs:\n    template_path (str): Path to the template image file\n    threshold (float): Matching threshold (0-1), higher is more strict\n    \nReturns:\n    tuple: (x, y) coordinates of the match, or None if not found",
              "args": [
                "self",
                "template_path",
                "threshold"
              ],
              "line": 276,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_simulate_human_delay",
              "docstring": "Simulate a human-like delay between actions",
              "args": [
                "self",
                "min_delay",
                "max_delay"
              ],
              "line": 321,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_calculate_typing_delay",
              "docstring": "Calculate a human-like typing delay for the given text",
              "args": [
                "self",
                "text"
              ],
              "line": 332,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_human_like_type",
              "docstring": "Type text in a human-like manner with variable speed and occasional mistakes",
              "args": [
                "self",
                "element",
                "text"
              ],
              "line": 347,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "_wait_for_page_stability",
              "docstring": "Wait for the page to become stable",
              "args": [
                "self"
              ],
              "line": 392,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_load_memory",
              "docstring": "Load conversation memory from file",
              "args": [
                "self"
              ],
              "line": 407,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_memory",
              "docstring": "Save conversation memory to file",
              "args": [
                "self"
              ],
              "line": 417,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "click_by_vision",
              "docstring": "Click an element using computer vision\n\nArgs:\n    template_path (str): Path to the template image\n    threshold (float): Matching threshold (0-1)\n    \nReturns:\n    bool: True if clicked successfully, False otherwise",
              "args": [
                "self",
                "template_path",
                "threshold"
              ],
              "line": 425,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "_human_like_mouse_movement",
              "docstring": "Move the mouse to target position in a human-like manner",
              "args": [
                "self",
                "target_x",
                "target_y"
              ],
              "line": 450,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "authenticate",
              "docstring": "Authenticate with ChatGPT using username and password",
              "args": [
                "self"
              ],
              "line": 505,
              "returns": "Any",
              "complexity": 47
            },
            {
              "name": "wait_for_cloudflare",
              "docstring": "Wait for Cloudflare challenge to complete",
              "args": [
                "self",
                "max_retries"
              ],
              "line": 737,
              "returns": "Any",
              "complexity": 9
            },
            {
              "name": "send_message",
              "docstring": "Send a message to the chat and store the conversation",
              "args": [
                "self",
                "message"
              ],
              "line": 796,
              "returns": "Any",
              "complexity": 34
            },
            {
              "name": "get_conversation_history",
              "docstring": "Get the conversation history",
              "args": [
                "self"
              ],
              "line": 1003,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_last_response",
              "docstring": "Get the most recent response from ChatGPT",
              "args": [
                "self"
              ],
              "line": 1007,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "capture_conversation_screenshot",
              "docstring": "Capture a screenshot of the current conversation",
              "args": [
                "self",
                "filename"
              ],
              "line": 1013,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "clear_conversation",
              "docstring": "Clear the current conversation in ChatGPT",
              "args": [
                "self"
              ],
              "line": 1027,
              "returns": "Any",
              "complexity": 7
            },
            {
              "name": "browse_url_in_chat",
              "docstring": "Ask ChatGPT to browse a URL\n\nArgs:\n    url (str): The URL to browse\n    \nReturns:\n    str: The response from ChatGPT about the browsed content or None on failure",
              "args": [
                "self",
                "url"
              ],
              "line": 1064,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_echo_from_response",
              "docstring": "Create an echo node from the ChatGPT response",
              "args": [
                "self",
                "response_text"
              ],
              "line": 1076,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "close",
              "docstring": "Close the browser",
              "args": [
                "self"
              ],
              "line": 1098,
              "returns": "Any",
              "complexity": 7
            }
          ],
          "bases": [],
          "line": 32,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 1121,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'requests', 'numpy', 'random', 'urllib', 'PIL', 'datetime', 'chat_session_manager', 'os', 'logging', 'time', 'json', 'base64', 'io', 'deep_tree_echo', 'dotenv', 'cv2', 'playwright'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    selenium_interface[selenium_interface]\n    selenium_interface_SeleniumInterface[SeleniumInterface]\n    selenium_interface --> selenium_interface_SeleniumInterface\n    selenium_interface_SeleniumInterface___init__[__init__()]\n    selenium_interface_SeleniumInterface --> selenium_interface_SeleniumInterface___init__\n    selenium_interface_SeleniumInterface_find_existing_browser[find_existing_browser()]\n    selenium_interface_SeleniumInterface --> selenium_interface_SeleniumInterface_find_existing_browser\n    selenium_interface_SeleniumInterface_init[init()]\n    selenium_interface_SeleniumInterface --> selenium_interface_SeleniumInterface_init\n    selenium_interface_SeleniumInterface__setup_event_listeners[_setup_event_listeners()]\n    selenium_interface_SeleniumInterface --> selenium_interface_SeleniumInterface__setup_event_listeners\n    selenium_interface_SeleniumInterface__handle_console_message[_handle_console_message()]\n    selenium_interface_SeleniumInterface --> selenium_interface_SeleniumInterface__handle_console_message\n    selenium_interface_main[main()]\n    selenium_interface --> selenium_interface_main\n    style selenium_interface fill:#ffcc99\n```"
    },
    "self_evo": {
      "module": "self_evo",
      "docstring": "\ud83e\udde0 Neural-Symbolic Self-Evolution Engine (Core Implementation)\n============================================================\n\nThis module implements the core cognitive self-modification system for\nGitHub Actions workflows, utilizing neural-inspired pattern recognition\nand symbolic reasoning for safe, adaptive evolution.\n\nKey Features:\n- Neural-symbolic pattern analysis\n- Cognitive safety mechanisms  \n- Adaptive learning algorithms\n- Multi-modal cognitive operation modes\n- Comprehensive logging and monitoring\n\nSafety Mechanisms:\n- Input validation and sanitization\n- Rollback capability preservation\n- Safety threshold enforcement\n- Cognitive coherence validation",
      "imports": [
        "argparse",
        "yaml",
        "random",
        "json",
        "logging",
        "hashlib",
        "datetime",
        "pathlib",
        "typing"
      ],
      "classes": [],
      "functions": [
        {
          "name": "improve_workflow",
          "docstring": "Cognitive workflow improvement function with enhanced safety and reasoning\n\nArgs:\n    file_path: Path to the target workflow YAML file\n    mode: Cognitive operation mode ('improve', 'conservative', 'aggressive', 'diagnostic')\n    **kwargs: Additional cognitive parameters (safety_threshold, learning_rate, etc.)\n\nReturns:\n    Dictionary containing modification results and cognitive metadata\n    \nSafety Features:\n    - Input validation prevents malformed file access\n    - Backup creation enables rollback capability\n    - Safety threshold enforcement prevents dangerous modifications\n    - Cognitive coherence validation ensures logical consistency",
          "args": [
            "file_path",
            "mode"
          ],
          "line": 43,
          "returns": "<ast.Subscript object at 0x7f2f2d8c7290>",
          "complexity": 12,
          "cognitive_features": [
            "learning",
            "reasoning",
            "perception",
            "metacognition"
          ]
        },
        {
          "name": "_cognitive_enhancement_strategy",
          "docstring": "Neural-symbolic enhancement strategy for balanced cognitive improvement\n\nThis strategy applies adaptive learning principles to optimize workflow\nscheduling while maintaining cognitive coherence and safety.",
          "args": [
            "workflow",
            "learning_rate"
          ],
          "line": 158,
          "returns": "<ast.Subscript object at 0x7f2f2d739c90>",
          "complexity": 8,
          "cognitive_features": [
            "learning",
            "reasoning",
            "neural",
            "symbolic"
          ]
        },
        {
          "name": "_conservative_safety_strategy",
          "docstring": "Conservative cognitive strategy focused on safety and stability\n\nThis strategy prioritizes system safety and stability over exploration,\nsuitable for production environments requiring high reliability.",
          "args": [
            "workflow"
          ],
          "line": 228,
          "returns": "<ast.Subscript object at 0x7f2f2d8b3dd0>",
          "complexity": 3,
          "cognitive_features": [
            "attention"
          ]
        },
        {
          "name": "_experimental_exploration_strategy",
          "docstring": "Experimental cognitive strategy for aggressive exploration\n\nWARNING: This strategy applies experimental modifications that may\nimpact system stability. Use only in development environments.",
          "args": [
            "workflow"
          ],
          "line": 257,
          "returns": "<ast.Subscript object at 0x7f2f2d767750>",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "_diagnostic_analysis_strategy",
          "docstring": "Diagnostic cognitive strategy for analysis without modification\n\nThis strategy performs comprehensive workflow analysis and logging\nwithout applying any functional modifications.",
          "args": [
            "workflow"
          ],
          "line": 310,
          "returns": "<ast.Subscript object at 0x7f2f2d881fd0>",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "_assess_cognitive_safety",
          "docstring": "Assess the cognitive safety score of proposed modifications\n\nReturns a safety score between 0.0 (dangerous) and 1.0 (completely safe)",
          "args": [
            "modifications",
            "workflow"
          ],
          "line": 353,
          "returns": "float",
          "complexity": 7,
          "cognitive_features": []
        },
        {
          "name": "_apply_cognitive_modifications",
          "docstring": "Apply approved cognitive modifications to the workflow\n\nNote: Modifications are applied during strategy execution for efficiency.\nThis function serves as a validation checkpoint and logging mechanism.",
          "args": [
            "workflow",
            "modifications"
          ],
          "line": 384,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "_calculate_cognitive_complexity",
          "docstring": "Calculate the cognitive complexity score of a workflow\n\nComplexity factors:\n- Number of jobs and steps\n- Conditional logic depth\n- Environment variable usage\n- Trigger complexity",
          "args": [
            "workflow"
          ],
          "line": 399,
          "returns": "float",
          "complexity": 3,
          "cognitive_features": [
            "reasoning"
          ]
        },
        {
          "name": "_assess_workflow_cognitive_health",
          "docstring": "Assess the cognitive health of a workflow\n\nHealth indicators:\n- Structural clarity\n- Safety mechanism presence\n- Resource efficiency\n- Maintainability",
          "args": [
            "workflow"
          ],
          "line": 427,
          "returns": "<ast.Subscript object at 0x7f2f2d8a3ed0>",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "_log_cognitive_state",
          "docstring": "Log detailed cognitive state information for analysis and debugging",
          "args": [
            "metadata",
            "modifications"
          ],
          "line": 478,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'argparse', 'pathlib', 'random', 'datetime', 'logging', 'yaml', 'hashlib', 'typing', 'json'}",
      "cognitive_patterns": [
        "Strategy Pattern",
        "State Machine Pattern"
      ],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    self_evo[self_evo]\n    self_evo_improve_workflow[improve_workflow()]\n    self_evo --> self_evo_improve_workflow\n    self_evo__cognitive_enhancement_strategy[_cognitive_enhancement_strategy()]\n    self_evo --> self_evo__cognitive_enhancement_strategy\n    self_evo__conservative_safety_strategy[_conservative_safety_strategy()]\n    self_evo --> self_evo__conservative_safety_strategy\n    self_evo__experimental_exploration_strategy[_experimental_exploration_strategy()]\n    self_evo --> self_evo__experimental_exploration_strategy\n    self_evo__diagnostic_analysis_strategy[_diagnostic_analysis_strategy()]\n    self_evo --> self_evo__diagnostic_analysis_strategy\n    style self_evo fill:#99ccff\n```"
    },
    "sensory_motor": {
      "module": "sensory_motor",
      "docstring": null,
      "imports": [
        "cv2",
        "numpy",
        "pyautogui",
        "logging",
        "time",
        "random",
        "pynput",
        "PIL",
        "io",
        "ml_system",
        "json",
        "pathlib",
        "typing"
      ],
      "classes": [
        {
          "name": "SensoryMotor",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the sensory-motor system",
              "args": [
                "self"
              ],
              "line": 16,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_load_activities",
              "docstring": "Load existing activities",
              "args": [
                "self"
              ],
              "line": 52,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_activities",
              "docstring": "Save activities to file",
              "args": [
                "self"
              ],
              "line": 61,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_log_activity",
              "docstring": "Log a sensory activity",
              "args": [
                "self",
                "description",
                "data"
              ],
              "line": 66,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "capture_screen",
              "docstring": "Capture the screen or a specific region",
              "args": [
                "self",
                "region"
              ],
              "line": 76,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "find_element",
              "docstring": "Find an element on screen using template matching",
              "args": [
                "self",
                "template",
                "threshold",
                "region"
              ],
              "line": 85,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "move_mouse",
              "docstring": "Move mouse to coordinates with human-like motion",
              "args": [
                "self",
                "x",
                "y",
                "duration",
                "human_like"
              ],
              "line": 112,
              "returns": "Any",
              "complexity": 11
            },
            {
              "name": "_generate_curve_points",
              "docstring": "Generate points along a curved path for mouse movement",
              "args": [
                "self",
                "start_x",
                "start_y",
                "end_x",
                "end_y",
                "points"
              ],
              "line": 208,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "click",
              "docstring": "Perform a mouse click with human-like timing",
              "args": [
                "self",
                "button",
                "clicks",
                "interval"
              ],
              "line": 226,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "wait_for_element",
              "docstring": "Wait for an element to appear on screen using ML-enhanced detection",
              "args": [
                "self",
                "template",
                "timeout",
                "interval",
                "threshold"
              ],
              "line": 241,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "type_text",
              "docstring": "Type text with human-like timing",
              "args": [
                "self",
                "text",
                "interval"
              ],
              "line": 269,
              "returns": "Any",
              "complexity": 5
            },
            {
              "name": "scroll",
              "docstring": "Scroll with human-like behavior",
              "args": [
                "self",
                "clicks",
                "direction"
              ],
              "line": 327,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "drag_and_drop",
              "docstring": "Perform drag and drop operation",
              "args": [
                "self",
                "start_x",
                "start_y",
                "end_x",
                "end_y",
                "duration"
              ],
              "line": 345,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "hover",
              "docstring": "Hover over a position for a duration",
              "args": [
                "self",
                "x",
                "y",
                "duration"
              ],
              "line": 367,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "process_input",
              "docstring": "Process sensory input",
              "args": [
                "self"
              ],
              "line": 381,
              "returns": "Any",
              "complexity": 4
            }
          ],
          "bases": [],
          "line": 15,
          "cognitive_features": [
            "action"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'numpy', 'pathlib', 'random', 'pyautogui', 'PIL', 'logging', 'ml_system', 'time', 'pynput', 'io', 'typing', 'cv2', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    sensory_motor[sensory_motor]\n    sensory_motor_SensoryMotor[SensoryMotor]\n    sensory_motor --> sensory_motor_SensoryMotor\n    sensory_motor_SensoryMotor___init__[__init__()]\n    sensory_motor_SensoryMotor --> sensory_motor_SensoryMotor___init__\n    sensory_motor_SensoryMotor__load_activities[_load_activities()]\n    sensory_motor_SensoryMotor --> sensory_motor_SensoryMotor__load_activities\n    sensory_motor_SensoryMotor__save_activities[_save_activities()]\n    sensory_motor_SensoryMotor --> sensory_motor_SensoryMotor__save_activities\n    sensory_motor_SensoryMotor__log_activity[_log_activity()]\n    sensory_motor_SensoryMotor --> sensory_motor_SensoryMotor__log_activity\n    sensory_motor_SensoryMotor_capture_screen[capture_screen()]\n    sensory_motor_SensoryMotor --> sensory_motor_SensoryMotor_capture_screen\n    style sensory_motor fill:#ffcc99\n```"
    },
    "sensory_motor_simple": {
      "module": "sensory_motor_simple",
      "docstring": null,
      "imports": [
        "logging",
        "time",
        "random",
        "numpy",
        "json",
        "pathlib",
        "typing",
        "os",
        "subprocess",
        "sys",
        "ml_system",
        "cv2",
        "pyautogui",
        "pynput",
        "PIL"
      ],
      "classes": [
        {
          "name": "SensoryMotorSystem",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the sensory-motor system with enhanced 3D spatial awareness capabilities",
              "args": [
                "self"
              ],
              "line": 183,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_get_mouse_position",
              "docstring": "Safely get mouse position",
              "args": [
                "self"
              ],
              "line": 239,
              "returns": "<ast.Subscript object at 0x7f2f2d6d2990>",
              "complexity": 3
            },
            {
              "name": "_load_activities",
              "docstring": "Load existing activities",
              "args": [
                "self"
              ],
              "line": 249,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "_save_activities",
              "docstring": "Save activities to file",
              "args": [
                "self"
              ],
              "line": 258,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_log_activity",
              "docstring": "Log a sensory activity",
              "args": [
                "self",
                "description",
                "data"
              ],
              "line": 263,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "capture_screen",
              "docstring": "Capture the screen or a specific region with depth simulation for 3D environments",
              "args": [
                "self",
                "region"
              ],
              "line": 286,
              "returns": "<ast.Subscript object at 0x7f2f2d6eb490>",
              "complexity": 5
            },
            {
              "name": "process_input",
              "docstring": "Process sensory input with 3D spatial awareness",
              "args": [
                "self"
              ],
              "line": 306,
              "returns": "Dict",
              "complexity": 9
            },
            {
              "name": "detect_motion",
              "docstring": "Detect motion between frames in the buffer",
              "args": [
                "self"
              ],
              "line": 356,
              "returns": "Dict",
              "complexity": 5
            },
            {
              "name": "simulate_object_detection",
              "docstring": "Simulate object detection for 3D environments\n\nIn a real implementation, this would use ML models for object detection,\nbut this is a simplified placeholder that returns simulated data",
              "args": [
                "self",
                "frame"
              ],
              "line": 400,
              "returns": "<ast.Subscript object at 0x7f2f2d89ea50>",
              "complexity": 2
            },
            {
              "name": "update_spatial_memory",
              "docstring": "Update the spatial memory with detected objects",
              "args": [
                "self",
                "objects"
              ],
              "line": 435,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "predict_object_position",
              "docstring": "Predict future position of an object based on its velocity",
              "args": [
                "self",
                "obj_id",
                "time_delta"
              ],
              "line": 477,
              "returns": "Dict",
              "complexity": 2
            },
            {
              "name": "simulate_depth_perception",
              "docstring": "Simulate depth perception for 3D environments\n\nIn a real implementation, this would use stereo vision or ML models,\nbut this is a simplified version that returns a simulated depth map",
              "args": [
                "self",
                "frame"
              ],
              "line": 499,
              "returns": "<ast.Attribute object at 0x7f2f2d8d2550>",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 182,
          "cognitive_features": [
            "action"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_xauth_file",
          "docstring": "Create empty .Xauthority file if missing",
          "args": [],
          "line": 22,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "create_x11_auth_cookie",
          "docstring": "Create X11 authentication cookie for the current display",
          "args": [],
          "line": 37,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "setup_x11_auth",
          "docstring": "Set up X11 authentication environment",
          "args": [],
          "line": 63,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "ensure_display",
          "docstring": "Ensure a display is available, setting up virtual if necessary",
          "args": [],
          "line": 89,
          "returns": "Any",
          "complexity": 7,
          "cognitive_features": []
        }
      ],
      "constants": [
        {
          "name": "DISPLAY_AVAILABLE",
          "line": 13,
          "value": "..."
        },
        {
          "name": "VIRTUAL_DISPLAY",
          "line": 14,
          "value": "..."
        },
        {
          "name": "HEADLESS",
          "line": 15,
          "value": "..."
        },
        {
          "name": "DISPLAY_CONFIGURED",
          "line": 137,
          "value": "..."
        },
        {
          "name": "CV2_AVAILABLE",
          "line": 140,
          "value": "False"
        },
        {
          "name": "PYAUTOGUI_AVAILABLE",
          "line": 141,
          "value": "False"
        },
        {
          "name": "PYNPUT_AVAILABLE",
          "line": 142,
          "value": "False"
        },
        {
          "name": "PIL_AVAILABLE",
          "line": 143,
          "value": "False"
        }
      ],
      "dependencies": "{'subprocess', 'numpy', 'pathlib', 'random', 'pyautogui', 'PIL', 'logging', 'os', 'ml_system', 'time', 'pynput', 'sys', 'typing', 'cv2', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    sensory_motor_simple[sensory_motor_simple]\n    sensory_motor_simple_SensoryMotorSystem[SensoryMotorSystem]\n    sensory_motor_simple --> sensory_motor_simple_SensoryMotorSystem\n    sensory_motor_simple_SensoryMotorSystem___init__[__init__()]\n    sensory_motor_simple_SensoryMotorSystem --> sensory_motor_simple_SensoryMotorSystem___init__\n    sensory_motor_simple_SensoryMotorSystem__get_mouse_position[_get_mouse_position()]\n    sensory_motor_simple_SensoryMotorSystem --> sensory_motor_simple_SensoryMotorSystem__get_mouse_position\n    sensory_motor_simple_SensoryMotorSystem__load_activities[_load_activities()]\n    sensory_motor_simple_SensoryMotorSystem --> sensory_motor_simple_SensoryMotorSystem__load_activities\n    sensory_motor_simple_SensoryMotorSystem__save_activities[_save_activities()]\n    sensory_motor_simple_SensoryMotorSystem --> sensory_motor_simple_SensoryMotorSystem__save_activities\n    sensory_motor_simple_SensoryMotorSystem__log_activity[_log_activity()]\n    sensory_motor_simple_SensoryMotorSystem --> sensory_motor_simple_SensoryMotorSystem__log_activity\n    sensory_motor_simple_create_xauth_file[create_xauth_file()]\n    sensory_motor_simple --> sensory_motor_simple_create_xauth_file\n    sensory_motor_simple_create_x11_auth_cookie[create_x11_auth_cookie()]\n    sensory_motor_simple --> sensory_motor_simple_create_x11_auth_cookie\n    sensory_motor_simple_setup_x11_auth[setup_x11_auth()]\n    sensory_motor_simple --> sensory_motor_simple_setup_x11_auth\n    sensory_motor_simple_ensure_display[ensure_display()]\n    sensory_motor_simple --> sensory_motor_simple_ensure_display\n    style sensory_motor_simple fill:#ffcc99\n```"
    },
    "stream": {
      "module": "stream",
      "docstring": null,
      "imports": [
        "curses",
        "sys",
        "os",
        "pathlib",
        "subprocess"
      ],
      "classes": [],
      "functions": [
        {
          "name": "main",
          "docstring": null,
          "args": [],
          "line": 8,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'subprocess', 'pathlib', 'os', 'curses', 'sys'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    stream[stream]\n    stream_main[main()]\n    stream --> stream_main\n```"
    },
    "swarmprotocol": {
      "module": "swarmprotocol",
      "docstring": null,
      "imports": [
        "asyncio",
        "json",
        "random",
        "typing"
      ],
      "classes": [
        {
          "name": "MessageBroker",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 8,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "subscribe",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 16,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 7,
          "cognitive_features": []
        },
        {
          "name": "RLAgent",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 23,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "choose_action",
              "docstring": null,
              "args": [
                "self",
                "state"
              ],
              "line": 29,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "update",
              "docstring": null,
              "args": [
                "self",
                "state",
                "reward",
                "new_state"
              ],
              "line": 35,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "set_last",
              "docstring": null,
              "args": [
                "self",
                "state",
                "action"
              ],
              "line": 47,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "get_policy",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 51,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "update_policy",
              "docstring": null,
              "args": [
                "self",
                "global_policy"
              ],
              "line": 55,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 22,
          "cognitive_features": []
        },
        {
          "name": "PixieRobot",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "broker",
                "robot_id"
              ],
              "line": 63,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "simulate_action",
              "docstring": null,
              "args": [
                "self",
                "action"
              ],
              "line": 105,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "get_new_state",
              "docstring": null,
              "args": [
                "self",
                "action"
              ],
              "line": 115,
              "returns": "str",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 62,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'random', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    swarmprotocol[swarmprotocol]\n    swarmprotocol_MessageBroker[MessageBroker]\n    swarmprotocol --> swarmprotocol_MessageBroker\n    swarmprotocol_MessageBroker___init__[__init__()]\n    swarmprotocol_MessageBroker --> swarmprotocol_MessageBroker___init__\n    swarmprotocol_MessageBroker_subscribe[subscribe()]\n    swarmprotocol_MessageBroker --> swarmprotocol_MessageBroker_subscribe\n    swarmprotocol_RLAgent[RLAgent]\n    swarmprotocol --> swarmprotocol_RLAgent\n    swarmprotocol_RLAgent___init__[__init__()]\n    swarmprotocol_RLAgent --> swarmprotocol_RLAgent___init__\n    swarmprotocol_RLAgent_choose_action[choose_action()]\n    swarmprotocol_RLAgent --> swarmprotocol_RLAgent_choose_action\n    swarmprotocol_RLAgent_update[update()]\n    swarmprotocol_RLAgent --> swarmprotocol_RLAgent_update\n    swarmprotocol_RLAgent_set_last[set_last()]\n    swarmprotocol_RLAgent --> swarmprotocol_RLAgent_set_last\n    swarmprotocol_RLAgent_get_policy[get_policy()]\n    swarmprotocol_RLAgent --> swarmprotocol_RLAgent_get_policy\n    swarmprotocol_PixieRobot[PixieRobot]\n    swarmprotocol --> swarmprotocol_PixieRobot\n    swarmprotocol_PixieRobot___init__[__init__()]\n    swarmprotocol_PixieRobot --> swarmprotocol_PixieRobot___init__\n    swarmprotocol_PixieRobot_simulate_action[simulate_action()]\n    swarmprotocol_PixieRobot --> swarmprotocol_PixieRobot_simulate_action\n    swarmprotocol_PixieRobot_get_new_state[get_new_state()]\n    swarmprotocol_PixieRobot --> swarmprotocol_PixieRobot_get_new_state\n    style swarmprotocol fill:#99ccff\n```"
    },
    "symbolic_reasoning": {
      "module": "symbolic_reasoning",
      "docstring": "Symbolic Reasoning and Pattern Matching for Distributed Cognitive Grammar\n\nThis module implements PLN-inspired (Probabilistic Logic Networks) symbolic reasoning\nand pattern matching capabilities for the distributed cognitive grammar system.\n\nBased on the OpenCog PLN framework adapted for the Echo9ML distributed architecture.",
      "imports": [
        "re",
        "json",
        "time",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "collections",
        "pathlib"
      ],
      "classes": [
        {
          "name": "LogicalOperator",
          "docstring": "Logical operators for symbolic reasoning",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 22,
          "cognitive_features": [
            "reasoning",
            "symbolic"
          ]
        },
        {
          "name": "TruthValue",
          "docstring": "Truth value representation with strength and confidence",
          "methods": [
            {
              "name": "__new__",
              "docstring": null,
              "args": [
                "cls",
                "strength",
                "confidence"
              ],
              "line": 36,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "__str__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 42,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 45,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [
            "<ast.Call object at 0x7f2f2d8feb50>"
          ],
          "line": 33,
          "cognitive_features": []
        },
        {
          "name": "Atom",
          "docstring": "Basic atom in the symbolic reasoning system",
          "methods": [
            {
              "name": "__hash__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 57,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "__eq__",
              "docstring": null,
              "args": [
                "self",
                "other"
              ],
              "line": 60,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 65,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": null,
              "args": [
                "cls",
                "data"
              ],
              "line": 75,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 49,
          "cognitive_features": [
            "reasoning",
            "symbolic"
          ]
        },
        {
          "name": "Link",
          "docstring": "Link between atoms in the symbolic reasoning system",
          "methods": [
            {
              "name": "__hash__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 99,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "__eq__",
              "docstring": null,
              "args": [
                "self",
                "other"
              ],
              "line": 102,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 108,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": null,
              "args": [
                "cls",
                "data"
              ],
              "line": 118,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 91,
          "cognitive_features": [
            "reasoning",
            "symbolic"
          ]
        },
        {
          "name": "Pattern",
          "docstring": "Pattern for matching in the symbolic reasoning system",
          "methods": [
            {
              "name": "matches",
              "docstring": "Check if candidate matches this pattern",
              "args": [
                "self",
                "candidate"
              ],
              "line": 143,
              "returns": "bool",
              "complexity": 3
            },
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 152,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 136,
          "cognitive_features": [
            "reasoning",
            "symbolic"
          ]
        },
        {
          "name": "Rule",
          "docstring": "Inference rule in the symbolic reasoning system",
          "methods": [
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 169,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 161,
          "cognitive_features": [
            "reasoning",
            "symbolic"
          ]
        },
        {
          "name": "SymbolicAtomSpace",
          "docstring": "Symbolic reasoning atom space for distributed cognitive grammar",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 181,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_basic_patterns",
              "docstring": "Initialize basic patterns for cognitive reasoning",
              "args": [
                "self"
              ],
              "line": 195,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_initialize_basic_rules",
              "docstring": "Initialize basic inference rules",
              "args": [
                "self"
              ],
              "line": 240,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_atom",
              "docstring": "Add atom to the atom space",
              "args": [
                "self",
                "atom"
              ],
              "line": 292,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "add_link",
              "docstring": "Add link to the atom space",
              "args": [
                "self",
                "link"
              ],
              "line": 298,
              "returns": "Any",
              "complexity": 3
            },
            {
              "name": "get_atom",
              "docstring": "Get atom by name",
              "args": [
                "self",
                "name"
              ],
              "line": 310,
              "returns": "<ast.Subscript object at 0x7f2f2d73a590>",
              "complexity": 1
            },
            {
              "name": "get_atoms_by_type",
              "docstring": "Get all atoms of a specific type",
              "args": [
                "self",
                "atom_type"
              ],
              "line": 314,
              "returns": "<ast.Subscript object at 0x7f2f2d73b150>",
              "complexity": 1
            },
            {
              "name": "get_links_by_type",
              "docstring": "Get all links of a specific type",
              "args": [
                "self",
                "link_type"
              ],
              "line": 318,
              "returns": "<ast.Subscript object at 0x7f2f2d8a4690>",
              "complexity": 1
            },
            {
              "name": "search_atoms",
              "docstring": "Search atoms by name pattern",
              "args": [
                "self",
                "query",
                "max_results"
              ],
              "line": 322,
              "returns": "<ast.Subscript object at 0x7f2f2d873690>",
              "complexity": 4
            },
            {
              "name": "pattern_match",
              "docstring": "Find matches for a pattern in the atom space",
              "args": [
                "self",
                "pattern"
              ],
              "line": 335,
              "returns": "<ast.Subscript object at 0x7f2f2d8d3950>",
              "complexity": 6
            },
            {
              "name": "apply_rule",
              "docstring": "Apply inference rule to generate new atoms/links",
              "args": [
                "self",
                "rule"
              ],
              "line": 360,
              "returns": "<ast.Subscript object at 0x7f2f2d8cda10>",
              "complexity": 6
            },
            {
              "name": "_generate_conclusion",
              "docstring": "Generate conclusion from pattern and premise match",
              "args": [
                "self",
                "pattern",
                "premise_match"
              ],
              "line": 382,
              "returns": "<ast.Subscript object at 0x7f2f2d775250>",
              "complexity": 3
            },
            {
              "name": "forward_chain",
              "docstring": "Perform forward chaining inference",
              "args": [
                "self",
                "max_iterations"
              ],
              "line": 402,
              "returns": "<ast.Subscript object at 0x7f2f2d72d450>",
              "complexity": 9
            },
            {
              "name": "backward_chain",
              "docstring": "Perform backward chaining inference",
              "args": [
                "self",
                "goal"
              ],
              "line": 433,
              "returns": "<ast.Subscript object at 0x7f2f2d867ed0>",
              "complexity": 5
            },
            {
              "name": "_can_prove_goal",
              "docstring": "Check if pattern can prove goal",
              "args": [
                "self",
                "pattern",
                "goal"
              ],
              "line": 455,
              "returns": "bool",
              "complexity": 1
            },
            {
              "name": "calculate_attention",
              "docstring": "Calculate attention value for an atom",
              "args": [
                "self",
                "atom_name"
              ],
              "line": 459,
              "returns": "float",
              "complexity": 4
            },
            {
              "name": "get_high_attention_atoms",
              "docstring": "Get atoms with high attention values",
              "args": [
                "self",
                "threshold",
                "max_results"
              ],
              "line": 483,
              "returns": "<ast.Subscript object at 0x7f2f2d6b5ed0>",
              "complexity": 3
            },
            {
              "name": "export_knowledge_fragment",
              "docstring": "Export knowledge fragment for sharing with other agents",
              "args": [
                "self",
                "max_atoms",
                "max_links"
              ],
              "line": 496,
              "returns": "<ast.Subscript object at 0x7f2f2d71fe10>",
              "complexity": 4
            },
            {
              "name": "import_knowledge_fragment",
              "docstring": "Import knowledge fragment from another agent",
              "args": [
                "self",
                "fragment"
              ],
              "line": 522,
              "returns": "bool",
              "complexity": 6
            },
            {
              "name": "get_statistics",
              "docstring": "Get statistics about the atom space",
              "args": [
                "self"
              ],
              "line": 563,
              "returns": "<ast.Subscript object at 0x7f2f2d4a8810>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 178,
          "cognitive_features": [
            "reasoning",
            "symbolic"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'pathlib', 'dataclasses', 'logging', 're', 'enum', 'time', 'typing', 'collections', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Symbolic Processing",
      "flowchart": "```mermaid\ngraph TD\n    symbolic_reasoning[symbolic_reasoning]\n    symbolic_reasoning_LogicalOperator[LogicalOperator]\n    symbolic_reasoning --> symbolic_reasoning_LogicalOperator\n    symbolic_reasoning_TruthValue[TruthValue]\n    symbolic_reasoning --> symbolic_reasoning_TruthValue\n    symbolic_reasoning_TruthValue___new__[__new__()]\n    symbolic_reasoning_TruthValue --> symbolic_reasoning_TruthValue___new__\n    symbolic_reasoning_TruthValue___str__[__str__()]\n    symbolic_reasoning_TruthValue --> symbolic_reasoning_TruthValue___str__\n    symbolic_reasoning_TruthValue_to_dict[to_dict()]\n    symbolic_reasoning_TruthValue --> symbolic_reasoning_TruthValue_to_dict\n    symbolic_reasoning_Atom[Atom]\n    symbolic_reasoning --> symbolic_reasoning_Atom\n    symbolic_reasoning_Atom___hash__[__hash__()]\n    symbolic_reasoning_Atom --> symbolic_reasoning_Atom___hash__\n    symbolic_reasoning_Atom___eq__[__eq__()]\n    symbolic_reasoning_Atom --> symbolic_reasoning_Atom___eq__\n    symbolic_reasoning_Atom_to_dict[to_dict()]\n    symbolic_reasoning_Atom --> symbolic_reasoning_Atom_to_dict\n    symbolic_reasoning_Atom_from_dict[from_dict()]\n    symbolic_reasoning_Atom --> symbolic_reasoning_Atom_from_dict\n    symbolic_reasoning_Link[Link]\n    symbolic_reasoning --> symbolic_reasoning_Link\n    symbolic_reasoning_Link___hash__[__hash__()]\n    symbolic_reasoning_Link --> symbolic_reasoning_Link___hash__\n    symbolic_reasoning_Link___eq__[__eq__()]\n    symbolic_reasoning_Link --> symbolic_reasoning_Link___eq__\n    symbolic_reasoning_Link_to_dict[to_dict()]\n    symbolic_reasoning_Link --> symbolic_reasoning_Link_to_dict\n    symbolic_reasoning_Link_from_dict[from_dict()]\n    symbolic_reasoning_Link --> symbolic_reasoning_Link_from_dict\n    symbolic_reasoning_Pattern[Pattern]\n    symbolic_reasoning --> symbolic_reasoning_Pattern\n    symbolic_reasoning_Pattern_matches[matches()]\n    symbolic_reasoning_Pattern --> symbolic_reasoning_Pattern_matches\n    symbolic_reasoning_Pattern_to_dict[to_dict()]\n    symbolic_reasoning_Pattern --> symbolic_reasoning_Pattern_to_dict\n    symbolic_reasoning_Rule[Rule]\n    symbolic_reasoning --> symbolic_reasoning_Rule\n    symbolic_reasoning_Rule_to_dict[to_dict()]\n    symbolic_reasoning_Rule --> symbolic_reasoning_Rule_to_dict\n    symbolic_reasoning_SymbolicAtomSpace[SymbolicAtomSpace]\n    symbolic_reasoning --> symbolic_reasoning_SymbolicAtomSpace\n    symbolic_reasoning_SymbolicAtomSpace___init__[__init__()]\n    symbolic_reasoning_SymbolicAtomSpace --> symbolic_reasoning_SymbolicAtomSpace___init__\n    symbolic_reasoning_SymbolicAtomSpace__initialize_basic_patterns[_initialize_basic_patterns()]\n    symbolic_reasoning_SymbolicAtomSpace --> symbolic_reasoning_SymbolicAtomSpace__initialize_basic_patterns\n    symbolic_reasoning_SymbolicAtomSpace__initialize_basic_rules[_initialize_basic_rules()]\n    symbolic_reasoning_SymbolicAtomSpace --> symbolic_reasoning_SymbolicAtomSpace__initialize_basic_rules\n    symbolic_reasoning_SymbolicAtomSpace_add_atom[add_atom()]\n    symbolic_reasoning_SymbolicAtomSpace --> symbolic_reasoning_SymbolicAtomSpace_add_atom\n    symbolic_reasoning_SymbolicAtomSpace_add_link[add_link()]\n    symbolic_reasoning_SymbolicAtomSpace --> symbolic_reasoning_SymbolicAtomSpace_add_link\n```"
    },
    "temporal": {
      "module": "temporal",
      "docstring": null,
      "imports": [
        "asyncio",
        "datetime",
        "random"
      ],
      "classes": [
        {
          "name": "SubGear",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": ":param name: Name of the sub-task.\n:param frequency: Simulated frequency (in seconds) for execution.",
              "args": [
                "self",
                "name",
                "frequency"
              ],
              "line": 7,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 6,
          "cognitive_features": []
        },
        {
          "name": "CoreGear",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": ":param name: Name of the core gear (e.g., Coordination, Strategic Planning).\n:param subgears: List of associated SubGear instances.",
              "args": [
                "self",
                "name",
                "subgears"
              ],
              "line": 24,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 23,
          "cognitive_features": []
        },
        {
          "name": "CelestialTaskFramework",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 42,
              "returns": "Any",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 41,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'asyncio', 'datetime', 'random'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    temporal[temporal]\n    temporal_SubGear[SubGear]\n    temporal --> temporal_SubGear\n    temporal_SubGear___init__[__init__()]\n    temporal_SubGear --> temporal_SubGear___init__\n    temporal_CoreGear[CoreGear]\n    temporal --> temporal_CoreGear\n    temporal_CoreGear___init__[__init__()]\n    temporal_CoreGear --> temporal_CoreGear___init__\n    temporal_CelestialTaskFramework[CelestialTaskFramework]\n    temporal --> temporal_CelestialTaskFramework\n    temporal_CelestialTaskFramework___init__[__init__()]\n    temporal_CelestialTaskFramework --> temporal_CelestialTaskFramework___init__\n```"
    },
    "tensor_fragment_architecture": {
      "module": "tensor_fragment_architecture",
      "docstring": "Tensor Fragment Architecture for Distributed Cognitive Grammar\n\nThis module enhances the existing tensor operations to support fragment sharing\nand distributed processing in the cognitive grammar network. It implements the\ntensor fragment architecture requirements for Phase 1.\n\nKey Features:\n- Tensor fragment serialization and sharing\n- Prime factorization optimization for evolutionary flexibility  \n- Distributed tensor operations across cognitive agents\n- Fragment reconstruction and validation\n- Semantic tensor mappings for cognitive dimensions",
      "imports": [
        "numpy",
        "json",
        "time",
        "hashlib",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "ggml_tensor_kernel",
        "ko6ml_atomspace_adapter"
      ],
      "classes": [
        {
          "name": "FragmentCompressionType",
          "docstring": "Types of tensor fragment compression",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 36,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "FragmentSharingMode",
          "docstring": "Modes for sharing tensor fragments",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 44,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "TensorFragment",
          "docstring": "Serializable tensor fragment for distributed sharing",
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Calculate checksum after initialization",
              "args": [
                "self"
              ],
              "line": 67,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_calculate_checksum",
              "docstring": "Calculate checksum for fragment integrity",
              "args": [
                "self"
              ],
              "line": 72,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "to_dict",
              "docstring": "Convert fragment to dictionary for serialization",
              "args": [
                "self"
              ],
              "line": 77,
              "returns": "<ast.Subscript object at 0x7f2f2d500c50>",
              "complexity": 1
            },
            {
              "name": "from_dict",
              "docstring": "Create fragment from dictionary",
              "args": [
                "cls",
                "data"
              ],
              "line": 95,
              "returns": "TensorFragment",
              "complexity": 1
            },
            {
              "name": "validate_integrity",
              "docstring": "Validate fragment integrity using checksum",
              "args": [
                "self"
              ],
              "line": 112,
              "returns": "bool",
              "complexity": 1
            },
            {
              "name": "get_fragment_size",
              "docstring": "Get fragment size in elements",
              "args": [
                "self"
              ],
              "line": 117,
              "returns": "int",
              "complexity": 1
            },
            {
              "name": "get_memory_footprint",
              "docstring": "Estimate memory footprint in bytes",
              "args": [
                "self"
              ],
              "line": 121,
              "returns": "int",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 52,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "FragmentOperation",
          "docstring": "Operation to be performed on tensor fragments",
          "methods": [],
          "bases": [],
          "line": 127,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "DistributedTensorKernel",
          "docstring": "Enhanced tensor kernel with fragment sharing capabilities",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 141,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_tensor_fragment",
              "docstring": "Create a new tensor fragment of specified type",
              "args": [
                "self",
                "tensor_type",
                "data",
                "metadata"
              ],
              "line": 210,
              "returns": "TensorFragment",
              "complexity": 4
            },
            {
              "name": "share_fragment",
              "docstring": "Share tensor fragment with target agents",
              "args": [
                "self",
                "fragment_id",
                "target_agents",
                "sharing_mode"
              ],
              "line": 250,
              "returns": "<ast.Subscript object at 0x7f2f2d8b7190>",
              "complexity": 2
            },
            {
              "name": "receive_fragment",
              "docstring": "Receive and integrate shared tensor fragment",
              "args": [
                "self",
                "shared_data",
                "source_agent"
              ],
              "line": 275,
              "returns": "str",
              "complexity": 2
            },
            {
              "name": "merge_fragments",
              "docstring": "Merge multiple tensor fragments using specified strategy",
              "args": [
                "self",
                "fragment_ids",
                "merge_strategy"
              ],
              "line": 290,
              "returns": "TensorFragment",
              "complexity": 11
            },
            {
              "name": "execute_distributed_operation",
              "docstring": "Execute distributed tensor operation",
              "args": [
                "self",
                "operation"
              ],
              "line": 344,
              "returns": "bool",
              "complexity": 10
            },
            {
              "name": "get_tensor_documentation",
              "docstring": "Get comprehensive tensor architecture documentation",
              "args": [
                "self"
              ],
              "line": 389,
              "returns": "<ast.Subscript object at 0x7f2f2d8ebc50>",
              "complexity": 1
            },
            {
              "name": "_compress_sparse",
              "docstring": "Compress fragment using sparse representation",
              "args": [
                "self",
                "fragment"
              ],
              "line": 410,
              "returns": "<ast.Subscript object at 0x7f2f2d867c90>",
              "complexity": 3
            },
            {
              "name": "_compress_quantized",
              "docstring": "Compress fragment using quantization",
              "args": [
                "self",
                "fragment"
              ],
              "line": 427,
              "returns": "<ast.Subscript object at 0x7f2f2d72c050>",
              "complexity": 2
            },
            {
              "name": "_compress_delta",
              "docstring": "Compress fragment using delta encoding",
              "args": [
                "self",
                "fragment"
              ],
              "line": 447,
              "returns": "<ast.Subscript object at 0x7f2f2d777110>",
              "complexity": 3
            },
            {
              "name": "_compress_prime_factorized",
              "docstring": "Compress fragment using prime factorization structure",
              "args": [
                "self",
                "fragment"
              ],
              "line": 465,
              "returns": "<ast.Subscript object at 0x7f2f2d8adc10>",
              "complexity": 4
            },
            {
              "name": "_is_prime_or_power_of_prime",
              "docstring": "Check if number is prime or power of prime",
              "args": [
                "self",
                "n"
              ],
              "line": 491,
              "returns": "bool",
              "complexity": 5
            },
            {
              "name": "_share_full_fragment",
              "docstring": "Share complete fragment",
              "args": [
                "self",
                "fragment"
              ],
              "line": 508,
              "returns": "<ast.Subscript object at 0x7f2f2d8e2610>",
              "complexity": 1
            },
            {
              "name": "_share_sparse_updates",
              "docstring": "Share only sparse updates",
              "args": [
                "self",
                "fragment"
              ],
              "line": 512,
              "returns": "<ast.Subscript object at 0x7f2f2d8d1590>",
              "complexity": 1
            },
            {
              "name": "_share_gradient_only",
              "docstring": "Share only gradient information",
              "args": [
                "self",
                "fragment"
              ],
              "line": 523,
              "returns": "<ast.Subscript object at 0x7f2f2d8d37d0>",
              "complexity": 1
            },
            {
              "name": "_share_semantic_only",
              "docstring": "Share only semantic metadata",
              "args": [
                "self",
                "fragment"
              ],
              "line": 535,
              "returns": "<ast.Subscript object at 0x7f2f2d8c4ad0>",
              "complexity": 1
            },
            {
              "name": "_merge_weighted_average",
              "docstring": "Merge fragments using weighted average",
              "args": [
                "self",
                "fragments"
              ],
              "line": 552,
              "returns": "<ast.Subscript object at 0x7f2f2d738f50>",
              "complexity": 5
            },
            {
              "name": "_merge_maximum",
              "docstring": "Merge fragments taking maximum values",
              "args": [
                "self",
                "fragments"
              ],
              "line": 574,
              "returns": "<ast.Subscript object at 0x7f2f2d6d0cd0>",
              "complexity": 4
            },
            {
              "name": "_merge_consensus",
              "docstring": "Merge fragments using consensus (median)",
              "args": [
                "self",
                "fragments"
              ],
              "line": 588,
              "returns": "<ast.Subscript object at 0x7f2f2d8f6cd0>",
              "complexity": 4
            },
            {
              "name": "_execute_persona_evolve",
              "docstring": "Execute persona evolution operation",
              "args": [
                "self",
                "fragments",
                "parameters"
              ],
              "line": 612,
              "returns": "TensorFragment",
              "complexity": 3
            },
            {
              "name": "_execute_attention_spread",
              "docstring": "Execute attention spreading operation",
              "args": [
                "self",
                "fragments",
                "parameters"
              ],
              "line": 643,
              "returns": "TensorFragment",
              "complexity": 3
            },
            {
              "name": "_execute_memory_consolidate",
              "docstring": "Execute memory consolidation operation",
              "args": [
                "self",
                "fragments",
                "parameters"
              ],
              "line": 672,
              "returns": "TensorFragment",
              "complexity": 3
            },
            {
              "name": "_execute_reasoning_propagate",
              "docstring": "Execute reasoning propagation operation",
              "args": [
                "self",
                "fragments",
                "parameters"
              ],
              "line": 703,
              "returns": "TensorFragment",
              "complexity": 4
            },
            {
              "name": "_execute_hypergraph_encode",
              "docstring": "Execute hypergraph encoding operation",
              "args": [
                "self",
                "fragments",
                "parameters"
              ],
              "line": 739,
              "returns": "TensorFragment",
              "complexity": 3
            }
          ],
          "bases": [],
          "line": 138,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_distributed_tensor_kernel",
          "docstring": "Factory function to create distributed tensor kernel",
          "args": [
            "agent_id"
          ],
          "line": 779,
          "returns": "DistributedTensorKernel",
          "complexity": 1,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'numpy', 'dataclasses', 'ggml_tensor_kernel', 'logging', 'enum', 'time', 'hashlib', 'typing', 'ko6ml_atomspace_adapter', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "Neural Network Pattern"
      ],
      "architectural_role": "Neural Processing",
      "flowchart": "```mermaid\ngraph TD\n    tensor_fragment_architecture[tensor_fragment_architecture]\n    tensor_fragment_architecture_FragmentCompressionType[FragmentCompressionType]\n    tensor_fragment_architecture --> tensor_fragment_architecture_FragmentCompressionType\n    tensor_fragment_architecture_FragmentSharingMode[FragmentSharingMode]\n    tensor_fragment_architecture --> tensor_fragment_architecture_FragmentSharingMode\n    tensor_fragment_architecture_TensorFragment[TensorFragment]\n    tensor_fragment_architecture --> tensor_fragment_architecture_TensorFragment\n    tensor_fragment_architecture_TensorFragment___post_init__[__post_init__()]\n    tensor_fragment_architecture_TensorFragment --> tensor_fragment_architecture_TensorFragment___post_init__\n    tensor_fragment_architecture_TensorFragment__calculate_checksum[_calculate_checksum()]\n    tensor_fragment_architecture_TensorFragment --> tensor_fragment_architecture_TensorFragment__calculate_checksum\n    tensor_fragment_architecture_TensorFragment_to_dict[to_dict()]\n    tensor_fragment_architecture_TensorFragment --> tensor_fragment_architecture_TensorFragment_to_dict\n    tensor_fragment_architecture_TensorFragment_from_dict[from_dict()]\n    tensor_fragment_architecture_TensorFragment --> tensor_fragment_architecture_TensorFragment_from_dict\n    tensor_fragment_architecture_TensorFragment_validate_integrity[validate_integrity()]\n    tensor_fragment_architecture_TensorFragment --> tensor_fragment_architecture_TensorFragment_validate_integrity\n    tensor_fragment_architecture_FragmentOperation[FragmentOperation]\n    tensor_fragment_architecture --> tensor_fragment_architecture_FragmentOperation\n    tensor_fragment_architecture_DistributedTensorKernel[DistributedTensorKernel]\n    tensor_fragment_architecture --> tensor_fragment_architecture_DistributedTensorKernel\n    tensor_fragment_architecture_DistributedTensorKernel___init__[__init__()]\n    tensor_fragment_architecture_DistributedTensorKernel --> tensor_fragment_architecture_DistributedTensorKernel___init__\n    tensor_fragment_architecture_DistributedTensorKernel_create_tensor_fragment[create_tensor_fragment()]\n    tensor_fragment_architecture_DistributedTensorKernel --> tensor_fragment_architecture_DistributedTensorKernel_create_tensor_fragment\n    tensor_fragment_architecture_DistributedTensorKernel_share_fragment[share_fragment()]\n    tensor_fragment_architecture_DistributedTensorKernel --> tensor_fragment_architecture_DistributedTensorKernel_share_fragment\n    tensor_fragment_architecture_DistributedTensorKernel_receive_fragment[receive_fragment()]\n    tensor_fragment_architecture_DistributedTensorKernel --> tensor_fragment_architecture_DistributedTensorKernel_receive_fragment\n    tensor_fragment_architecture_DistributedTensorKernel_merge_fragments[merge_fragments()]\n    tensor_fragment_architecture_DistributedTensorKernel --> tensor_fragment_architecture_DistributedTensorKernel_merge_fragments\n    tensor_fragment_architecture_create_distributed_tensor_kernel[create_distributed_tensor_kernel()]\n    tensor_fragment_architecture --> tensor_fragment_architecture_create_distributed_tensor_kernel\n    style tensor_fragment_architecture fill:#99ff99\n```"
    },
    "tensor_signature_benchmark": {
      "module": "tensor_signature_benchmark",
      "docstring": "Tensor Signature Benchmarking System for Phase 3 Echo9ML\n\nThis module implements comprehensive tensor operation benchmarking with\nreal data validation, performance metrics, and signature analysis for\nneural-symbolic synthesis operations.\n\nKey Features:\n- Real-time tensor operation benchmarking\n- Signature analysis and validation\n- Performance profiling with memory tracking\n- Real data integration and validation\n- Automated benchmark reporting\n- Cross-agent performance comparison",
      "imports": [
        "time",
        "json",
        "hashlib",
        "statistics",
        "typing",
        "dataclasses",
        "enum",
        "logging",
        "neural_symbolic_synthesis",
        "ggml_tensor_kernel",
        "tensor_fragment_architecture"
      ],
      "classes": [
        {
          "name": "BenchmarkType",
          "docstring": "Types of tensor benchmarks",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 38,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "DataSourceType",
          "docstring": "Types of real data sources for validation",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 49,
          "cognitive_features": []
        },
        {
          "name": "TensorSignature",
          "docstring": "Tensor operation signature for benchmarking",
          "methods": [
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 71,
              "returns": "<ast.Subscript object at 0x7f2f2d8f3a50>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 59,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "BenchmarkResult",
          "docstring": "Individual benchmark test result",
          "methods": [
            {
              "name": "to_dict",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 98,
              "returns": "<ast.Subscript object at 0x7f2f2d765690>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 85,
          "cognitive_features": []
        },
        {
          "name": "RealDataValidation",
          "docstring": "Real data validation result",
          "methods": [],
          "bases": [],
          "line": 113,
          "cognitive_features": []
        },
        {
          "name": "TensorSignatureBenchmark",
          "docstring": "Comprehensive tensor signature benchmarking system",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "agent_id"
              ],
              "line": 128,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "create_tensor_signature",
              "docstring": "Create tensor signature for benchmarking",
              "args": [
                "self",
                "operation_type",
                "input_shapes",
                "output_shape",
                "semantic_dimensions"
              ],
              "line": 167,
              "returns": "TensorSignature",
              "complexity": 1
            },
            {
              "name": "run_benchmark_suite",
              "docstring": "Run comprehensive benchmark suite",
              "args": [
                "self",
                "benchmark_types",
                "test_parameters"
              ],
              "line": 193,
              "returns": "<ast.Subscript object at 0x7f2f2d797010>",
              "complexity": 4
            },
            {
              "name": "validate_with_real_data",
              "docstring": "Validate tensor operations with real data",
              "args": [
                "self",
                "data_sources",
                "validation_parameters"
              ],
              "line": 216,
              "returns": "<ast.Subscript object at 0x7f2f2d6eacd0>",
              "complexity": 4
            },
            {
              "name": "_benchmark_operation_latency",
              "docstring": "Benchmark operation latency",
              "args": [
                "self",
                "params"
              ],
              "line": 242,
              "returns": "<ast.Subscript object at 0x7f2f2d6d35d0>",
              "complexity": 5
            },
            {
              "name": "_benchmark_memory_usage",
              "docstring": "Benchmark memory usage",
              "args": [
                "self",
                "params"
              ],
              "line": 295,
              "returns": "<ast.Subscript object at 0x7f2f2d8c6850>",
              "complexity": 4
            },
            {
              "name": "_benchmark_synthesis_accuracy",
              "docstring": "Benchmark neural-symbolic synthesis accuracy",
              "args": [
                "self",
                "params"
              ],
              "line": 341,
              "returns": "<ast.Subscript object at 0x7f2f2d777050>",
              "complexity": 4
            },
            {
              "name": "_benchmark_throughput",
              "docstring": "Benchmark operation throughput",
              "args": [
                "self",
                "params"
              ],
              "line": 397,
              "returns": "<ast.Subscript object at 0x7f2f2d8e9a50>",
              "complexity": 9
            },
            {
              "name": "_benchmark_tensor_coherence",
              "docstring": "Benchmark tensor coherence across operations",
              "args": [
                "self",
                "params"
              ],
              "line": 463,
              "returns": "<ast.Subscript object at 0x7f2f2d52f610>",
              "complexity": 5
            },
            {
              "name": "_benchmark_real_data_validation",
              "docstring": "Benchmark with real data validation",
              "args": [
                "self",
                "params"
              ],
              "line": 521,
              "returns": "<ast.Subscript object at 0x7f2f2d6b67d0>",
              "complexity": 5
            },
            {
              "name": "_benchmark_cross_agent_consistency",
              "docstring": "Benchmark cross-agent consistency",
              "args": [
                "self",
                "params"
              ],
              "line": 582,
              "returns": "<ast.Subscript object at 0x7f2f2d6bae90>",
              "complexity": 4
            },
            {
              "name": "_benchmark_neural_symbolic_bridge",
              "docstring": "Benchmark neural-symbolic bridge operations",
              "args": [
                "self",
                "params"
              ],
              "line": 633,
              "returns": "<ast.Subscript object at 0x7f2f2d8d6c10>",
              "complexity": 4
            },
            {
              "name": "_generate_synthetic_patterns",
              "docstring": "Generate synthetic patterns for testing",
              "args": [
                "self",
                "params"
              ],
              "line": 688,
              "returns": "<ast.Subscript object at 0x7f2f2d4d4190>",
              "complexity": 2
            },
            {
              "name": "_generate_cognitive_logs",
              "docstring": "Generate simulated cognitive logs",
              "args": [
                "self",
                "params"
              ],
              "line": 709,
              "returns": "<ast.Subscript object at 0x7f2f2d89a210>",
              "complexity": 2
            },
            {
              "name": "_generate_sensor_data",
              "docstring": "Generate simulated sensor data",
              "args": [
                "self",
                "params"
              ],
              "line": 730,
              "returns": "<ast.Subscript object at 0x7f2f2d5fa050>",
              "complexity": 2
            },
            {
              "name": "_generate_linguistic_corpus",
              "docstring": "Generate simulated linguistic corpus data",
              "args": [
                "self",
                "params"
              ],
              "line": 751,
              "returns": "<ast.Subscript object at 0x7f2f2d88a910>",
              "complexity": 2
            },
            {
              "name": "_generate_behavioral_traces",
              "docstring": "Generate simulated behavioral traces",
              "args": [
                "self",
                "params"
              ],
              "line": 774,
              "returns": "<ast.Subscript object at 0x7f2f2d503b90>",
              "complexity": 2
            },
            {
              "name": "_generate_interaction_logs",
              "docstring": "Generate simulated interaction logs",
              "args": [
                "self",
                "params"
              ],
              "line": 795,
              "returns": "<ast.Subscript object at 0x7f2f2d8a1590>",
              "complexity": 2
            },
            {
              "name": "_perform_real_data_validation",
              "docstring": "Perform validation with real data",
              "args": [
                "self",
                "data_source",
                "real_data",
                "params"
              ],
              "line": 816,
              "returns": "RealDataValidation",
              "complexity": 4
            },
            {
              "name": "_calculate_parameter_count",
              "docstring": "Calculate parameter count for tensor operation",
              "args": [
                "self",
                "input_shapes",
                "output_shape"
              ],
              "line": 878,
              "returns": "int",
              "complexity": 1
            },
            {
              "name": "_shape_elements",
              "docstring": "Calculate total elements in tensor shape",
              "args": [
                "self",
                "shape"
              ],
              "line": 889,
              "returns": "int",
              "complexity": 2
            },
            {
              "name": "_estimate_computational_complexity",
              "docstring": "Estimate computational complexity",
              "args": [
                "self",
                "input_shapes",
                "output_shape"
              ],
              "line": 896,
              "returns": "str",
              "complexity": 3
            },
            {
              "name": "_estimate_memory_footprint",
              "docstring": "Estimate memory footprint in bytes",
              "args": [
                "self",
                "input_shapes",
                "output_shape"
              ],
              "line": 908,
              "returns": "int",
              "complexity": 1
            },
            {
              "name": "_estimate_current_memory_usage",
              "docstring": "Estimate current memory usage",
              "args": [
                "self"
              ],
              "line": 918,
              "returns": "int",
              "complexity": 1
            },
            {
              "name": "get_benchmark_summary",
              "docstring": "Get comprehensive benchmark summary",
              "args": [
                "self"
              ],
              "line": 928,
              "returns": "<ast.Subscript object at 0x7f2f2d4f49d0>",
              "complexity": 5
            },
            {
              "name": "get_performance_report",
              "docstring": "Get detailed performance report",
              "args": [
                "self"
              ],
              "line": 967,
              "returns": "<ast.Subscript object at 0x7f2f2d4f7790>",
              "complexity": 1
            },
            {
              "name": "export_benchmark_data",
              "docstring": "Export all benchmark data for analysis",
              "args": [
                "self"
              ],
              "line": 992,
              "returns": "<ast.Subscript object at 0x7f2f2d506550>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 125,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_tensor_signature_benchmark",
          "docstring": "Factory function to create tensor signature benchmark",
          "args": [
            "agent_id"
          ],
          "line": 1015,
          "returns": "TensorSignatureBenchmark",
          "complexity": 1,
          "cognitive_features": [
            "neural"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'tensor_fragment_architecture', 'neural_symbolic_synthesis', 'dataclasses', 'ggml_tensor_kernel', 'logging', 'statistics', 'enum', 'time', 'hashlib', 'typing', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "Neural Network Pattern"
      ],
      "architectural_role": "Neural Processing",
      "flowchart": "```mermaid\ngraph TD\n    tensor_signature_benchmark[tensor_signature_benchmark]\n    tensor_signature_benchmark_BenchmarkType[BenchmarkType]\n    tensor_signature_benchmark --> tensor_signature_benchmark_BenchmarkType\n    tensor_signature_benchmark_DataSourceType[DataSourceType]\n    tensor_signature_benchmark --> tensor_signature_benchmark_DataSourceType\n    tensor_signature_benchmark_TensorSignature[TensorSignature]\n    tensor_signature_benchmark --> tensor_signature_benchmark_TensorSignature\n    tensor_signature_benchmark_TensorSignature_to_dict[to_dict()]\n    tensor_signature_benchmark_TensorSignature --> tensor_signature_benchmark_TensorSignature_to_dict\n    tensor_signature_benchmark_BenchmarkResult[BenchmarkResult]\n    tensor_signature_benchmark --> tensor_signature_benchmark_BenchmarkResult\n    tensor_signature_benchmark_BenchmarkResult_to_dict[to_dict()]\n    tensor_signature_benchmark_BenchmarkResult --> tensor_signature_benchmark_BenchmarkResult_to_dict\n    tensor_signature_benchmark_RealDataValidation[RealDataValidation]\n    tensor_signature_benchmark --> tensor_signature_benchmark_RealDataValidation\n    tensor_signature_benchmark_TensorSignatureBenchmark[TensorSignatureBenchmark]\n    tensor_signature_benchmark --> tensor_signature_benchmark_TensorSignatureBenchmark\n    tensor_signature_benchmark_TensorSignatureBenchmark___init__[__init__()]\n    tensor_signature_benchmark_TensorSignatureBenchmark --> tensor_signature_benchmark_TensorSignatureBenchmark___init__\n    tensor_signature_benchmark_TensorSignatureBenchmark_create_tensor_signature[create_tensor_signature()]\n    tensor_signature_benchmark_TensorSignatureBenchmark --> tensor_signature_benchmark_TensorSignatureBenchmark_create_tensor_signature\n    tensor_signature_benchmark_TensorSignatureBenchmark_run_benchmark_suite[run_benchmark_suite()]\n    tensor_signature_benchmark_TensorSignatureBenchmark --> tensor_signature_benchmark_TensorSignatureBenchmark_run_benchmark_suite\n    tensor_signature_benchmark_TensorSignatureBenchmark_validate_with_real_data[validate_with_real_data()]\n    tensor_signature_benchmark_TensorSignatureBenchmark --> tensor_signature_benchmark_TensorSignatureBenchmark_validate_with_real_data\n    tensor_signature_benchmark_TensorSignatureBenchmark__benchmark_operation_latency[_benchmark_operation_latency()]\n    tensor_signature_benchmark_TensorSignatureBenchmark --> tensor_signature_benchmark_TensorSignatureBenchmark__benchmark_operation_latency\n    tensor_signature_benchmark_create_tensor_signature_benchmark[create_tensor_signature_benchmark()]\n    tensor_signature_benchmark --> tensor_signature_benchmark_create_tensor_signature_benchmark\n    style tensor_signature_benchmark fill:#99ff99\n```"
    },
    "terminal_controller": {
      "module": "terminal_controller",
      "docstring": null,
      "imports": [
        "os",
        "subprocess",
        "logging",
        "pwd",
        "grp",
        "pathlib",
        "typing",
        "threading",
        "queue",
        "signal"
      ],
      "classes": [
        {
          "name": "TerminalController",
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self"
              ],
              "line": 13,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "start",
              "docstring": "Start the terminal controller",
              "args": [
                "self"
              ],
              "line": 21,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "stop",
              "docstring": "Stop the terminal controller",
              "args": [
                "self"
              ],
              "line": 27,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "execute_command",
              "docstring": "Execute a shell command with optional sudo privileges",
              "args": [
                "self",
                "command",
                "sudo",
                "timeout"
              ],
              "line": 34,
              "returns": "Dict",
              "complexity": 5
            },
            {
              "name": "_process_commands",
              "docstring": "Process commands from the queue",
              "args": [
                "self"
              ],
              "line": 65,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "verify_sudo_access",
              "docstring": "Verify sudo access is properly configured",
              "args": [
                "self"
              ],
              "line": 118,
              "returns": "bool",
              "complexity": 2
            },
            {
              "name": "setup_sudo_access",
              "docstring": "Set up sudo access for Deep Tree Echo",
              "args": [
                "self"
              ],
              "line": 126,
              "returns": "bool",
              "complexity": 7
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources",
              "args": [
                "self"
              ],
              "line": 169,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 12,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'subprocess', 'grp', 'pathlib', 'typing', 'signal', 'threading', 'os', 'logging', 'queue', 'pwd'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    terminal_controller[terminal_controller]\n    terminal_controller_TerminalController[TerminalController]\n    terminal_controller --> terminal_controller_TerminalController\n    terminal_controller_TerminalController___init__[__init__()]\n    terminal_controller_TerminalController --> terminal_controller_TerminalController___init__\n    terminal_controller_TerminalController_start[start()]\n    terminal_controller_TerminalController --> terminal_controller_TerminalController_start\n    terminal_controller_TerminalController_stop[stop()]\n    terminal_controller_TerminalController --> terminal_controller_TerminalController_stop\n    terminal_controller_TerminalController_execute_command[execute_command()]\n    terminal_controller_TerminalController --> terminal_controller_TerminalController_execute_command\n    terminal_controller_TerminalController__process_commands[_process_commands()]\n    terminal_controller_TerminalController --> terminal_controller_TerminalController__process_commands\n```"
    },
    "tooltip": {
      "module": "tooltip",
      "docstring": null,
      "imports": [
        "tkinter"
      ],
      "classes": [
        {
          "name": "Tooltip",
          "docstring": "Creates a tooltip for a given widget.\n\nParameters:\n    widget: The widget to add the tooltip to\n    text: The text to display in the tooltip\n    delay: Delay in milliseconds before the tooltip appears (default: 500ms)\n    wraplength: Maximum width of tooltip text (default: 180 pixels)\n    background: Background color of the tooltip (default: light yellow)\n    foreground: Text color of the tooltip (default: black)",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "widget",
                "text",
                "delay",
                "wraplength",
                "background",
                "foreground"
              ],
              "line": 15,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "on_enter",
              "docstring": "Schedule the tooltip to appear after the delay",
              "args": [
                "self",
                "event"
              ],
              "line": 33,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "on_leave",
              "docstring": "Cancel scheduled tooltip and hide if showing",
              "args": [
                "self",
                "event"
              ],
              "line": 37,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "show_tooltip",
              "docstring": "Display the tooltip",
              "args": [
                "self"
              ],
              "line": 44,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "hide_tooltip",
              "docstring": "Hide the tooltip if it exists",
              "args": [
                "self"
              ],
              "line": 64,
              "returns": "Any",
              "complexity": 2
            }
          ],
          "bases": [],
          "line": 3,
          "cognitive_features": []
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'tkinter'}",
      "cognitive_patterns": [],
      "architectural_role": "Utility",
      "flowchart": "```mermaid\ngraph TD\n    tooltip[tooltip]\n    tooltip_Tooltip[Tooltip]\n    tooltip --> tooltip_Tooltip\n    tooltip_Tooltip___init__[__init__()]\n    tooltip_Tooltip --> tooltip_Tooltip___init__\n    tooltip_Tooltip_on_enter[on_enter()]\n    tooltip_Tooltip --> tooltip_Tooltip_on_enter\n    tooltip_Tooltip_on_leave[on_leave()]\n    tooltip_Tooltip --> tooltip_Tooltip_on_leave\n    tooltip_Tooltip_show_tooltip[show_tooltip()]\n    tooltip_Tooltip --> tooltip_Tooltip_show_tooltip\n    tooltip_Tooltip_hide_tooltip[hide_tooltip()]\n    tooltip_Tooltip --> tooltip_Tooltip_hide_tooltip\n```"
    },
    "unity3d_binding": {
      "module": "unity3d_binding",
      "docstring": "Unity3D Embodiment Binding for Echo9ML Cognitive Mesh\n\nThis module provides Unity3D integration for embodied cognition, enabling\nreal-time communication between Unity3D environments and the distributed\ncognitive grammar network.\n\nKey Features:\n- JSON-based communication protocol for Unity3D\n- Real-time cognitive state synchronization\n- Transform and animation data processing\n- Physics and interaction event handling\n- Cognitive intention to Unity action mapping",
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "uuid",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "websockets"
      ],
      "classes": [
        {
          "name": "Unity3DMessageType",
          "docstring": "Unity3D message types for cognitive communication",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 30,
          "cognitive_features": []
        },
        {
          "name": "Unity3DObjectType",
          "docstring": "Unity3D object types for cognitive processing",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 43,
          "cognitive_features": []
        },
        {
          "name": "Unity3DTransform",
          "docstring": "Unity3D transform data structure",
          "methods": [],
          "bases": [],
          "line": 55,
          "cognitive_features": []
        },
        {
          "name": "Unity3DAnimationState",
          "docstring": "Unity3D animation state data",
          "methods": [],
          "bases": [],
          "line": 63,
          "cognitive_features": []
        },
        {
          "name": "Unity3DPhysicsEvent",
          "docstring": "Unity3D physics event data",
          "methods": [],
          "bases": [],
          "line": 73,
          "cognitive_features": []
        },
        {
          "name": "Unity3DInteractionEvent",
          "docstring": "Unity3D interaction event data",
          "methods": [],
          "bases": [],
          "line": 84,
          "cognitive_features": [
            "action"
          ]
        },
        {
          "name": "Unity3DCognitiveIntention",
          "docstring": "Cognitive intention for Unity3D actions",
          "methods": [],
          "bases": [],
          "line": 93,
          "cognitive_features": [
            "action"
          ]
        },
        {
          "name": "Unity3DBinding",
          "docstring": "Unity3D embodiment binding for cognitive mesh",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "cognitive_api_url"
              ],
              "line": 106,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "register_object",
              "docstring": "Register Unity3D object for cognitive tracking",
              "args": [
                "self",
                "object_id",
                "object_type"
              ],
              "line": 198,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "create_unity3d_message_handler",
              "docstring": "Create message handler for Unity3D communication",
              "args": [
                "self"
              ],
              "line": 371,
              "returns": "Any",
              "complexity": 4
            },
            {
              "name": "get_unity3d_integration_code",
              "docstring": "Generate Unity3D C# integration code template",
              "args": [
                "self"
              ],
              "line": 387,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "get_unity3d_setup_instructions",
              "docstring": "Get setup instructions for Unity3D integration",
              "args": [
                "self"
              ],
              "line": 593,
              "returns": "str",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 103,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "create_unity3d_binding",
          "docstring": "Factory function to create Unity3D binding",
          "args": [
            "cognitive_api_url"
          ],
          "line": 700,
          "returns": "Unity3DBinding",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'dataclasses', 'uuid', 'datetime', 'logging', 'enum', 'time', 'websockets', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "State Machine Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    unity3d_binding[unity3d_binding]\n    unity3d_binding_Unity3DMessageType[Unity3DMessageType]\n    unity3d_binding --> unity3d_binding_Unity3DMessageType\n    unity3d_binding_Unity3DObjectType[Unity3DObjectType]\n    unity3d_binding --> unity3d_binding_Unity3DObjectType\n    unity3d_binding_Unity3DTransform[Unity3DTransform]\n    unity3d_binding --> unity3d_binding_Unity3DTransform\n    unity3d_binding_Unity3DAnimationState[Unity3DAnimationState]\n    unity3d_binding --> unity3d_binding_Unity3DAnimationState\n    unity3d_binding_Unity3DPhysicsEvent[Unity3DPhysicsEvent]\n    unity3d_binding --> unity3d_binding_Unity3DPhysicsEvent\n    unity3d_binding_Unity3DInteractionEvent[Unity3DInteractionEvent]\n    unity3d_binding --> unity3d_binding_Unity3DInteractionEvent\n    unity3d_binding_Unity3DCognitiveIntention[Unity3DCognitiveIntention]\n    unity3d_binding --> unity3d_binding_Unity3DCognitiveIntention\n    unity3d_binding_Unity3DBinding[Unity3DBinding]\n    unity3d_binding --> unity3d_binding_Unity3DBinding\n    unity3d_binding_Unity3DBinding___init__[__init__()]\n    unity3d_binding_Unity3DBinding --> unity3d_binding_Unity3DBinding___init__\n    unity3d_binding_Unity3DBinding_register_object[register_object()]\n    unity3d_binding_Unity3DBinding --> unity3d_binding_Unity3DBinding_register_object\n    unity3d_binding_Unity3DBinding_create_unity3d_message_handler[create_unity3d_message_handler()]\n    unity3d_binding_Unity3DBinding --> unity3d_binding_Unity3DBinding_create_unity3d_message_handler\n    unity3d_binding_Unity3DBinding_get_unity3d_integration_code[get_unity3d_integration_code()]\n    unity3d_binding_Unity3DBinding --> unity3d_binding_Unity3DBinding_get_unity3d_integration_code\n    unity3d_binding_Unity3DBinding_get_unity3d_setup_instructions[get_unity3d_setup_instructions()]\n    unity3d_binding_Unity3DBinding --> unity3d_binding_Unity3DBinding_get_unity3d_setup_instructions\n    unity3d_binding_create_unity3d_binding[create_unity3d_binding()]\n    unity3d_binding --> unity3d_binding_create_unity3d_binding\n    style unity3d_binding fill:#ffcc99\n```"
    },
    "validate_cognitive_integration": {
      "module": "validate_cognitive_integration",
      "docstring": "Final validation script for the Distributed Agentic Cognitive Grammar GitHub Action\nValidates workflow structure, component integration, and system readiness",
      "imports": [
        "os",
        "sys",
        "yaml",
        "json",
        "pathlib",
        "typing",
        "cognitive_integration_orchestrator",
        "cognitive_integration_orchestrator"
      ],
      "classes": [],
      "functions": [
        {
          "name": "validate_workflow_file",
          "docstring": "Validate the GitHub workflow YAML file",
          "args": [],
          "line": 14,
          "returns": "<ast.Subscript object at 0x7f2f2d8a7650>",
          "complexity": 16,
          "cognitive_features": []
        },
        {
          "name": "validate_orchestrator_script",
          "docstring": "Validate the cognitive integration orchestrator script",
          "args": [],
          "line": 65,
          "returns": "<ast.Subscript object at 0x7f2f2d8c5210>",
          "complexity": 7,
          "cognitive_features": []
        },
        {
          "name": "validate_cognitive_components",
          "docstring": "Validate that required cognitive components exist",
          "args": [],
          "line": 96,
          "returns": "<ast.Subscript object at 0x7f2f2d8dfe90>",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "validate_issue_template",
          "docstring": "Validate the GitHub issue template",
          "args": [],
          "line": 116,
          "returns": "<ast.Subscript object at 0x7f2f2d72c8d0>",
          "complexity": 6,
          "cognitive_features": []
        },
        {
          "name": "validate_documentation",
          "docstring": "Validate documentation files",
          "args": [],
          "line": 144,
          "returns": "<ast.Subscript object at 0x7f2f2d776310>",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "run_integration_test",
          "docstring": "Run a quick integration test",
          "args": [],
          "line": 160,
          "returns": "<ast.Subscript object at 0x7f2f2d8f8590>",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "validate_gitignore",
          "docstring": "Validate .gitignore has workspace exclusions",
          "args": [],
          "line": 184,
          "returns": "<ast.Subscript object at 0x7f2f2d86e590>",
          "complexity": 6,
          "cognitive_features": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive validation",
          "args": [],
          "line": 204,
          "returns": "Any",
          "complexity": 7,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'cognitive_integration_orchestrator', 'os', 'yaml', 'sys', 'typing', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Cognitive Architecture",
      "flowchart": "```mermaid\ngraph TD\n    validate_cognitive_integration[validate_cognitive_integration]\n    validate_cognitive_integration_validate_workflow_file[validate_workflow_file()]\n    validate_cognitive_integration --> validate_cognitive_integration_validate_workflow_file\n    validate_cognitive_integration_validate_orchestrator_script[validate_orchestrator_script()]\n    validate_cognitive_integration --> validate_cognitive_integration_validate_orchestrator_script\n    validate_cognitive_integration_validate_cognitive_components[validate_cognitive_components()]\n    validate_cognitive_integration --> validate_cognitive_integration_validate_cognitive_components\n    validate_cognitive_integration_validate_issue_template[validate_issue_template()]\n    validate_cognitive_integration --> validate_cognitive_integration_validate_issue_template\n    validate_cognitive_integration_validate_documentation[validate_documentation()]\n    validate_cognitive_integration --> validate_cognitive_integration_validate_documentation\n    style validate_cognitive_integration fill:#99ccff\n```"
    },
    "validate_workflow": {
      "module": "validate_workflow",
      "docstring": "\ud83d\udee1\ufe0f Neural-Symbolic Workflow Validation Engine\n=============================================\n\nAdvanced multi-layer validation system for GitHub Actions workflows,\nimplementing cognitive safety mechanisms and symbolic reasoning to\nprevent dangerous modifications and ensure workflow integrity.\n\nValidation Layers:\n1. Syntactic Validation - YAML structure and GitHub Actions schema\n2. Semantic Safety - Logic validation and security analysis  \n3. Cognitive Coherence - Neural-symbolic consistency checks\n4. Security Analysis - Vulnerability and privilege escalation detection\n\nThis module serves as a critical safety component in the Echoevo\ncognitive evolution system, preventing chaotic divergence while\nenabling safe self-improvement.",
      "imports": [
        "sys",
        "yaml",
        "json",
        "re",
        "logging",
        "datetime",
        "pathlib",
        "typing",
        "argparse"
      ],
      "classes": [
        {
          "name": "CognitiveWorkflowValidator",
          "docstring": "Comprehensive workflow validation system implementing multiple\nsafety layers and cognitive coherence checking.",
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the cognitive validation system\n\nArgs:\n    strict_mode: Enable strict validation with enhanced safety checks\n    security_scan: Enable security vulnerability scanning",
              "args": [
                "self",
                "strict_mode",
                "security_scan"
              ],
              "line": 45,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "validate_workflow",
              "docstring": "Perform comprehensive multi-layer workflow validation\n\nArgs:\n    file_path: Path to the workflow YAML file\n    \nReturns:\n    Validation result dictionary with safety assessment\n    \nRaises:\n    ValueError: If critical validation failures are detected",
              "args": [
                "self",
                "file_path"
              ],
              "line": 58,
              "returns": "<ast.Subscript object at 0x7f2f2d882c50>",
              "complexity": 5
            },
            {
              "name": "_validate_syntax",
              "docstring": "Layer 1: Comprehensive syntactic validation\n\nValidates YAML structure, GitHub Actions schema compliance,\nand basic workflow requirements.",
              "args": [
                "self",
                "workflow",
                "content"
              ],
              "line": 133,
              "returns": "<ast.Subscript object at 0x7f2f2d8fda50>",
              "complexity": 16
            },
            {
              "name": "_validate_semantic_safety",
              "docstring": "Layer 2: Deep semantic safety analysis\n\nAnalyzes workflow logic for potential safety hazards,\nresource exhaustion, infinite loops, and logical inconsistencies.",
              "args": [
                "self",
                "workflow"
              ],
              "line": 201,
              "returns": "<ast.Subscript object at 0x7f2f2d723750>",
              "complexity": 9
            },
            {
              "name": "_validate_cognitive_coherence",
              "docstring": "Layer 3: Cognitive coherence validation\n\nEnsures the workflow maintains cognitive consistency and\naligns with neural-symbolic reasoning principles.",
              "args": [
                "self",
                "workflow"
              ],
              "line": 258,
              "returns": "<ast.Subscript object at 0x7f2f2d8f4950>",
              "complexity": 5
            },
            {
              "name": "_validate_security",
              "docstring": "Layer 4: Security vulnerability analysis\n\nScans for security vulnerabilities, privilege escalation attempts,\nand dangerous command patterns.",
              "args": [
                "self",
                "workflow",
                "content"
              ],
              "line": 309,
              "returns": "<ast.Subscript object at 0x7f2f2d86c350>",
              "complexity": 10
            },
            {
              "name": "_validate_cron_syntax",
              "docstring": "Validate cron expression syntax",
              "args": [
                "self",
                "cron_expr"
              ],
              "line": 375,
              "returns": "bool",
              "complexity": 10
            },
            {
              "name": "_validate_job_syntax",
              "docstring": "Validate individual job syntax",
              "args": [
                "self",
                "job_name",
                "job_config"
              ],
              "line": 395,
              "returns": "<ast.Subscript object at 0x7f2f2d8e85d0>",
              "complexity": 7
            },
            {
              "name": "_validate_yaml_formatting",
              "docstring": "Validate YAML formatting quality",
              "args": [
                "self",
                "content"
              ],
              "line": 419,
              "returns": "<ast.Subscript object at 0x7f2f2d776650>",
              "complexity": 4
            },
            {
              "name": "_analyze_step_safety",
              "docstring": "Analyze individual step for safety issues",
              "args": [
                "self",
                "job_name",
                "step_index",
                "step"
              ],
              "line": 435,
              "returns": "<ast.Subscript object at 0x7f2f2d8dd050>",
              "complexity": 7
            },
            {
              "name": "_analyze_resource_usage",
              "docstring": "Analyze potential resource consumption issues",
              "args": [
                "self",
                "workflow"
              ],
              "line": 467,
              "returns": "<ast.Subscript object at 0x7f2f2d8a6610>",
              "complexity": 9
            },
            {
              "name": "_assess_structural_clarity",
              "docstring": "Assess structural clarity of the workflow",
              "args": [
                "self",
                "workflow"
              ],
              "line": 498,
              "returns": "float",
              "complexity": 3
            },
            {
              "name": "_assess_logical_consistency",
              "docstring": "Assess logical consistency of workflow structure",
              "args": [
                "self",
                "workflow"
              ],
              "line": 512,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "_calculate_cognitive_complexity",
              "docstring": "Calculate cognitive complexity metric",
              "args": [
                "self",
                "workflow"
              ],
              "line": 531,
              "returns": "float",
              "complexity": 1
            },
            {
              "name": "_assess_evolution_compatibility",
              "docstring": "Assess compatibility with cognitive evolution principles",
              "args": [
                "self",
                "workflow"
              ],
              "line": 542,
              "returns": "float",
              "complexity": 5
            },
            {
              "name": "_aggregate_validation_results",
              "docstring": "Aggregate results from all validation layers",
              "args": [
                "self",
                "validation_result"
              ],
              "line": 564,
              "returns": "<ast.Subscript object at 0x7f2f2d4d4210>",
              "complexity": 4
            },
            {
              "name": "_load_safety_patterns",
              "docstring": "Load safety patterns for enhanced validation",
              "args": [
                "self"
              ],
              "line": 598,
              "returns": "<ast.Subscript object at 0x7f2f2d4d4dd0>",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 39,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "validate_workflow",
          "docstring": "Main validation function with enhanced safety checking\n\nArgs:\n    file_path: Path to workflow file\n    strict_mode: Enable strict validation mode\n    security_scan: Enable security vulnerability scanning\n    output_json: Output detailed results in JSON format\n    \nReturns:\n    True if validation passes, False otherwise\n    \nRaises:\n    ValueError: If critical validation failures are detected",
          "args": [
            "file_path",
            "strict_mode",
            "security_scan",
            "output_json"
          ],
          "line": 617,
          "returns": "bool",
          "complexity": 9,
          "cognitive_features": [
            "action"
          ]
        }
      ],
      "constants": [],
      "dependencies": "{'argparse', 'pathlib', 'datetime', 'logging', 're', 'yaml', 'sys', 'typing', 'json'}",
      "cognitive_patterns": [],
      "architectural_role": "Testing Framework",
      "flowchart": "```mermaid\ngraph TD\n    validate_workflow[validate_workflow]\n    validate_workflow_CognitiveWorkflowValidator[CognitiveWorkflowValidator]\n    validate_workflow --> validate_workflow_CognitiveWorkflowValidator\n    validate_workflow_CognitiveWorkflowValidator___init__[__init__()]\n    validate_workflow_CognitiveWorkflowValidator --> validate_workflow_CognitiveWorkflowValidator___init__\n    validate_workflow_CognitiveWorkflowValidator_validate_workflow[validate_workflow()]\n    validate_workflow_CognitiveWorkflowValidator --> validate_workflow_CognitiveWorkflowValidator_validate_workflow\n    validate_workflow_CognitiveWorkflowValidator__validate_syntax[_validate_syntax()]\n    validate_workflow_CognitiveWorkflowValidator --> validate_workflow_CognitiveWorkflowValidator__validate_syntax\n    validate_workflow_CognitiveWorkflowValidator__validate_semantic_safety[_validate_semantic_safety()]\n    validate_workflow_CognitiveWorkflowValidator --> validate_workflow_CognitiveWorkflowValidator__validate_semantic_safety\n    validate_workflow_CognitiveWorkflowValidator__validate_cognitive_coherence[_validate_cognitive_coherence()]\n    validate_workflow_CognitiveWorkflowValidator --> validate_workflow_CognitiveWorkflowValidator__validate_cognitive_coherence\n    validate_workflow_validate_workflow[validate_workflow()]\n    validate_workflow --> validate_workflow_validate_workflow\n```"
    },
    "verify_environment": {
      "module": "verify_environment",
      "docstring": "Environment verification script for EchoSurface development container.\nRun this script to verify that all components of the development environment\nare working correctly, especially the browser automation features.",
      "imports": [
        "os",
        "sys",
        "time",
        "subprocess",
        "importlib.util",
        "logging",
        "pathlib",
        "playwright.sync_api"
      ],
      "classes": [],
      "functions": [
        {
          "name": "check_display",
          "docstring": "Verify X server display is working",
          "args": [],
          "line": 23,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "check_package_installation",
          "docstring": "Check if Python packages are installed",
          "args": [
            "packages"
          ],
          "line": 52,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "check_browser_executables",
          "docstring": "Check if browser executables are available",
          "args": [],
          "line": 74,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        },
        {
          "name": "test_playwright_browser",
          "docstring": "Test if Playwright can launch a browser",
          "args": [],
          "line": 117,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "test_browser_environment",
          "docstring": "Run comprehensive tests of the browser environment",
          "args": [],
          "line": 141,
          "returns": "Any",
          "complexity": 7,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'subprocess', 'pathlib', 'os', 'logging', 'time', 'sys', 'importlib', 'playwright'}",
      "cognitive_patterns": [],
      "architectural_role": "Testing Framework",
      "flowchart": "```mermaid\ngraph TD\n    verify_environment[verify_environment]\n    verify_environment_check_display[check_display()]\n    verify_environment --> verify_environment_check_display\n    verify_environment_check_package_installation[check_package_installation()]\n    verify_environment --> verify_environment_check_package_installation\n    verify_environment_check_browser_executables[check_browser_executables()]\n    verify_environment --> verify_environment_check_browser_executables\n    verify_environment_test_playwright_browser[test_playwright_browser()]\n    verify_environment --> verify_environment_test_playwright_browser\n    verify_environment_test_browser_environment[test_browser_environment()]\n    verify_environment --> verify_environment_test_browser_environment\n```"
    },
    "web_agent_interface": {
      "module": "web_agent_interface",
      "docstring": "Web Agent Embodiment Interface for Echo9ML Cognitive Mesh\n\nThis module provides web browser-based embodiment for the distributed\ncognitive grammar network, enabling real-time interaction through web\ninterfaces, JavaScript agents, and browser automation.\n\nKey Features:\n- JavaScript SDK for web agent development\n- Real-time WebSocket communication with cognitive mesh\n- Browser automation integration\n- Web-based cognitive interaction interfaces\n- Multi-user collaborative cognitive environments",
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "uuid",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "pathlib",
        "flask",
        "flask_socketio",
        "websockets",
        "requests"
      ],
      "classes": [
        {
          "name": "WebAgentType",
          "docstring": "Types of web agents",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 48,
          "cognitive_features": []
        },
        {
          "name": "WebInteractionType",
          "docstring": "Types of web interactions",
          "methods": [],
          "bases": [
            "Enum"
          ],
          "line": 57,
          "cognitive_features": [
            "action"
          ]
        },
        {
          "name": "WebAgentState",
          "docstring": "Web agent state information",
          "methods": [],
          "bases": [],
          "line": 69,
          "cognitive_features": []
        },
        {
          "name": "WebInteractionEvent",
          "docstring": "Web interaction event data",
          "methods": [],
          "bases": [],
          "line": 83,
          "cognitive_features": [
            "action"
          ]
        },
        {
          "name": "CognitiveWebResponse",
          "docstring": "Cognitive response for web interactions",
          "methods": [],
          "bases": [],
          "line": 94,
          "cognitive_features": [
            "action"
          ]
        },
        {
          "name": "WebAgentInterface",
          "docstring": "Web agent embodiment interface for cognitive mesh",
          "methods": [
            {
              "name": "__init__",
              "docstring": null,
              "args": [
                "self",
                "host",
                "port",
                "cognitive_api_url"
              ],
              "line": 106,
              "returns": "Any",
              "complexity": 1
            },
            {
              "name": "_setup_flask_app",
              "docstring": "Setup Flask application with SocketIO",
              "args": [
                "self"
              ],
              "line": 134,
              "returns": "Any",
              "complexity": 2
            },
            {
              "name": "_register_routes",
              "docstring": "Register Flask routes",
              "args": [
                "self"
              ],
              "line": 147,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_register_socketio_events",
              "docstring": "Register SocketIO event handlers",
              "args": [
                "self"
              ],
              "line": 210,
              "returns": "Any",
              "complexity": 6
            },
            {
              "name": "_register_web_agent",
              "docstring": "Register a new web agent",
              "args": [
                "self",
                "agent_type",
                "user_id",
                "metadata"
              ],
              "line": 271,
              "returns": "str",
              "complexity": 4
            },
            {
              "name": "_get_main_interface_html",
              "docstring": "Get main web interface HTML",
              "args": [
                "self"
              ],
              "line": 487,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_javascript_sdk",
              "docstring": "Get JavaScript SDK for web agents",
              "args": [
                "self"
              ],
              "line": 665,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_javascript_agent_html",
              "docstring": "Get JavaScript agent interface HTML",
              "args": [
                "self"
              ],
              "line": 884,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_collaborative_interface_html",
              "docstring": "Get collaborative interface HTML",
              "args": [
                "self"
              ],
              "line": 919,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_mobile_interface_html",
              "docstring": "Get mobile interface HTML",
              "args": [
                "self"
              ],
              "line": 951,
              "returns": "str",
              "complexity": 1
            },
            {
              "name": "_get_generic_agent_html",
              "docstring": "Get generic agent interface HTML",
              "args": [
                "self",
                "agent_type"
              ],
              "line": 989,
              "returns": "str",
              "complexity": 1
            }
          ],
          "bases": [],
          "line": 103,
          "cognitive_features": []
        }
      ],
      "functions": [
        {
          "name": "create_web_agent_interface",
          "docstring": "Factory function to create web agent interface",
          "args": [
            "host",
            "port",
            "cognitive_api_url"
          ],
          "line": 1030,
          "returns": "WebAgentInterface",
          "complexity": 1,
          "cognitive_features": []
        }
      ],
      "constants": [],
      "dependencies": "{'pathlib', 'dataclasses', 'uuid', 'flask', 'datetime', 'logging', 'enum', 'time', 'flask_socketio', 'websockets', 'requests', 'typing', 'asyncio', 'json'}",
      "cognitive_patterns": [
        "Factory Pattern",
        "State Machine Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    web_agent_interface[web_agent_interface]\n    web_agent_interface_WebAgentType[WebAgentType]\n    web_agent_interface --> web_agent_interface_WebAgentType\n    web_agent_interface_WebInteractionType[WebInteractionType]\n    web_agent_interface --> web_agent_interface_WebInteractionType\n    web_agent_interface_WebAgentState[WebAgentState]\n    web_agent_interface --> web_agent_interface_WebAgentState\n    web_agent_interface_WebInteractionEvent[WebInteractionEvent]\n    web_agent_interface --> web_agent_interface_WebInteractionEvent\n    web_agent_interface_CognitiveWebResponse[CognitiveWebResponse]\n    web_agent_interface --> web_agent_interface_CognitiveWebResponse\n    web_agent_interface_WebAgentInterface[WebAgentInterface]\n    web_agent_interface --> web_agent_interface_WebAgentInterface\n    web_agent_interface_WebAgentInterface___init__[__init__()]\n    web_agent_interface_WebAgentInterface --> web_agent_interface_WebAgentInterface___init__\n    web_agent_interface_WebAgentInterface__setup_flask_app[_setup_flask_app()]\n    web_agent_interface_WebAgentInterface --> web_agent_interface_WebAgentInterface__setup_flask_app\n    web_agent_interface_WebAgentInterface__register_routes[_register_routes()]\n    web_agent_interface_WebAgentInterface --> web_agent_interface_WebAgentInterface__register_routes\n    web_agent_interface_WebAgentInterface__register_socketio_events[_register_socketio_events()]\n    web_agent_interface_WebAgentInterface --> web_agent_interface_WebAgentInterface__register_socketio_events\n    web_agent_interface_WebAgentInterface__register_web_agent[_register_web_agent()]\n    web_agent_interface_WebAgentInterface --> web_agent_interface_WebAgentInterface__register_web_agent\n    web_agent_interface_create_web_agent_interface[create_web_agent_interface()]\n    web_agent_interface --> web_agent_interface_create_web_agent_interface\n    style web_agent_interface fill:#ffcc99\n```"
    },
    "web_gui": {
      "module": "web_gui",
      "docstring": "Web-based GUI Dashboard for Deep Tree Echo System.\n\nThis module provides a Flask-based web interface for monitoring and controlling\nthe Deep Tree Echo system, including memory visualization, heartbeat monitoring,\nactivity regulation, and system metrics.",
      "imports": [
        "argparse",
        "io",
        "json",
        "logging",
        "random",
        "sys",
        "threading",
        "time",
        "datetime",
        "pathlib",
        "flask",
        "matplotlib",
        "matplotlib.pyplot",
        "networkx",
        "numpy",
        "psutil",
        "adaptive_heartbeat",
        "memory_management",
        "deep_tree_echo",
        "activity_regulation",
        "chat_session_manager",
        "math"
      ],
      "classes": [],
      "functions": [
        {
          "name": "start_heartbeat_thread",
          "docstring": "Start the adaptive heartbeat system in a separate daemon thread.",
          "args": [],
          "line": 100,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": [
            "learning"
          ]
        },
        {
          "name": "parse_arguments",
          "docstring": "Parse command line arguments for the web GUI application.",
          "args": [],
          "line": 1314,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "get_system_metrics",
          "docstring": "Get current system metrics (CPU, memory, disk)",
          "args": [],
          "line": 1324,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "get_memory_stats",
          "docstring": "Get memory system statistics",
          "args": [],
          "line": 1358,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "get_recent_logs",
          "docstring": "Get recent activity logs from all components",
          "args": [
            "max_logs"
          ],
          "line": 1369,
          "returns": "Any",
          "complexity": 8,
          "cognitive_features": []
        },
        {
          "name": "generate_system_health_chart",
          "docstring": "Generate chart showing system health over time",
          "args": [],
          "line": 1399,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "generate_echo_history_chart",
          "docstring": "Generate chart showing echo patterns over time",
          "args": [],
          "line": 1461,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "generate_memory_graph",
          "docstring": "Generate visualization of the memory system",
          "args": [],
          "line": 1524,
          "returns": "Any",
          "complexity": 12,
          "cognitive_features": [
            "memory",
            "symbolic"
          ]
        },
        {
          "name": "generate_echo_network",
          "docstring": "Generate visualization of the echo network",
          "args": [],
          "line": 1628,
          "returns": "Any",
          "complexity": 11,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "generate_error_image",
          "docstring": "Generate a simple error image with text",
          "args": [
            "error_text"
          ],
          "line": 1736,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "heartbeat_metrics",
          "docstring": "Return the current metrics from the adaptive heartbeat system",
          "args": [],
          "line": 1756,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": [
            "learning"
          ]
        },
        {
          "name": "update_heartbeat_rate",
          "docstring": "Update the base heartbeat rate",
          "args": [],
          "line": 1784,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "update_hyper_threshold",
          "docstring": "Update the hyper drive threshold",
          "args": [],
          "line": 1796,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "toggle_hyper_drive",
          "docstring": "Toggle the hyper drive mode",
          "args": [],
          "line": 1808,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "force_heartbeat_assessment",
          "docstring": "Force the heartbeat system to perform a full assessment",
          "args": [],
          "line": 1821,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "restart_heartbeat",
          "docstring": "Restart the heartbeat system",
          "args": [],
          "line": 1832,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "heartbeat_history_chart",
          "docstring": "Generate a chart showing heartbeat rate history",
          "args": [],
          "line": 1852,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "log_heartbeat_event",
          "docstring": "Log a heartbeat event",
          "args": [
            "message"
          ],
          "line": 1886,
          "returns": "Any",
          "complexity": 2,
          "cognitive_features": []
        },
        {
          "name": "update_metrics",
          "docstring": "Update system metrics for historical tracking",
          "args": [],
          "line": 1899,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "index",
          "docstring": "Serve the main dashboard HTML page.",
          "args": [],
          "line": 1938,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "api_system_metrics",
          "docstring": "API endpoint to get current system metrics.",
          "args": [],
          "line": 1943,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "api_memory_stats",
          "docstring": "API endpoint to get memory system statistics.",
          "args": [],
          "line": 1948,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": [
            "memory"
          ]
        },
        {
          "name": "api_recent_logs",
          "docstring": "API endpoint to get recent activity logs.",
          "args": [],
          "line": 1953,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "api_process_info",
          "docstring": "API endpoint to get current process information.",
          "args": [],
          "line": 1958,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "api_tasks",
          "docstring": "API endpoint to get current task queue.",
          "args": [],
          "line": 1977,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "api_add_task",
          "docstring": "API endpoint to add a new task to the queue.",
          "args": [],
          "line": 1998,
          "returns": "Any",
          "complexity": 5,
          "cognitive_features": []
        },
        {
          "name": "api_update_echo_threshold",
          "docstring": "API endpoint to update the echo threshold value.",
          "args": [],
          "line": 2018,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "api_inject_random_echo",
          "docstring": "API endpoint to inject a random echo into the system.",
          "args": [],
          "line": 2037,
          "returns": "Any",
          "complexity": 9,
          "cognitive_features": []
        },
        {
          "name": "api_propagate_echoes",
          "docstring": "API endpoint to propagate echoes through the system.",
          "args": [],
          "line": 2076,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "api_prune_weak_echoes",
          "docstring": "API endpoint to prune weak echoes from the system.",
          "args": [],
          "line": 2093,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "api_chat_sessions",
          "docstring": "Get list of saved chat sessions with pagination and filtering",
          "args": [],
          "line": 2112,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        },
        {
          "name": "api_chat_session_detail",
          "docstring": "Get detailed information for a specific chat session",
          "args": [
            "session_id"
          ],
          "line": 2156,
          "returns": "Any",
          "complexity": 6,
          "cognitive_features": []
        },
        {
          "name": "api_chat_statistics",
          "docstring": "Get chat session statistics",
          "args": [],
          "line": 2204,
          "returns": "Any",
          "complexity": 3,
          "cognitive_features": []
        },
        {
          "name": "chart_system_health",
          "docstring": "Generate and serve system health chart image.",
          "args": [],
          "line": 2220,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "chart_echo_history",
          "docstring": "Generate and serve echo history chart image.",
          "args": [],
          "line": 2226,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": []
        },
        {
          "name": "chart_memory_graph",
          "docstring": "Generate and serve memory graph visualization image.",
          "args": [],
          "line": 2232,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": [
            "memory",
            "symbolic"
          ]
        },
        {
          "name": "chart_echo_network",
          "docstring": "Generate and serve echo network visualization image.",
          "args": [],
          "line": 2238,
          "returns": "Any",
          "complexity": 1,
          "cognitive_features": [
            "neural"
          ]
        },
        {
          "name": "main",
          "docstring": "Main function to initialize and run the web GUI server.",
          "args": [],
          "line": 2244,
          "returns": "Any",
          "complexity": 4,
          "cognitive_features": []
        }
      ],
      "constants": [
        {
          "name": "MEMORY",
          "line": 94,
          "value": "None"
        },
        {
          "name": "ACTIVITY_REGULATOR",
          "line": 95,
          "value": "None"
        },
        {
          "name": "HEARTBEAT_SYSTEM",
          "line": 96,
          "value": "..."
        },
        {
          "name": "HEARTBEAT_THREAD",
          "line": 97,
          "value": "None"
        },
        {
          "name": "SYSTEM_HISTORY",
          "line": 111,
          "value": "..."
        },
        {
          "name": "HEARTBEAT_LOGS",
          "line": 121,
          "value": "..."
        },
        {
          "name": "HTML_TEMPLATE",
          "line": 124,
          "value": "\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Echo System Dashboard</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f5f5f5;\n            color: #333;\n        }\n        .container {\n            width: 95%;\n            margin: 0 auto;\n            padding: 20px 0;\n        }\n        .header {\n            background-color: #2c3e50;\n            color: white;\n            padding: 10px 20px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        }\n        .tabs {\n            display: flex;\n            margin-top: 20px;\n            border-bottom: 1px solid #ddd;\n        }\n        .tab {\n            padding: 10px 20px;\n            cursor: pointer;\n            border: 1px solid transparent;\n            border-bottom: none;\n            border-radius: 5px 5px 0 0;\n            margin-right: 5px;\n        }\n        .tab.active {\n            background-color: white;\n            border-color: #ddd;\n            color: #2c3e50;\n            font-weight: bold;\n        }\n        .tab:hover:not(.active) {\n            background-color: #eee;\n        }\n        .tab-content {\n            display: none;\n            background-color: white;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-top: none;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n        .tab-content.active {\n            display: block;\n        }\n        .status-container {\n            display: flex;\n            justify-content: space-between;\n            flex-wrap: wrap;\n            margin-bottom: 20px;\n        }\n        .status-card {\n            background-color: white;\n            border-radius: 5px;\n            padding: 15px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n            flex: 1;\n            min-width: 200px;\n            margin: 0 10px 10px 0;\n        }\n        .status-card h3 {\n            margin-top: 0;\n            color: #2c3e50;\n        }\n        .chart-container {\n            background-color: white;\n            border-radius: 5px;\n            padding: 15px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n            margin-bottom: 20px;\n        }\n        .chart-container h3 {\n            margin-top: 0;\n            color: #2c3e50;\n        }\n        .chart {\n            width: 100%;\n            height: 300px;\n            margin-top: 15px;\n        }\n        .chart img {\n            width: 100%;\n            height: 100%;\n            object-fit: contain;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            padding: 10px;\n            text-align: left;\n            border-bottom: 1px solid #ddd;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        tr:hover {\n            background-color: #f5f5f5;\n        }\n        .control-panel {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin-top: 15px;\n        }\n        .control-card {\n            background-color: #f9f9f9;\n            border-radius: 5px;\n            padding: 15px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n            flex: 1;\n            min-width: 250px;\n        }\n        .btn {\n            padding: 8px 15px;\n            background-color: #2c3e50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n        .btn:hover {\n            background-color: #1a252f;\n        }\n        .btn.danger {\n            background-color: #e74c3c;\n        }\n        .btn.danger:hover {\n            background-color: #c0392b;\n        }\n        .btn.warning {\n            background-color: #f39c12;\n        }\n        .btn.warning:hover {\n            background-color: #d35400;\n        }\n        .btn.success {\n            background-color: #27ae60;\n        }\n        .btn.success:hover {\n            background-color: #2ecc71;\n        }\n        .slider-container {\n            margin-top: 10px;\n        }\n        input[type=\"range\"] {\n            width: 100%;\n        }\n        .value-display {\n            text-align: center;\n            margin-top: 5px;\n            font-weight: bold;\n        }\n        .log-entry {\n            padding: 8px;\n            margin-bottom: 5px;\n            border-radius: 4px;\n        }\n        .log-entry:nth-child(odd) {\n            background-color: #f9f9f9;\n        }\n        .status-indicator {\n            display: inline-block;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            margin-right: 10px;\n        }\n        .status-good {\n            background-color: #2ecc71;\n        }\n        .status-warning {\n            background-color: #f39c12;\n        }\n        .status-critical {\n            background-color: #e74c3c;\n        }\n        /* Heartbeat tab specific styles */\n        .pulse-animation {\n            animation: pulse 1s infinite;\n            display: inline-block;\n            color: #e74c3c;\n        }\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.2); }\n            100% { transform: scale(1); }\n        }\n        .heartbeat-controls {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 15px;\n        }\n        /* Chat Sessions tab specific styles */\n        .session-card {\n            background-color: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 8px;\n            padding: 15px;\n            margin-bottom: 15px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        .session-card:hover {\n            background-color: #e9ecef;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        .session-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 10px;\n        }\n        .session-title {\n            font-weight: bold;\n            color: #2c3e50;\n            font-size: 16px;\n        }\n        .session-platform {\n            background-color: #3498db;\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 12px;\n            text-transform: uppercase;\n        }\n        .session-meta {\n            font-size: 14px;\n            color: #6c757d;\n            margin-bottom: 8px;\n        }\n        .session-preview {\n            font-size: 14px;\n            color: #495057;\n            max-height: 60px;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        .session-stats {\n            display: flex;\n            gap: 15px;\n            margin-top: 10px;\n            font-size: 12px;\n            color: #6c757d;\n        }\n        .filter-controls {\n            display: flex;\n            gap: 15px;\n            margin-bottom: 20px;\n            flex-wrap: wrap;\n        }\n        .filter-control {\n            display: flex;\n            flex-direction: column;\n            gap: 5px;\n        }\n        .filter-control label {\n            font-weight: bold;\n            color: #2c3e50;\n        }\n        .filter-control select, .filter-control input {\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        .session-detail {\n            background-color: white;\n            border: 1px solid #dee2e6;\n            border-radius: 8px;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .message-card {\n            background-color: #f8f9fa;\n            border-left: 4px solid #3498db;\n            padding: 15px;\n            margin-bottom: 15px;\n            border-radius: 0 8px 8px 0;\n        }\n        .message-card.user {\n            border-left-color: #27ae60;\n            background-color: #e8f5e8;\n        }\n        .message-card.assistant {\n            border-left-color: #3498db;\n            background-color: #e3f2fd;\n        }\n        .message-header {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n            font-size: 14px;\n        }\n        .message-role {\n            font-weight: bold;\n            text-transform: capitalize;\n        }\n        .message-content {\n            line-height: 1.6;\n            white-space: pre-wrap;\n        }\n        .pagination {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            gap: 10px;\n            margin-top: 20px;\n        }\n        .pagination button {\n            padding: 8px 12px;\n            background-color: #3498db;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .pagination button:disabled {\n            background-color: #bdc3c7;\n            cursor: not-allowed;\n        }\n        .pagination span {\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1><i class=\"fas fa-project-diagram\"></i> Echo System Dashboard</h1>\n        <div>\n            <span id=\"current-time\"></span>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"tabs\">\n            <div class=\"tab active\" data-tab=\"overview\">Overview</div>\n            <div class=\"tab\" data-tab=\"resources\">System Resources</div>\n            <div class=\"tab\" data-tab=\"heartbeat\">Adaptive Heartbeat</div>\n            <div class=\"tab\" data-tab=\"logs\">Activity Logs</div>\n            <div class=\"tab\" data-tab=\"network\">Network</div>\n            <div class=\"tab\" data-tab=\"chatsessions\">Chat Sessions</div>\n            <div class=\"tab\" data-tab=\"config\">Configuration</div>\n        </div>\n\n        <!-- Overview Tab -->\n        <div id=\"overview\" class=\"tab-content active\">\n            <div class=\"status-container\">\n                <div class=\"status-card\">\n                    <h3>System Status</h3>\n                    <p><strong>Status:</strong> <span id=\"system-status\">Operational</span></p>\n                    <p><strong>Uptime:</strong> <span id=\"system-uptime\">Loading...</span></p>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Resource Usage</h3>\n                    <p><strong>CPU:</strong> <span id=\"cpu-usage\">Loading...</span></p>\n                    <p><strong>Memory:</strong> <span id=\"memory-usage\">Loading...</span></p>\n                    <p><strong>Disk:</strong> <span id=\"disk-usage\">Loading...</span></p>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Heartbeat Status</h3>\n                    <p><strong>Rate:</strong> <span id=\"overview-heartbeat-rate\">Loading...</span></p>\n                    <p><strong>Mode:</strong> <span id=\"overview-heartbeat-mode\">Normal</span></p>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Recent Events</h3>\n                    <div id=\"recent-events\">Loading events...</div>\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>System Overview</h3>\n                <div class=\"chart\">\n                    <img src=\"/chart/system_overview\" alt=\"System Overview\" id=\"system-overview-chart\">\n                </div>\n            </div>\n        </div>\n\n        <!-- Resources Tab -->\n        <div id=\"resources\" class=\"tab-content\">\n            <div class=\"status-container\">\n                <div class=\"status-card\">\n                    <h3>CPU</h3>\n                    <div id=\"cpu-detail\">\n                        <p><strong>Usage:</strong> <span id=\"cpu-percent\">Loading...</span></p>\n                        <p><strong>Cores:</strong> <span id=\"cpu-cores\">Loading...</span></p>\n                    </div>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Memory</h3>\n                    <div id=\"memory-detail\">\n                        <p><strong>Used:</strong> <span id=\"memory-used\">Loading...</span></p>\n                        <p><strong>Available:</strong> <span id=\"memory-available\">Loading...</span></p>\n                        <p><strong>Total:</strong> <span id=\"memory-total\">Loading...</span></p>\n                    </div>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Disk</h3>\n                    <div id=\"disk-detail\">\n                        <p><strong>Used:</strong> <span id=\"disk-used\">Loading...</span></p>\n                        <p><strong>Free:</strong> <span id=\"disk-free\">Loading...</span></p>\n                        <p><strong>Total:</strong> <span id=\"disk-total\">Loading...</span></p>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>CPU History</h3>\n                <div class=\"chart\">\n                    <img src=\"/chart/cpu_history\" alt=\"CPU History\" id=\"cpu-chart\">\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>Memory History</h3>\n                <div class=\"chart\">\n                    <img src=\"/chart/memory_history\" alt=\"Memory History\" id=\"memory-chart\">\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>Process List</h3>\n                <table id=\"process-table\">\n                    <thead>\n                        <tr>\n                            <th>PID</th>\n                            <th>Name</th>\n                            <th>CPU %</th>\n                            <th>Memory %</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody id=\"process-body\">\n                        <tr>\n                            <td colspan=\"5\">Loading processes...</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n        <!-- Adaptive Heartbeat Tab -->\n        <div id=\"heartbeat\" class=\"tab-content\">\n            <div class=\"status-container\">\n                <div class=\"status-card\">\n                    <h3><i class=\"fas fa-heartbeat pulse-animation\"></i> Current Heartbeat</h3>\n                    <p><strong>Rate:</strong> <span id=\"heartbeat-rate\">Loading...</span> BPM</p>\n                    <p><strong>System Status:</strong> <span id=\"heartbeat-status\">\n                        <span class=\"status-indicator status-good\"></span>Normal\n                    </span></p>\n                    <p><strong>Hyper Drive:</strong> <span id=\"hyper-drive-status\">Inactive</span></p>\n                </div>\n\n                <div class=\"status-card\">\n                    <h3>System Health</h3>\n                    <p><strong>CPU Usage:</strong> <span id=\"heartbeat-cpu\">Loading...</span></p>\n                    <p><strong>Last Assessment:</strong> <span id=\"last-assessment\">Loading...</span></p>\n                    <button id=\"force-assessment\" class=\"btn\">Force Assessment</button>\n                </div>\n\n                <div class=\"status-card\">\n                    <h3>Quick Actions</h3>\n                    <button id=\"toggle-hyper-drive\" class=\"btn warning\">Toggle Hyper Drive</button>\n                    <button id=\"restart-heartbeat\" class=\"btn danger\">Restart Heartbeat</button>\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>Heartbeat History</h3>\n                <p>Showing heartbeat rate over time with hyper drive periods highlighted in yellow</p>\n                <div class=\"chart\">\n                    <img src=\"/chart/heartbeat_history\" alt=\"Heartbeat History\" id=\"heartbeat-chart\">\n                </div>\n            </div>\n\n            <div class=\"control-panel\">\n                <div class=\"control-card\">\n                    <h3>Base Heartbeat Rate</h3>\n                    <p>Adjust the base heartbeat rate (beats per minute)</p>\n                    <div class=\"slider-container\">\n                        <input type=\"range\" id=\"base-rate-slider\" min=\"30\" max=\"120\" value=\"60\">\n                        <div class=\"value-display\"><span id=\"base-rate-value\">60</span> BPM</div>\n                    </div>\n                    <button id=\"update-base-rate\" class=\"btn\">Update</button>\n                </div>\n\n                <div class=\"control-card\">\n                    <h3>Hyper Drive Threshold</h3>\n                    <p>Set CPU threshold for automatic Hyper Drive activation</p>\n                    <div class=\"slider-container\">\n                        <input type=\"range\" id=\"hyper-threshold-slider\" min=\"60\" max=\"95\" value=\"90\">\n                        <div class=\"value-display\"><span id=\"hyper-threshold-value\">90</span>%</div>\n                    </div>\n                    <button id=\"update-hyper-threshold\" class=\"btn\">Update</button>\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>Recent Heartbeat Events</h3>\n                <div id=\"heartbeat-events\">\n                    <p>Loading events...</p>\n                </div>\n            </div>\n        </div>\n\n        <!-- Logs Tab -->\n        <div id=\"logs\" class=\"tab-content\">\n            <div class=\"chart-container\">\n                <h3>System Log</h3>\n                <div id=\"log-content\">\n                    <p>Loading logs...</p>\n                </div>\n            </div>\n        </div>\n\n        <!-- Network Tab -->\n        <div id=\"network\" class=\"tab-content\">\n            <div class=\"status-container\">\n                <div class=\"status-card\">\n                    <h3>Network Status</h3>\n                    <p><strong>Status:</strong> <span id=\"network-status\">Connected</span></p>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Network Traffic</h3>\n                    <p><strong>Sent:</strong> <span id=\"network-sent\">Loading...</span></p>\n                    <p><strong>Received:</strong> <span id=\"network-received\">Loading...</span></p>\n                </div>\n                <div class=\"status-card\">\n                    <h3>Active Connections</h3>\n                    <p><strong>Count:</strong> <span id=\"connection-count\">Loading...</span></p>\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>Network History</h3>\n                <div class=\"chart\">\n                    <img src=\"/chart/network_history\" alt=\"Network History\" id=\"network-chart\">\n                </div>\n            </div>\n\n            <div class=\"chart-container\">\n                <h3>Connection List</h3>\n                <table id=\"connection-table\">\n                    <thead>\n                        <tr>\n                            <th>Local Address</th>\n                            <th>Remote Address</th>\n                            <th>Status</th>\n                            <th>Type</th>\n                        </tr>\n                    </thead>\n                    <tbody id=\"connection-body\">\n                        <tr>\n                            <td colspan=\"4\">Loading connections...</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n        <!-- Chat Sessions Tab -->\n        <div id=\"chatsessions\" class=\"tab-content\">\n            <div class=\"chart-container\">\n                <h3>Chat Session Manager</h3>\n\n                <!-- Statistics Summary -->\n                <div class=\"status-container\" id=\"chat-stats-container\">\n                    <div class=\"status-card\">\n                        <h4>Total Sessions</h4>\n                        <p id=\"total-sessions\">Loading...</p>\n                    </div>\n                    <div class=\"status-card\">\n                        <h4>Total Messages</h4>\n                        <p id=\"total-messages\">Loading...</p>\n                    </div>\n                    <div class=\"status-card\">\n                        <h4>Average Session Length</h4>\n                        <p id=\"avg-session-length\">Loading...</p>\n                    </div>\n                    <div class=\"status-card\">\n                        <h4>Active Platforms</h4>\n                        <p id=\"active-platforms\">Loading...</p>\n                    </div>\n                </div>\n\n                <!-- Filters -->\n                <div class=\"filter-controls\">\n                    <div class=\"filter-control\">\n                        <label for=\"platform-filter\">Platform:</label>\n                        <select id=\"platform-filter\">\n                            <option value=\"\">All Platforms</option>\n                            <option value=\"CHATGPT\">ChatGPT</option>\n                            <option value=\"CLAUDE\">Claude</option>\n                            <option value=\"WINDSURF\">Windsurf</option>\n                            <option value=\"BROWSER\">Browser</option>\n                            <option value=\"API\">API</option>\n                        </select>\n                    </div>\n                    <div class=\"filter-control\">\n                        <label for=\"days-filter\">Time Range:</label>\n                        <select id=\"days-filter\">\n                            <option value=\"7\">Last 7 days</option>\n                            <option value=\"30\" selected>Last 30 days</option>\n                            <option value=\"90\">Last 90 days</option>\n                            <option value=\"365\">Last year</option>\n                        </select>\n                    </div>\n                    <div class=\"filter-control\">\n                        <label for=\"search-filter\">Search:</label>\n                        <input type=\"text\" id=\"search-filter\" placeholder=\"Search sessions...\">\n                    </div>\n                    <div class=\"filter-control\">\n                        <label>&nbsp;</label>\n                        <button id=\"apply-filters\" class=\"btn\">Apply Filters</button>\n                    </div>\n                </div>\n\n                <!-- Session List -->\n                <div id=\"sessions-container\">\n                    <div id=\"sessions-list\">\n                        <p>Loading chat sessions...</p>\n                    </div>\n\n                    <!-- Pagination -->\n                    <div class=\"pagination\" id=\"pagination-container\" style=\"display: none;\">\n                        <button id=\"prev-page\" onclick=\"loadSessions(currentPage - 1)\">Previous</button>\n                        <span id=\"page-info\">Page 1 of 1</span>\n                        <button id=\"next-page\" onclick=\"loadSessions(currentPage + 1)\">Next</button>\n                    </div>\n                </div>\n\n                <!-- Session Detail Modal (initially hidden) -->\n                <div id=\"session-detail\" class=\"session-detail\" style=\"display: none;\">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\n                        <h4 id=\"detail-title\">Session Details</h4>\n                        <button onclick=\"closeSessionDetail()\" class=\"btn\">Close</button>\n                    </div>\n                    <div id=\"session-info\"></div>\n                    <div id=\"session-messages\"></div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Configuration Tab -->\n        <div id=\"config\" class=\"tab-content\">\n            <div class=\"chart-container\">\n                <h3>System Configuration</h3>\n                <table id=\"config-table\">\n                    <thead>\n                        <tr>\n                            <th>Setting</th>\n                            <th>Value</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody id=\"config-body\">\n                        <tr>\n                            <td colspan=\"3\">Loading configuration...</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Tab switching functionality\n        document.querySelectorAll('.tab').forEach(tab => {\n            tab.addEventListener('click', function() {\n                // Remove active class from all tabs\n                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));\n                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));\n\n                // Add active class to clicked tab\n                this.classList.add('active');\n                document.getElementById(this.dataset.tab).classList.add('active');\n\n                // Load specific data based on tab\n                const activeTab = this.dataset.tab;\n                if (activeTab === 'chatsessions') {\n                    loadChatStatistics();\n                    loadSessions(1, {});\n                }\n\n                // Refresh charts on tab change\n                updateCharts();\n            });\n        });\n\n        // Current time update\n        function updateCurrentTime() {\n            const now = new Date();\n            document.getElementById('current-time').textContent = now.toLocaleString();\n        }\n\n        // Update charts and refresh data\n        function updateCharts() {\n            const activeTab = document.querySelector('.tab.active').dataset.tab;\n\n            // Add timestamp to force refresh of images\n            const timestamp = new Date().getTime();\n\n            if (activeTab === 'overview' || activeTab === 'resources') {\n                document.getElementById('cpu-chart').src = '/chart/cpu_history?' + timestamp;\n                document.getElementById('memory-chart').src = '/chart/memory_history?' + timestamp;\n                document.getElementById('system-overview-chart').src = '/chart/system_overview?' + timestamp;\n            }\n\n            if (activeTab === 'network') {\n                document.getElementById('network-chart').src = '/chart/network_history?' + timestamp;\n            }\n\n            if (activeTab === 'heartbeat') {\n                document.getElementById('heartbeat-chart').src = '/chart/heartbeat_history?' + timestamp;\n            }\n        }\n\n        // Fetch and update system metrics\n        function updateSystemMetrics() {\n            fetch('/api/system_metrics')\n                .then(response => response.json())\n                .then(data => {\n                    document.getElementById('cpu-usage').textContent = data.cpu + '%';\n                    document.getElementById('cpu-percent').textContent = data.cpu + '%';\n                    document.getElementById('memory-usage').textContent = data.memory + '%';\n                    document.getElementById('disk-usage').textContent = data.disk + '%';\n                    document.getElementById('system-uptime').textContent = data.uptime;\n                    document.getElementById('cpu-cores').textContent = data.cpu_cores;\n                    document.getElementById('memory-used').textContent = data.memory_used;\n                    document.getElementById('memory-available').textContent = data.memory_available;\n                    document.getElementById('memory-total').textContent = data.memory_total;\n                    document.getElementById('disk-used').textContent = data.disk_used;\n                    document.getElementById('disk-free').textContent = data.disk_free;\n                    document.getElementById('disk-total').textContent = data.disk_total;\n\n                    // Update process table\n                    const processBody = document.getElementById('process-body');\n                    processBody.innerHTML = '';\n                    data.processes.forEach(process => {\n                        const row = document.createElement('tr');\n                        row.innerHTML = `\n                            <td>${process.pid}</td>\n                            <td>${process.name}</td>\n                            <td>${process.cpu}%</td>\n                            <td>${process.memory}%</td>\n                            <td>${process.status}</td>\n                        `;\n                        processBody.appendChild(row);\n                    });\n                })\n                .catch(error => console.error('Error fetching system metrics:', error));\n        }\n\n        // Fetch and update network metrics\n        function updateNetworkMetrics() {\n            fetch('/api/network_metrics')\n                .then(response => response.json())\n                .then(data => {\n                    document.getElementById('network-sent').textContent = data.sent;\n                    document.getElementById('network-received').textContent = data.received;\n                    document.getElementById('connection-count').textContent = data.connections;\n\n                    // Update connection table\n                    const connectionBody = document.getElementById('connection-body');\n                    connectionBody.innerHTML = '';\n                    data.connection_list.forEach(conn => {\n                        const row = document.createElement('tr');\n                        row.innerHTML = `\n                            <td>${conn.local_address}</td>\n                            <td>${conn.remote_address}</td>\n                            <td>${conn.status}</td>\n                            <td>${conn.type}</td>\n                        `;\n                        connectionBody.appendChild(row);\n                    });\n                })\n                .catch(error => console.error('Error fetching network metrics:', error));\n        }\n\n        // Fetch and update system logs\n        function updateSystemLogs() {\n            fetch('/api/system_logs')\n                .then(response => response.json())\n                .then(data => {\n                    const logContent = document.getElementById('log-content');\n                    logContent.innerHTML = '';\n                    data.logs.forEach(log => {\n                        const logEntry = document.createElement('div');\n                        logEntry.className = 'log-entry';\n                        logEntry.innerHTML = `<strong>${log.timestamp}</strong>: ${log.message}`;\n                        logContent.appendChild(logEntry);\n                    });\n                })\n                .catch(error => console.error('Error fetching system logs:', error));\n        }\n\n        // Fetch and update recent events\n        function updateRecentEvents() {\n            fetch('/api/recent_events')\n                .then(response => response.json())\n                .then(data => {\n                    const eventsDiv = document.getElementById('recent-events');\n                    eventsDiv.innerHTML = '';\n                    data.events.forEach(event => {\n                        const eventEntry = document.createElement('div');\n                        eventEntry.className = 'log-entry';\n                        eventEntry.innerHTML = `<strong>${event.timestamp}</strong>: ${event.message}`;\n                        eventsDiv.appendChild(eventEntry);\n                    });\n                })\n                .catch(error => console.error('Error fetching recent events:', error));\n        }\n\n        // Fetch and update heartbeat metrics\n        function updateHeartbeatMetrics() {\n            fetch('/api/heartbeat_metrics')\n                .then(response => response.json())\n                .then(data => {\n                    // Update heartbeat tab\n                    document.getElementById('heartbeat-rate').textContent = data.current_rate;\n                    document.getElementById('heartbeat-cpu').textContent = data.cpu_usage + '%';\n                    document.getElementById('hyper-drive-status').textContent = data.hyper_drive ? 'Active' : 'Inactive';\n\n                    // Update overview tab heartbeat status\n                    document.getElementById('overview-heartbeat-rate').textContent = data.current_rate + ' BPM';\n                    document.getElementById('overview-heartbeat-mode').textContent = data.hyper_drive ? 'Hyper Drive' : 'Normal';\n\n                    // Update heartbeat status indicator\n                    const statusIndicator = document.getElementById('heartbeat-status');\n                    if (data.health_status === 'Good') {\n                        statusIndicator.innerHTML = '<span class=\"status-indicator status-good\"></span>Normal';\n                    } else if (data.health_status === 'Warning') {\n                        statusIndicator.innerHTML = '<span class=\"status-indicator status-warning\"></span>Elevated';\n                    } else if (data.health_status === 'Critical') {\n                        statusIndicator.innerHTML = '<span class=\"status-indicator status-critical\"></span>Critical';\n                    }\n\n                    // Update heartbeat events\n                    const eventsDiv = document.getElementById('heartbeat-events');\n                    eventsDiv.innerHTML = '';\n                    data.recent_logs.forEach(log => {\n                        const logEntry = document.createElement('div');\n                        logEntry.className = 'log-entry';\n                        logEntry.innerHTML = `<strong>${log.timestamp}</strong>: ${log.message}`;\n                        eventsDiv.appendChild(logEntry);\n                    });\n                })\n                .catch(error => console.error('Error fetching heartbeat metrics:', error));\n        }\n\n        // Setup heartbeat controls\n        function setupHeartbeatControls() {\n            // Base rate slider\n            const baseRateSlider = document.getElementById('base-rate-slider');\n            const baseRateValue = document.getElementById('base-rate-value');\n\n            baseRateSlider.addEventListener('input', () => {\n                baseRateValue.textContent = baseRateSlider.value;\n            });\n\n            document.getElementById('update-base-rate').addEventListener('click', () => {\n                const value = baseRateSlider.value;\n                fetch(`/api/update_heartbeat_rate?value=${value}`)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.success) {\n                            alert('Base heartbeat rate updated!');\n                        } else {\n                            alert('Error: ' + data.message);\n                        }\n                    })\n                    .catch(error => console.error('Error updating heartbeat rate:', error));\n            });\n\n            // Hyper drive threshold slider\n            const hyperThresholdSlider = document.getElementById('hyper-threshold-slider');\n            const hyperThresholdValue = document.getElementById('hyper-threshold-value');\n\n            hyperThresholdSlider.addEventListener('input', () => {\n                hyperThresholdValue.textContent = hyperThresholdSlider.value;\n            });\n\n            document.getElementById('update-hyper-threshold').addEventListener('click', () => {\n                const value = hyperThresholdSlider.value;\n                fetch(`/api/update_hyper_threshold?value=${value}`)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.success) {\n                            alert('Hyper drive threshold updated!');\n                        } else {\n                            alert('Error: ' + data.message);\n                        }\n                    })\n                    .catch(error => console.error('Error updating threshold:', error));\n            });\n\n            // Toggle hyper drive button\n            document.getElementById('toggle-hyper-drive').addEventListener('click', () => {\n                fetch('/api/toggle_hyper_drive')\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.success) {\n                            alert(data.message);\n                            updateHeartbeatMetrics();\n                        } else {\n                            alert('Error: ' + data.message);\n                        }\n                    })\n                    .catch(error => console.error('Error toggling hyper drive:', error));\n            });\n\n            // Force assessment button\n            document.getElementById('force-assessment').addEventListener('click', () => {\n                fetch('/api/force_heartbeat_assessment')\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.success) {\n                            alert('System assessment completed!');\n                            updateHeartbeatMetrics();\n                        } else {\n                            alert('Error: ' + data.message);\n                        }\n                    })\n                    .catch(error => console.error('Error forcing assessment:', error));\n            });\n\n            // Restart heartbeat button\n            document.getElementById('restart-heartbeat').addEventListener('click', () => {\n                if (confirm('Are you sure you want to restart the heartbeat system?')) {\n                    fetch('/api/restart_heartbeat')\n                        .then(response => response.json())\n                        .then(data => {\n                            if (data.success) {\n                                alert('Heartbeat system restarted!');\n                                updateHeartbeatMetrics();\n                            } else {\n                                alert('Error: ' + data.message);\n                            }\n                        })\n                        .catch(error => console.error('Error restarting heartbeat:', error));\n                }\n            });\n        }\n\n        // Chat Session Management\n        let currentPage = 1;\n        let currentFilters = {};\n\n        // Load chat sessions with pagination and filtering\n        function loadSessions(page = 1, filters = {}) {\n            currentPage = page;\n            currentFilters = filters;\n\n            const queryParams = new URLSearchParams({\n                page: page,\n                limit: 10,\n                platform: filters.platform || '',\n                days: filters.days || 30,\n                search: filters.search || ''\n            });\n\n            fetch(`/api/chat_sessions?${queryParams}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        displaySessions(data.sessions);\n                        updatePagination(data.page, data.total, data.limit, data.has_next);\n                    } else {\n                        document.getElementById('sessions-list').innerHTML = `<p>Error loading sessions: ${data.error}</p>`;\n                    }\n                })\n                .catch(error => {\n                    console.error('Error loading sessions:', error);\n                    document.getElementById('sessions-list').innerHTML = '<p>Error loading sessions. Chat session manager may not be available.</p>';\n                });\n        }\n\n        // Display sessions in the UI\n        function displaySessions(sessions) {\n            const container = document.getElementById('sessions-list');\n\n            if (!sessions || sessions.length === 0) {\n                container.innerHTML = '<p>No chat sessions found.</p>';\n                return;\n            }\n\n            container.innerHTML = sessions.map(session => `\n                <div class=\"session-card\" onclick=\"loadSessionDetail('${session.id}')\">\n                    <div class=\"session-header\">\n                        <div class=\"session-title\">${session.title || 'Untitled Session'}</div>\n                        <div class=\"session-platform\">${session.platform}</div>\n                    </div>\n                    <div class=\"session-meta\">\n                        Started: ${new Date(session.start_time).toLocaleString()} |\n                        ${session.end_time ? 'Ended: ' + new Date(session.end_time).toLocaleString() : 'Active'} |\n                        Status: ${session.status}\n                    </div>\n                    <div class=\"session-preview\">\n                        ${session.last_message_preview || 'No messages yet'}\n                    </div>\n                    <div class=\"session-stats\">\n                        <span>\ud83d\udcac ${session.total_messages} messages</span>\n                        <span>\ud83d\udd04 Echo: ${session.avg_echo_value ? session.avg_echo_value.toFixed(2) : 'N/A'}</span>\n                        <span>\u26a1 Salience: ${session.avg_salience ? session.avg_salience.toFixed(2) : 'N/A'}</span>\n                    </div>\n                </div>\n            `).join('');\n        }\n\n        // Update pagination controls\n        function updatePagination(page, total, limit, hasNext) {\n            const container = document.getElementById('pagination-container');\n            const pageInfo = document.getElementById('page-info');\n            const prevBtn = document.getElementById('prev-page');\n            const nextBtn = document.getElementById('next-page');\n\n            const totalPages = Math.ceil(total / limit);\n\n            if (totalPages <= 1) {\n                container.style.display = 'none';\n                return;\n            }\n\n            container.style.display = 'flex';\n            pageInfo.textContent = `Page ${page} of ${totalPages} (${total} sessions)`;\n\n            prevBtn.disabled = page <= 1;\n            nextBtn.disabled = !hasNext;\n        }\n\n        // Load detailed session view\n        function loadSessionDetail(sessionId) {\n            fetch(`/api/chat_session/${sessionId}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        displaySessionDetail(data.session);\n                    } else {\n                        alert('Error loading session details: ' + data.error);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error loading session detail:', error);\n                    alert('Error loading session details');\n                });\n        }\n\n        // Display detailed session view\n        function displaySessionDetail(session) {\n            const container = document.getElementById('session-detail');\n            const title = document.getElementById('detail-title');\n            const info = document.getElementById('session-info');\n            const messages = document.getElementById('session-messages');\n\n            title.textContent = session.title || 'Untitled Session';\n\n            info.innerHTML = `\n                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\n                    <div><strong>Platform:</strong> ${session.platform}</div>\n                    <div><strong>Status:</strong> ${session.status}</div>\n                    <div><strong>Started:</strong> ${new Date(session.start_time).toLocaleString()}</div>\n                    <div><strong>Ended:</strong> ${session.end_time ? new Date(session.end_time).toLocaleString() : 'Still active'}</div>\n                    <div><strong>Messages:</strong> ${session.total_messages}</div>\n                    <div><strong>Conversation ID:</strong> ${session.conversation_id || 'N/A'}</div>\n                </div>\n            `;\n\n            if (session.messages && session.messages.length > 0) {\n                messages.innerHTML = `\n                    <h4>Messages (${session.messages.length})</h4>\n                    ${session.messages.map(msg => `\n                        <div class=\"message-card ${msg.role}\">\n                            <div class=\"message-header\">\n                                <div class=\"message-role\">${msg.role}</div>\n                                <div>${new Date(msg.timestamp).toLocaleString()}</div>\n                            </div>\n                            <div class=\"message-content\">${msg.content}</div>\n                            <div style=\"margin-top: 10px; font-size: 12px; color: #6c757d;\">\n                                Echo: ${msg.echo_value ? msg.echo_value.toFixed(3) : 'N/A'} |\n                                Salience: ${msg.salience ? msg.salience.toFixed(3) : 'N/A'}\n                            </div>\n                        </div>\n                    `).join('')}\n                `;\n            } else {\n                messages.innerHTML = '<h4>No messages in this session</h4>';\n            }\n\n            container.style.display = 'block';\n            container.scrollIntoView({ behavior: 'smooth' });\n        }\n\n        // Close session detail view\n        function closeSessionDetail() {\n            document.getElementById('session-detail').style.display = 'none';\n        }\n\n        // Load chat statistics\n        function loadChatStatistics() {\n            fetch('/api/chat_statistics')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        const stats = data.statistics;\n                        document.getElementById('total-sessions').textContent = stats.total_sessions || 0;\n                        document.getElementById('total-messages').textContent = stats.total_messages || 0;\n                        document.getElementById('avg-session-length').textContent =\n                            stats.avg_session_length ? `${stats.avg_session_length.toFixed(1)} messages` : 'N/A';\n                        document.getElementById('active-platforms').textContent =\n                            stats.platforms_used ? stats.platforms_used.join(', ') : 'None';\n                    } else {\n                        console.log('Chat statistics not available:', data.error);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error loading chat statistics:', error);\n                });\n        }\n\n        // Setup chat session event handlers\n        function setupChatSessionHandlers() {\n            // Apply filters button\n            document.getElementById('apply-filters').addEventListener('click', () => {\n                const filters = {\n                    platform: document.getElementById('platform-filter').value,\n                    days: document.getElementById('days-filter').value,\n                    search: document.getElementById('search-filter').value\n                };\n                loadSessions(1, filters);\n            });\n\n            // Search on Enter key\n            document.getElementById('search-filter').addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    document.getElementById('apply-filters').click();\n                }\n            });\n        }\n\n        // Initialize everything\n        function initialize() {\n            updateCurrentTime();\n            updateSystemMetrics();\n            updateNetworkMetrics();\n            updateSystemLogs();\n            updateRecentEvents();\n            updateHeartbeatMetrics();\n            updateCharts();\n            setupHeartbeatControls();\n            setupChatSessionHandlers();\n\n            // Update time every second\n            setInterval(updateCurrentTime, 1000);\n\n            // Update metrics periodically\n            setInterval(updateSystemMetrics, 5000);\n            setInterval(updateNetworkMetrics, 5000);\n            setInterval(updateSystemLogs, 10000);\n            setInterval(updateRecentEvents, 5000);\n            setInterval(updateHeartbeatMetrics, 3000);\n            setInterval(updateCharts, 30000);\n        }\n\n        // Run initialization when page loads\n        window.addEventListener('load', initialize);\n    </script>\n</body>\n</html>\n"
        }
      ],
      "dependencies": "{'adaptive_heartbeat', 'numpy', 'networkx', 'activity_regulation', 'datetime', 'threading', 'logging', 'chat_session_manager', 'sys', 'io', 'deep_tree_echo', 'memory_management', 'random', 'math', 'json', 'matplotlib', 'flask', 'argparse', 'pathlib', 'psutil', 'time'}",
      "cognitive_patterns": [
        "Neural Network Pattern",
        "Memory Management Pattern"
      ],
      "architectural_role": "Interface Layer",
      "flowchart": "```mermaid\ngraph TD\n    web_gui[web_gui]\n    web_gui_start_heartbeat_thread[start_heartbeat_thread()]\n    web_gui --> web_gui_start_heartbeat_thread\n    web_gui_parse_arguments[parse_arguments()]\n    web_gui --> web_gui_parse_arguments\n    web_gui_get_system_metrics[get_system_metrics()]\n    web_gui --> web_gui_get_system_metrics\n    web_gui_get_memory_stats[get_memory_stats()]\n    web_gui --> web_gui_get_memory_stats\n    web_gui_get_recent_logs[get_recent_logs()]\n    web_gui --> web_gui_get_recent_logs\n    style web_gui fill:#ffcc99\n```"
    }
  },
  "architectural_overview": {
    "Utility": [
      "activity_regulation",
      "activity_stream",
      "antikythera",
      "chat_session_manager",
      "cognitive_evolution",
      "cronbot",
      "echo_evolution",
      "echopilot",
      "meta_cognitive_recursion",
      "monitor",
      "monitor_interface",
      "pattern languages",
      "personality_system",
      "phase5_demonstration",
      "stream",
      "temporal",
      "terminal_controller",
      "tooltip"
    ],
    "Interface Layer": [
      "adaptive_heartbeat",
      "ai_integration",
      "browser_interface",
      "chat_interface",
      "copilot_suggestions",
      "differential_emotion_theory",
      "emergency_protocols",
      "emotional_dynamics",
      "evolution_visualization",
      "fix_locale_gui",
      "gui_dashboard",
      "launch_dashboards",
      "launch_gui",
      "launch_gui_standalone",
      "network_config",
      "ros_binding",
      "selenium_interface",
      "sensory_motor",
      "sensory_motor_simple",
      "unity3d_binding",
      "web_agent_interface",
      "web_gui"
    ],
    "Cognitive Architecture": [
      "cognitive_architecture",
      "cognitive_integration_orchestrator",
      "cognitive_mesh_api",
      "demo_distributed_cognitive_grammar",
      "distributed_cognitive_grammar",
      "echoself_demo",
      "echoself_introspection",
      "ko6ml_atomspace_adapter",
      "ml_system",
      "moses_evolutionary_search",
      "phase1_verification",
      "phase3_demonstration",
      "phase4_demo",
      "phase6_cognitive_unification",
      "phase6_deep_testing",
      "psystem_membrane_architecture",
      "self_evo",
      "swarmprotocol",
      "validate_cognitive_integration"
    ],
    "Core Engine": [
      "deep_tree_echo",
      "deep_tree_echo-v1",
      "deep_tree_echo-v2",
      "echo9ml",
      "echo9ml_demo",
      "echo9ml_integration",
      "launch_deep_tree_echo"
    ],
    "Attention Systems": [
      "ecan_attention_allocator"
    ],
    "Neural Processing": [
      "ggml_tensor_kernel",
      "neural_symbolic_synthesis",
      "tensor_fragment_architecture",
      "tensor_signature_benchmark"
    ],
    "Symbolic Processing": [
      "hypergraph_visualization",
      "symbolic_reasoning"
    ],
    "Memory Systems": [
      "memory_management"
    ],
    "Documentation": [
      "phase6_recursive_documentation"
    ],
    "Testing Framework": [
      "validate_workflow",
      "verify_environment"
    ]
  },
  "dependency_graph": "```mermaid\ngraph TD\n    activity_regulation[activity_regulation]\n    activity_stream[activity_stream]\n    adaptive_heartbeat[adaptive_heartbeat]\n    ai_integration[ai_integration]\n    antikythera[antikythera]\n    browser_interface[browser_interface]\n    chat_interface[chat_interface]\n    chat_session_manager[chat_session_manager]\n    cognitive_architecture[cognitive_architecture]\n    cognitive_evolution[cognitive_evolution]\n    cognitive_integration_orchestrator[cognitive_integration_orchestrator]\n    cognitive_mesh_api[cognitive_mesh_api]\n    copilot_suggestions[copilot_suggestions]\n    cronbot[cronbot]\n    deep_tree_echo[deep_tree_echo]\n    deep_tree_echo-v1[deep_tree_echo-v1]\n    deep_tree_echo-v2[deep_tree_echo-v2]\n    demo_distributed_cognitive_grammar[demo_distributed_cognitive_grammar]\n    differential_emotion_theory[differential_emotion_theory]\n    distributed_cognitive_grammar[distributed_cognitive_grammar]\n    ecan_attention_allocator[ecan_attention_allocator]\n    echo9ml[echo9ml]\n    echo9ml_demo[echo9ml_demo]\n    echo9ml_integration[echo9ml_integration]\n    echo_evolution[echo_evolution]\n    echopilot[echopilot]\n    echoself_demo[echoself_demo]\n    echoself_introspection[echoself_introspection]\n    emergency_protocols[emergency_protocols]\n    emotional_dynamics[emotional_dynamics]\n    evolution_visualization[evolution_visualization]\n    fix_locale_gui[fix_locale_gui]\n    ggml_tensor_kernel[ggml_tensor_kernel]\n    gui_dashboard[gui_dashboard]\n    hypergraph_visualization[hypergraph_visualization]\n    ko6ml_atomspace_adapter[ko6ml_atomspace_adapter]\n    launch_dashboards[launch_dashboards]\n    launch_deep_tree_echo[launch_deep_tree_echo]\n    launch_gui[launch_gui]\n    launch_gui_standalone[launch_gui_standalone]\n    memory_management[memory_management]\n    meta_cognitive_recursion[meta_cognitive_recursion]\n    ml_system[ml_system]\n    monitor[monitor]\n    monitor_interface[monitor_interface]\n    moses_evolutionary_search[moses_evolutionary_search]\n    network_config[network_config]\n    neural_symbolic_synthesis[neural_symbolic_synthesis]\n    pattern languages[pattern languages]\n    personality_system[personality_system]\n    phase1_verification[phase1_verification]\n    phase3_demonstration[phase3_demonstration]\n    phase4_demo[phase4_demo]\n    phase5_demonstration[phase5_demonstration]\n    phase6_cognitive_unification[phase6_cognitive_unification]\n    phase6_deep_testing[phase6_deep_testing]\n    phase6_recursive_documentation[phase6_recursive_documentation]\n    psystem_membrane_architecture[psystem_membrane_architecture]\n    ros_binding[ros_binding]\n    selenium_interface[selenium_interface]\n    self_evo[self_evo]\n    sensory_motor[sensory_motor]\n    sensory_motor_simple[sensory_motor_simple]\n    stream[stream]\n    swarmprotocol[swarmprotocol]\n    symbolic_reasoning[symbolic_reasoning]\n    temporal[temporal]\n    tensor_fragment_architecture[tensor_fragment_architecture]\n    tensor_signature_benchmark[tensor_signature_benchmark]\n    terminal_controller[terminal_controller]\n    tooltip[tooltip]\n    unity3d_binding[unity3d_binding]\n    validate_cognitive_integration[validate_cognitive_integration]\n    validate_workflow[validate_workflow]\n    verify_environment[verify_environment]\n    web_agent_interface[web_agent_interface]\n    web_gui[web_gui]\n    sensory_motor --> browser_interface\n    chat_session_manager --> chat_interface\n    echoself_introspection --> cognitive_architecture\n    cognitive_architecture --> cognitive_evolution\n    echo_evolution --> cognitive_evolution\n    memory_management --> cognitive_mesh_api\n    neural_symbolic_synthesis --> cognitive_mesh_api\n    cognitive_architecture --> cognitive_mesh_api\n    echoself_introspection --> cognitive_mesh_api\n    distributed_cognitive_grammar --> cognitive_mesh_api\n    sensory_motor --> deep_tree_echo\n    echoself_introspection --> deep_tree_echo\n    emotional_dynamics --> deep_tree_echo\n    sensory_motor_simple --> deep_tree_echo\n    ml_system --> deep_tree_echo\n    differential_emotion_theory --> deep_tree_echo\n    sensory_motor --> deep_tree_echo-v1\n    emotional_dynamics --> deep_tree_echo-v1\n    sensory_motor_simple --> deep_tree_echo-v1\n    ml_system --> deep_tree_echo-v1\n    differential_emotion_theory --> deep_tree_echo-v1\n    sensory_motor --> deep_tree_echo-v2\n    emotional_dynamics --> deep_tree_echo-v2\n    sensory_motor_simple --> deep_tree_echo-v2\n    ml_system --> deep_tree_echo-v2\n    differential_emotion_theory --> deep_tree_echo-v2\n    symbolic_reasoning --> demo_distributed_cognitive_grammar\n    ggml_tensor_kernel --> demo_distributed_cognitive_grammar\n    distributed_cognitive_grammar --> demo_distributed_cognitive_grammar\n    emotional_dynamics --> differential_emotion_theory\n    memory_management --> distributed_cognitive_grammar\n    echoself_introspection --> distributed_cognitive_grammar\n    swarmprotocol --> distributed_cognitive_grammar\n    ecan_attention_allocator --> distributed_cognitive_grammar\n    echo9ml --> echo9ml_demo\n    echo9ml --> echo9ml_integration\n    cognitive_architecture --> echo9ml_integration\n    cognitive_architecture --> echoself_demo\n    cognitive_architecture --> evolution_visualization\n    cognitive_evolution --> evolution_visualization\n    echo_evolution --> evolution_visualization\n    activity_regulation --> fix_locale_gui\n    memory_management --> fix_locale_gui\n    gui_dashboard --> fix_locale_gui\n    adaptive_heartbeat --> gui_dashboard\n    activity_regulation --> gui_dashboard\n    deep_tree_echo --> gui_dashboard\n    memory_management --> gui_dashboard\n    ml_system --> gui_dashboard\n    tooltip --> gui_dashboard\n    tensor_fragment_architecture --> hypergraph_visualization\n    ko6ml_atomspace_adapter --> hypergraph_visualization\n    symbolic_reasoning --> ko6ml_atomspace_adapter\n    echo9ml --> ko6ml_atomspace_adapter\n    ggml_tensor_kernel --> ko6ml_atomspace_adapter\n    memory_management --> launch_deep_tree_echo\n    emergency_protocols --> launch_deep_tree_echo\n    browser_interface --> launch_deep_tree_echo\n    personality_system --> launch_deep_tree_echo\n    activity_regulation --> launch_deep_tree_echo\n    cognitive_architecture --> launch_deep_tree_echo\n    sensory_motor_simple --> launch_deep_tree_echo\n    terminal_controller --> launch_deep_tree_echo\n    ai_integration --> launch_deep_tree_echo\n    deep_tree_echo --> launch_deep_tree_echo\n    gui_dashboard --> launch_deep_tree_echo\n    emergency_protocols --> launch_gui\n    sensory_motor --> launch_gui\n    personality_system --> launch_gui\n    activity_regulation --> launch_gui\n    cognitive_architecture --> launch_gui\n    sensory_motor_simple --> launch_gui\n    ai_integration --> launch_gui\n    memory_management --> launch_gui\n    gui_dashboard --> launch_gui\n    activity_regulation --> launch_gui_standalone\n    memory_management --> launch_gui_standalone\n    gui_dashboard --> launch_gui_standalone\n    deep_tree_echo --> memory_management\n    moses_evolutionary_search --> meta_cognitive_recursion\n    cognitive_architecture --> meta_cognitive_recursion\n    cognitive_evolution --> meta_cognitive_recursion\n    echo_evolution --> meta_cognitive_recursion\n    tensor_fragment_architecture --> neural_symbolic_synthesis\n    ggml_tensor_kernel --> neural_symbolic_synthesis\n    neural_symbolic_synthesis --> phase3_demonstration\n    tensor_signature_benchmark --> phase3_demonstration\n    cognitive_mesh_api --> phase4_demo\n    ros_binding --> phase4_demo\n    web_agent_interface --> phase4_demo\n    unity3d_binding --> phase4_demo\n    meta_cognitive_recursion --> phase5_demonstration\n    moses_evolutionary_search --> phase5_demonstration\n    cognitive_evolution --> phase5_demonstration\n    echo_evolution --> phase5_demonstration\n    meta_cognitive_recursion --> phase6_cognitive_unification\n    echo9ml --> phase6_cognitive_unification\n    cognitive_architecture --> phase6_cognitive_unification\n    chat_session_manager --> selenium_interface\n    deep_tree_echo --> selenium_interface\n    ml_system --> sensory_motor\n    ml_system --> sensory_motor_simple\n    ggml_tensor_kernel --> tensor_fragment_architecture\n    ko6ml_atomspace_adapter --> tensor_fragment_architecture\n    tensor_fragment_architecture --> tensor_signature_benchmark\n    neural_symbolic_synthesis --> tensor_signature_benchmark\n    ggml_tensor_kernel --> tensor_signature_benchmark\n    cognitive_integration_orchestrator --> validate_cognitive_integration\n    adaptive_heartbeat --> web_gui\n    activity_regulation --> web_gui\n    chat_session_manager --> web_gui\n    deep_tree_echo --> web_gui\n    memory_management --> web_gui\n    style adaptive_heartbeat fill:#ffcc99\n    style ai_integration fill:#ffcc99\n    style browser_interface fill:#ffcc99\n    style chat_interface fill:#ffcc99\n    style cognitive_architecture fill:#99ccff\n    style cognitive_integration_orchestrator fill:#99ccff\n    style cognitive_mesh_api fill:#99ccff\n    style copilot_suggestions fill:#ffcc99\n    style deep_tree_echo fill:#ff9999\n    style deep_tree_echo-v1 fill:#ff9999\n    style deep_tree_echo-v2 fill:#ff9999\n    style demo_distributed_cognitive_grammar fill:#99ccff\n    style differential_emotion_theory fill:#ffcc99\n    style distributed_cognitive_grammar fill:#99ccff\n    style echo9ml fill:#ff9999\n    style echo9ml_demo fill:#ff9999\n    style echo9ml_integration fill:#ff9999\n    style echoself_demo fill:#99ccff\n    style echoself_introspection fill:#99ccff\n    style emergency_protocols fill:#ffcc99\n    style emotional_dynamics fill:#ffcc99\n    style evolution_visualization fill:#ffcc99\n    style fix_locale_gui fill:#ffcc99\n    style ggml_tensor_kernel fill:#99ff99\n    style gui_dashboard fill:#ffcc99\n    style ko6ml_atomspace_adapter fill:#99ccff\n    style launch_dashboards fill:#ffcc99\n    style launch_deep_tree_echo fill:#ff9999\n    style launch_gui fill:#ffcc99\n    style launch_gui_standalone fill:#ffcc99\n    style ml_system fill:#99ccff\n    style moses_evolutionary_search fill:#99ccff\n    style network_config fill:#ffcc99\n    style neural_symbolic_synthesis fill:#99ff99\n    style phase1_verification fill:#99ccff\n    style phase3_demonstration fill:#99ccff\n    style phase4_demo fill:#99ccff\n    style phase6_cognitive_unification fill:#99ccff\n    style phase6_deep_testing fill:#99ccff\n    style psystem_membrane_architecture fill:#99ccff\n    style ros_binding fill:#ffcc99\n    style selenium_interface fill:#ffcc99\n    style self_evo fill:#99ccff\n    style sensory_motor fill:#ffcc99\n    style sensory_motor_simple fill:#ffcc99\n    style swarmprotocol fill:#99ccff\n    style tensor_fragment_architecture fill:#99ff99\n    style tensor_signature_benchmark fill:#99ff99\n    style unity3d_binding fill:#ffcc99\n    style validate_cognitive_integration fill:#99ccff\n    style web_agent_interface fill:#ffcc99\n    style web_gui fill:#ffcc99\n```",
  "cognitive_patterns_summary": {
    "State Machine Pattern": [
      "activity_regulation",
      "cognitive_mesh_api",
      "differential_emotion_theory",
      "emotional_dynamics",
      "meta_cognitive_recursion",
      "personality_system",
      "ros_binding",
      "self_evo",
      "unity3d_binding",
      "web_agent_interface"
    ],
    "Factory Pattern": [
      "chat_session_manager",
      "cognitive_mesh_api",
      "ecan_attention_allocator",
      "echo9ml",
      "echo9ml_integration",
      "hypergraph_visualization",
      "ko6ml_atomspace_adapter",
      "neural_symbolic_synthesis",
      "phase4_demo",
      "ros_binding",
      "sensory_motor_simple",
      "tensor_fragment_architecture",
      "tensor_signature_benchmark",
      "unity3d_binding",
      "web_agent_interface"
    ],
    "Memory Management Pattern": [
      "cognitive_architecture",
      "cognitive_mesh_api",
      "ecan_attention_allocator",
      "echo_evolution",
      "memory_management",
      "web_gui"
    ],
    "Neural Network Pattern": [
      "distributed_cognitive_grammar",
      "echo9ml",
      "echo_evolution",
      "echoself_demo",
      "ggml_tensor_kernel",
      "network_config",
      "neural_symbolic_synthesis",
      "tensor_fragment_architecture",
      "tensor_signature_benchmark",
      "web_gui"
    ],
    "Recursive Pattern": [
      "meta_cognitive_recursion",
      "phase6_recursive_documentation"
    ],
    "Strategy Pattern": [
      "self_evo"
    ]
  },
  "statistics": {
    "total_classes": 212,
    "total_functions": 149,
    "architectural_roles": 10,
    "modules_by_role": {
      "Utility": 18,
      "Interface Layer": 22,
      "Cognitive Architecture": 19,
      "Core Engine": 7,
      "Attention Systems": 1,
      "Neural Processing": 4,
      "Symbolic Processing": 2,
      "Memory Systems": 1,
      "Documentation": 1,
      "Testing Framework": 2
    }
  }
}